{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/weixin.jpg","path":"images/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/fireworks.js","path":"js/src/fireworks.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/JavaScirpt.md","hash":"65b207b1dbdbcd6ce3e72372b22122e5c6ed3249","modified":1672370046275},{"_id":"source/_posts/browser.md","hash":"8c5c247bb5498e6bad35822afa8d13fa5dfe366f","modified":1672370046275},{"_id":"source/_posts/heartLight.md","hash":"943b14c8329fe0150cbeb5382fdd702f791d48b5","modified":1672370046275},{"_id":"source/_posts/image.md","hash":"b789c96630d13926c0adc536cfdf206c752d1f9e","modified":1676541207873},{"_id":"source/_posts/http.md","hash":"a9d94fba49cc5262d42e13b9891d24723707f7f6","modified":1672370046276},{"_id":"source/_posts/recode.md","hash":"c7cde907da8566e8875827ab6d6e74b962937761","modified":1676541207874},{"_id":"source/_posts/markdown.md","hash":"ebff4890a530fdea394e4536007fa215c006e653","modified":1676541207874},{"_id":"source/_posts/sass.md","hash":"9835a0f3af884e5b2d00cb9b3e49cd406abd93dd","modified":1672370046277},{"_id":"source/categories/index.md","hash":"ee94d441ec20bbe476c008aa546960cba493545d","modified":1676541207874},{"_id":"source/tags/index.md","hash":"f7a74ecb3bd832d08a05bfe3c0f6218f887b7e82","modified":1676541207874},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672370046344},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672370046311},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672370046311},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672370046337},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672370046338},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672370046338},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672370046343},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1672370046344},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1676541207884},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1676541207884},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1676541207884},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1676541207884},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1676541207884},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1676541207884},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1676541207884},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1676541207885},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1676541207884},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1676541207885},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1676541207885},{"_id":"themes/next/README.md","hash":"898213e66d34a46c3cf8446bf693bd50db0d3269","modified":1676541207885},{"_id":"themes/next/_config.yml","hash":"5f8d4a3a39840c81788b220a3892c0e2241ca0ee","modified":1676541207885},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1676541207885},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1676541207885},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1676541207891},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1676541207884},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1676541207884},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1676541207884},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1672370046299},{"_id":"themes/next/layout/_layout.swig","hash":"ab0ee88e7e8c355efdaf65d86e880588fe0bbc6c","modified":1676541207886},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1676541207891},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1676541207891},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1676541207891},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1676541207891},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1676541207891},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1676541207891},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1676541207891},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1676541207891},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1676541207891},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1676541207885},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1676541207885},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1676541207885},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1676541207885},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1676541207885},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1676541207885},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1676541207885},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1676541207886},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1676541207886},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1676541207886},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1676541207886},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1676541207886},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1676541207886},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1676541207886},{"_id":"themes/next/languages/zh-Hans.yml","hash":"59d2797006b96f11b6b04b8e54ad87488e32b892","modified":1676541207886},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1676541207886},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1676541207915},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1676541207915},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1676541207915},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1676541207886},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1676541207886},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1676541207886},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1676541207886},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1676541207886},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1676541207887},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1676541207886},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1676541207887},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1676541207887},{"_id":"themes/next/layout/_partials/head.swig","hash":"b381a5b4deb7254542f536a62604be8eeb8210e1","modified":1676541207887},{"_id":"themes/next/layout/_partials/footer.swig","hash":"ff1122d21a6b7f0a95c70c5c44c28b12ef4d20a6","modified":1676541207887},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1676541207887},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1676541207887},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1676541207887},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1676541207887},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1676541207888},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1676541207888},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1676541207888},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1676541207890},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1676541207890},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1676541207890},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1676541207890},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1676541207890},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1676541207890},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1676541207890},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1676541207891},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1676541207892},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1676541207892},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1676541207892},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1676541207892},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1676541207892},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1676541207892},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1676541207892},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1676541207892},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1676541207900},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1676541207900},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1672370046345},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1672370046345},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1676541207900},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1676541207900},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1676541207900},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1676541207901},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1676541207901},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1676541207901},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1676541207901},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1672370046347},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1672370046347},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1676541207901},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1676541207901},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1676541207901},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1672370046347},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1672370046347},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1672370046348},{"_id":"themes/next/source/uploads/avatar.jpg","hash":"99a15c555554a2276a2dc008740391feefdd699c","modified":1672370046383},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1676541207887},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1676541207887},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1676541207887},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1676541207887},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1676541207887},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1676541207887},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1676541207887},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1676541207888},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1676541207888},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1676541207888},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1676541207888},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1676541207888},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1676541207888},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1676541207888},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1676541207888},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1676541207888},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1676541207889},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1676541207888},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1676541207889},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1676541207889},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1676541207889},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1676541207889},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1676541207889},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1676541207889},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1676541207889},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1676541207889},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1676541207889},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1676541207889},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1676541207889},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1676541207889},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1676541207889},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1676541207889},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1676541207890},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1676541207890},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1676541207890},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1676541207890},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1676541207897},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1676541207889},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1676541207890},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"48c89274470271d6737f84518a187b8046ba8ddd","modified":1676541207897},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1676541207898},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1676541207898},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1676541207900},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1676541207900},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1676541207900},{"_id":"themes/next/source/css/_variables/base.styl","hash":"5308bac49008bb785c1caf53b5665f6e52b66452","modified":1676541207900},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1676541207902},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1676541207902},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1676541207902},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1676541207902},{"_id":"themes/next/source/js/src/fireworks.js","hash":"9d33d5b5ca33641facaabba0507c9d0eaa5802f0","modified":1676541207902},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1676541207902},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1676541207902},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1676541207902},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1676541207902},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1676541207902},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1676541207903},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1676541207902},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1672370046355},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1672370046357},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1676541207905},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1676541207907},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1676541207907},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1676541207907},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1676541207907},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1676541207907},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1676541207907},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1676541207907},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1676541207907},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1676541207907},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1676541207910},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1676541207910},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1676541207910},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1676541207910},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1676541207910},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1676541207910},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1676541207910},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1676541207911},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1676541207911},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1676541207911},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1672370046375},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1672370046375},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1672370046375},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1672370046375},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1672370046376},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1672370046376},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1672370046375},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1672370046376},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1672370046376},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1672370046376},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1672370046376},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1672370046377},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1676541207912},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1672370046374},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1676541207912},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1676541207912},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1676541207912},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1676541207914},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1676541207914},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1676541207914},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1676541207914},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1676541207915},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1676541207890},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1676541207890},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1676541207892},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1676541207892},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1676541207892},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1676541207892},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1676541207892},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1676541207895},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1676541207897},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1676541207897},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1676541207897},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1676541207897},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1676541207897},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1676541207897},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1676541207897},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1676541207898},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1676541207898},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1676541207898},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1676541207898},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1676541207898},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1676541207898},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1676541207898},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1676541207898},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1676541207899},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1676541207899},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1676541207899},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1676541207899},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1676541207899},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1676541207899},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1676541207899},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1676541207899},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1676541207899},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1676541207899},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1676541207902},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1676541207903},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1676541207904},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1676541207904},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1672370046358},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1672370046358},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1672370046359},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1672370046359},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1672370046359},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1672370046359},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1676541207906},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1676541207906},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1676541207906},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1676541207907},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1672370046362},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1676541207908},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1676541207899},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1676541207908},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1676541207908},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1676541207913},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1676541207913},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1676541207893},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"f758632d6a0a2ab60b458cd87466945dac9a1aea","modified":1676541207893},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1676541207893},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1676541207893},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1676541207893},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1676541207893},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1676541207893},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1676541207893},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1676541207893},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1676541207893},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1676541207893},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1676541207893},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1676541207895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1676541207895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1676541207895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1676541207895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1676541207895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1676541207895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1676541207895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1676541207895},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1676541207895},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1676541207895},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1676541207894},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1676541207895},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1676541207895},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1676541207895},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1676541207896},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1676541207896},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1676541207896},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1676541207896},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1676541207896},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1676541207896},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1676541207896},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1676541207896},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1676541207896},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1676541207896},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1676541207896},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1676541207896},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1676541207896},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1676541207896},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1676541207897},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1676541207897},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1676541207897},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1676541207897},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1676541207897},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1676541207898},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1676541207899},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1676541207899},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1672370046352},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1672370046353},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1672370046352},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1672370046353},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1672370046353},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1676541207906},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1676541207906},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1676541207906},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1676541207906},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1672370046359},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1676541207906},{"_id":"themes/next/source/images/weixin.jpg","hash":"f5aab4e7a7d617bd96ba80d9f3bb6be8746f3865","modified":1672370046349},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1676541207910},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1676541207904},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1672370046370},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1672370046370},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1672370046365},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1672370046367},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1672370046370},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1676541207914},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1676541207905},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1676541207909},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1676541207913},{"_id":"public/categories/index.html","hash":"abc69885b5e9498d96da74bf14f7613c334e159b","modified":1679391072999},{"_id":"public/tags/index.html","hash":"e8e5aba29f74646287d65ecf5cb9cd18f5c17ffa","modified":1679391072999},{"_id":"public/archives/2022/09/index.html","hash":"cb6fc3420cc5a322afe919345f8ab23562c9472d","modified":1679391072999},{"_id":"public/tags/总结/index.html","hash":"75512fbf707ab6d207f4a5be9b366cf20c0d7c34","modified":1679391072999},{"_id":"public/tags/markdown/index.html","hash":"48c517a01c6033aeb857bb0cc02898b3c388fec4","modified":1679391072999},{"_id":"public/2022/12/13/heartLight/index.html","hash":"541293b94a78e783ecae823ad944e134d915df15","modified":1679391072999},{"_id":"public/2022/12/12/JavaScirpt/index.html","hash":"ce49f93f8d53b0afda81756e6095a24c56a2b024","modified":1679391072999},{"_id":"public/2022/12/12/recode/index.html","hash":"29a19ce6f108a069c99153e2f7e02ea72cfa9248","modified":1679391072999},{"_id":"public/2022/12/12/sass/index.html","hash":"3836f206bc8c1976b723dd4a585d32b661f20315","modified":1679391072999},{"_id":"public/2022/12/04/browser/index.html","hash":"827b96eea90570def53c73bc2d70391f1ee1bbe1","modified":1679391072999},{"_id":"public/2022/12/04/http/index.html","hash":"e05cd494f0a303dc3ad6302fb41bc03e62731fa3","modified":1679391072999},{"_id":"public/2022/12/01/image/index.html","hash":"e9fb252f97a65ccc8e2ff5acc8e0b49d5a857aad","modified":1679391072999},{"_id":"public/2022/09/01/markdown/index.html","hash":"04eb10a2fb1f0393d928fb50f836a2dd89d44b77","modified":1679391072999},{"_id":"public/categories/前端/index.html","hash":"9aaf5c2968bea94bb268e9c3ca57340b9f9d1795","modified":1679391130780},{"_id":"public/archives/index.html","hash":"6aeb859a54ef7005894a6aaff5805aac89eadfa8","modified":1679391130780},{"_id":"public/archives/2022/index.html","hash":"adc706308f55487a318a123e019cfcf73000fda5","modified":1679391072999},{"_id":"public/archives/2022/12/index.html","hash":"0a5735e8efd22838af36f071157a123ae1f2a0a9","modified":1679391072999},{"_id":"public/index.html","hash":"352a6e4a8de675e945df4bc43721eb1dd77a192c","modified":1679391130780},{"_id":"public/tags/学习/index.html","hash":"b441b5ee906cfade5bc7bb68e272340ef0490890","modified":1679391072999},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1676541560844},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1672371690322},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1676541560844},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1676541560844},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1676541560844},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1672371690322},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1676541560844},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1676541560844},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1676541560844},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1676541560844},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1672371690322},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1672371690322},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1676541560844},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1672371690322},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1676541560844},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1676541560844},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1672371690322},{"_id":"public/uploads/avatar.jpg","hash":"99a15c555554a2276a2dc008740391feefdd699c","modified":1672371690322},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1676541560844},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1676541560844},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1672371690322},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1672371690322},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1672371690322},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1672371690322},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1672371690322},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1672371690322},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1672371690322},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1676541560844},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1672371690322},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1672371690322},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1672371690322},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1672371690322},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1672371690322},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1672371690322},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1672371690322},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1672371690322},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1672371690322},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1672371690322},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1672371690322},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1672371690322},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1672371690322},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1672371690322},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1672371690322},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1672371690322},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1672371690322},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/package.json","hash":"0d1c0f7205aa43ec73b60cf93fcf74e09b5392ed","modified":1676541560844},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1672371690322},{"_id":"public/images/weixin.jpg","hash":"f5aab4e7a7d617bd96ba80d9f3bb6be8746f3865","modified":1672371690322},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1672371690322},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1672371690322},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1672371690322},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1672371690322},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1672371690322},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1672371690322},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1672371690322},{"_id":"public/js/src/fireworks.js","hash":"9d33d5b5ca33641facaabba0507c9d0eaa5802f0","modified":1672371690322},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1672371690322},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1672371690322},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1672371690322},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1672371690322},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1672371690322},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1672371690322},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1672371690322},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1672371690322},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1672371690322},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1672371690322},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1672371690322},{"_id":"public/lib/fastclick/README.html","hash":"c88ed76304392b9e77b266fcbbc05f443c5df133","modified":1672371690322},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1672371690322},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"bc6cf8951a99074bdc6ec9172f03fb7c0e412729","modified":1672371690322},{"_id":"public/lib/jquery_lazyload/README.html","hash":"96a5c2cc00de5b338ae972c1e8de879d2d919608","modified":1672371690322},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1672371690322},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1672371690322},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1672371690322},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1672371690322},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1672371690322},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1672371690322},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1672371690322},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1672371690322},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1672371690322},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1672371690322},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1672371690322},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1672371690322},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1672371690322},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1672371690322},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1672371690322},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1672371690322},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1672371690322},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1672371690322},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1672371690322},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1672371690322},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1672371690322},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1672371690322},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1672371690322},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1672371690322},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1672371690322},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1672371690322},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1672371690322},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1672371690322},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1672371690322},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1672371690322},{"_id":"public/css/main.css","hash":"8a3ce24aecc68e3bc25b5b338ff48e5b5c183569","modified":1676541560844},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1672371690322},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1672371690322},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1672371690322},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1672371690322},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1672371690322},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1672371690322},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1672371690322},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1672371690322},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1672371690322},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1672371690322},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1672371690322},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1672371690322},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1672371690322},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1672371690322},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1672371690322},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1672371690322},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1672371690322},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1672371690322},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1672371690322},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1672371690322},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1672371690322},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1672371690322},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1672371690322},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1672371690322},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1672371690322},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1672371690322},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1676541560844},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1672371690322},{"_id":"source/_posts/2022总结.md","hash":"7b9aab5524809b95a2d9bea3c745acb164b29f74","modified":1676541654490},{"_id":"public/categories/生活/index.html","hash":"7da69f9f61efe966643f750f6210feb85631f36a","modified":1679391072999},{"_id":"public/2022/12/30/2022总结/index.html","hash":"75cb1d797da051057324ebf3ad2dd8357e770dbd","modified":1679391072999},{"_id":"source/.DS_Store","hash":"b41c4089191a7c0ce71cf2543b14cedb6d412153","modified":1678354246656},{"_id":"source/_posts/状态管理-redux.md","hash":"d8d21b3c06bf22777bb2469b92839a17932828ef","modified":1678160304939},{"_id":"public/archives/2023/03/index.html","hash":"830412869ea3aa3da713291c0da1953e029f0a91","modified":1679391130780},{"_id":"public/archives/2023/index.html","hash":"36e461fa0484a342f8dfb44953664cd6c2726ae0","modified":1679391130780},{"_id":"public/2023/03/07/状态管理-redux/index.html","hash":"d32369b98d757afa7d2c8339237d3c98b54b1830","modified":1679391072999},{"_id":"source/_posts/我记得.md","hash":"51e4b1e7cc90b8db6de069c488205957be42da40","modified":1678355049828},{"_id":"public/archives/page/2/index.html","hash":"9e404fc39b48983f4eff10b6ba89d0e0f2ac09b7","modified":1679391072999},{"_id":"public/2023/03/09/我记得/index.html","hash":"f6ce62949a2cd646caaec9179118160422cb8b13","modified":1679391072999},{"_id":"public/page/2/index.html","hash":"b96970e1840d492e5c165c1bb12b8a46d24d47b9","modified":1679391072999},{"_id":"public/tags/音乐/index.html","hash":"048cf46bd1046f7647b7cd933eb99d7d961af864","modified":1679391072999},{"_id":"source/_posts/js函数继承.md","hash":"6ffae88e5a159d1f946f721560af84d4ef314da4","modified":1678676713680},{"_id":"public/2023/03/13/js函数继承/index.html","hash":"62de88cb1dad9759f71a98010b6d4d9750d61c51","modified":1679391130780},{"_id":"source/_posts/服务器部署.md","hash":"7dc57c2e0031b1f607f61eed842dfa9ef7f00f5c","modified":1679391126921},{"_id":"public/categories/前端/page/2/index.html","hash":"309aeb7f41c8a6a9df5fef8ca183daa70f4c7e8f","modified":1679391072999},{"_id":"public/2023/03/21/服务器部署/index.html","hash":"5a56275486c4c3ce92cd4a1dc111ba06a04f17e8","modified":1679391130780},{"_id":"public/tags/服务器/index.html","hash":"9b1b06215ab5670d12eb0c239db626645ea76bcb","modified":1679391130780}],"Category":[{"name":"前端","_id":"clc9yxb8q000450utanes4tux"},{"name":"生活","_id":"clc9z2v3t0001qgut6ybi85eg"}],"Data":[],"Page":[{"title":"categories","date":"2022-08-31T02:17:06.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-08-31 10:17:06\ntype: \"categories\"\n---\n","updated":"2023-02-16T09:53:27.874Z","path":"categories/index.html","_id":"clc9yxb8k000050utgkmme6wj","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-08-31T02:12:56.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-08-31 10:12:56\ntype: \"tags\"\n---\n","updated":"2023-02-16T09:53:27.874Z","path":"tags/index.html","_id":"clc9yxb8o000250ut7aywc911","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"浏览器","date":"2022-12-04T02:36:15.000Z","top":997,"typora-copy-images-to":"upload","_content":"\n### 浏览器的本地储存\n\n浏览器的本地储存主要分为Cookie、localStorage、sessionStorage和IndexedDB\n\n<!--more-->\n\n#### Cookie\n\nCookie最开始标识用来做本地存储的，是为了弥补HTTP在状态管理上的不足。Cookie本质是浏览器上存储的一个小文件，在内部以键值对的方式来储存，在同一个域名下发送请求，都会携带相同的Cookie。服务器拿到Cookie进行解析便能字段客户端的状态\n\n**Cookie的缺陷：**\n\n- 容量缺陷，Cookie只能储存4kb的文件，信息量非常的少\n- 性能缺陷，Cookie紧跟着域名，不管域名下的某一个地址需不需要Cookie，请求都会带上这个Cookie。这样就造成了很大的性能浪费\n- 安全缺陷，由于Cookie和服务端都是以文本的形式进行交互，很容易被非法用户截获并加以修改\n\n#### localStorage\n\nlocalStorage和Cookie有点相似，都是针对同一个域名，会储存相同的一段信息\n\n**localStorage相比Cookie的区别：**\n\n- 容量，localStorage的容量上限为5M\n- localStorage的信息只存储在客户端，默认不参与和服务端的通信\n- 接口封装，通过localStorage暴露在全局，通过它的setItem和getItem等方法进行操作，非常的方便\n\n**使用方法**\n\n```javascript\nlet obj = { name: \"sanyuan\", age: 18 };\nlocalStorage.setItem(\"name\", \"sanyuan\"); \nlocalStorage.setItem(\"info\", JSON.stringify(obj));\n//取值\nlet name = localStorage.getItem(\"name\");\nlet info = JSON.parse(localStorage.getItem(\"info\"));\n//localStorage存储的都是字符串，如果想要存储对象的话需要使用JSON的stringify方法处理，然后再利用JSON的parse方法解析成对象。\n```\n\n**应用场景**\n\n利用localStorage的较大容量和持久特性，可以利用localStorage存储一些内容稳定的资源**。**\n\nlocalStorage和Cookie有点相似，都是针对同一个域名，会储存相同的一段信息\n\n#### sessionStorage\n\nsessionStorage基本和localStorage基本一致，只有一个最本质的区别，sessionStorage知识会话级的储存，并不是持久化存储。会话结束，也就是页面关闭sessionStorage的信息就会消失\n\n**应用场景**\n\n- 可以用来对表单信息进行维护，将表单的信息存储在里面，可以让页面刷新之后也不会让之前的表单信息消失\n- 可以用来存储本次浏览记录\n\nsessionStorage基本和localStorage基本一致，只有一个最本质的区别，sessionStorage知识会话级的储存，并不是持久化存储。会话结束，也就是页面关闭sessionStorage的信息就会消失\n\n#### IndexedDB\n\nIndexedDB是运行在浏览器中的非关系数据库，本质上数据库，存储容量没有上限。IndexedDB除了拥有数据库本身的一些特性，如支持事务和存储二进制还有一些其他的特性\n\n**额外特性：**\n\n- 键值对存储，内部采用对象仓库存放数据\n- 异步操作，数据库的读写数据I/O操作，浏览器中对异步I/O提供了支持\n- 受同源策略限制，无法访问跨域的数据库\n\n### 浏览器的请求过程\n\n当你在浏览器地址栏输入了`https://www.baidu.com/`\n\n#### 构建请求行\n\n浏览器会自动构建好请求行\n\n```javascript\nGET / HTTP/1.1\n```\n\n#### 查找强缓存\n\n先查看浏览器有没有强缓存，有的话就直接使用浏览器缓存中的资源。没有则继续进行请求\n\n#### DNS解析\n\n因为一开始输入的是域名，所以我们要得到域名对应的IP地址。这个过程就是DNS解析。浏览器提供了DNS数据缓存功能\n\n如果一个域名解析过了，第二次就会直接调用缓存。如果没有指定的端口，默认采用80端口\n\n#### 建立TCP连接\n\nTCP是一种面向连接的、可靠的、基于字节流的传输层通信协议\n\n注意Chrome在同一个域名下要求最多只能有6个TCP连接，超过6个的话就需要等待\n\n**建立TCP经历了下面三个阶段：**\n\n**三次握手建立连接**\n\n刚开始客户端处于Closed的状态，服务端处于Listen状态\n\n第一次握手：客户端给服务端发一个SYN报文，并指明客户端的初始化序列号ISN。此时客户端处于SYN_SEND状态\n\n第二次握手：服务器收到客户端的SYN报文之后，会以自己的SYN报文作文应答，并且也是指定了自己的初始化序列号ISN(s)。同时会把客户端的ISN+1作为ACK的值，表示自己已经收到了客户端的SYN，此时服务器处于SYN_REVD的状态\n\n第三次握手：客户端收到SYN报文之后，会发送一个ACK报文，也是把ISN+1作为ACK的值，表示已经收到了服务端的SYN报文，此时客户端处于EASTABLISHED的状态。服务器收到ACK报文后，也处于EASTABLISHED状态。此时，双方已建立起了连接\n\n**数据传输**\n\n发送方发一个数据包，接受方接受到数据包之后必须要向发送发确认，如果发送方没有收到这个确认消息，就判定为数据包丢失，并重新发该数据包。把大的数据包拆成小的数据包传输可以提高效率\n\n#### 四次挥手断开连接\n\n刚开始客户端和服务端都处于EASTABLISHED状态客户端和服务端均可主动发起挥手动作\n\n第一次挥手：客户端发送一个FIN报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态\n\n第二次挥手：服务端收到FIN之后，会发送ACK报文，且把客户端的序列号值+1作为ACk报文的序列值，表明已经收到客户端的报文了，此时服务端处于CLOSE_WAIT状态\n\n第三次挥手：如果服务端也想断开连接了，和客户端的第一次握手一样，发给FIN报文，并且指定一个序列号。此时服务端处于LAST_ACK的状态\n\n第四次挥手：客户端收到FIN之后，一样发送一个ACK报文作为应答，且把服务端的序列号值+1作为自己ACK报文的序列值，此时客户端处于TIME_WAIT状态。需要过一段时间确保服务器收到自己的ACK报文后才会进入CLOSED状态。服务端收到ACK报文后处于CLOSED状态\n\n#### 发送HTTP请求（如果请求头或者响应头中包含Connection: Keep-Alive表示建立了持久连接，tcp连接会一直保持）\n\nTCP连接建立好，浏览器就可以和服务器开始通信，浏览器HTTP请求需要携带三个东西：请求行（第一步的时候浏览器创建好了）、请求头和请求体（只有再POST方法下存在）\n\n**网络响应**\n\nHTTP请求到达服务器，服务器进行对应的处理。最后要把数据传给浏览器，也就是返回网络响应。网络响应包括三个部分：响应行、响应头和响应体\n\n响应行，HTTP/1.1 200 OK由HTTP协议、状态码和状态描述组成\n\n响应头，响应头包含了服务器及其返回数据的一些信息、服务器生成数据的时间、返回的数据类型以及对即将写入的Cookie信息\n\n响应体，服务端传给客户端的数据\n\n### 构建渲染树过程\n\n#### 构建DOM树\n\n由于浏览器无法直接理解HTML字符串，因此将这一系列字节流转换成一种有意义并且方便操作的数据结构，这种结构就是DOM树，也可以理解为一个以document为根节点的多叉树\n\n常规的编程语言都是上下文无关的，而HTML却相反。所以HTML不能使用常规编程语言的解析器来完成\n\n**标记化算法**\n\n标记化算法输入为HTML文本，输出为HTML标记，成为标记生成器。这个是通过有限自动状态机来完成的，既在当前状态下，接受一个或多个字符，就会更新到下一个状态。下面是一个简单的标记化过程的示例\n\n遇到<，状态为标记打开状态\n\n遇到[a-z]的字符，会进入标记名称状态\n\n遇到\\>，表示标记名称记录完成，这时候变为数据状态\n\n在遇到<，表示数据记录完成，状态又变成标记打开状态\n\n紧接着遇到下一个/后，会创建一个end tag的token，进入到标记名称状态\n\n遇到\\>，回到数据状态\n\n**建树算法**\n\n标记生成器会把每个标记的信息发送给建树器。建树器接受到相应的标记时，会创建相应的DOM对象。然后将DOM对象加入DOM树中然后将对应标记压入存放元素的栈中。下面是建树的实例\n\n首先是初始状态\n\n接受到标记生成器传来的html标签，这个时候状态变成before html状态。同时创建一个HTMLHtmlElement的DOM元素，将其加到document根对象上，并进行压栈操作\n\n接着状态自动变为before head，此时从标记生成器那边传来body，表示并没有head，这时候建树器会自动创建一个HTMLHeadElement并将其加入到Dom树中\n\n接着进入大in head状态，然后直接跳到after head状态\n\n接着标记生成器传来了body标记，创建HTMLBodyElement，插入到DOM树中，同时压入开放标记栈。状态变为in body\n\n然后接受后面的一系列字符：hello world，接受第一个时会先创建一个text节点并把Text节点插入搭配DOM树中body元素的下面\n\n现在标记生成器传来body的接受标记，进入after body状态\n\n标记生成器在传一个html的接受标记，进入搭配after after body状态，解析过程到此结束\n\n#### 样式计算\n\n**样式来源**\n\n主要有以下三种，link标签引用、style标签中的样式和元素的内嵌style属性\n\n**格式化样式表**\n\n首先浏览器是无法识别css样式文件的，渲染引擎接收到css文本之后第一件事就是将其转化为一个结构化的对象，即styleSheets。浏览器控制台能通过document.styleSheets来查看这个最终的结构\n\n**标准化样式属性**\n\n有一些css样式的数值不能被浏览器所理解，因为要在计算样式之前将他们都标准化，如em ->px等\n\n**计算每个节点的具体样式**\n\n继承：每个子节点都会默认继承父节点的样式属性，如果父节点中没有找到，就会采用浏览器默认样式，也叫UserAgent样式\n\n层叠：css最大的特点在于它的层叠性，也就是最终的样式取决于各个属性共同作用的效果。在计算样式之后，所有的样式都会被挂在window.getComputedStyle当中，可以通过js来获取计算后的样式\n\n#### 生成布局树\n\n拿到生成好了的DOM树和DOM样式后，首先会对DOM树进行遍历，并添加到布局树中。然后浏览器的布局系统会根据DOM样式来确定元素的位置，最后生成一颗布局树\n\n### 浏览器渲染过程\n\n浏览器渲染过程有以下几个步骤\n\n#### 建立图层树\n\n**显示合成**\n\n使用层叠上下文的节点，层叠上下文是有一些特定的CSS属性创建的，一般有以下情况：\n\nHTML元素本身就具有层叠上下文\n\n普通元素设置**position不为static**并且**设置了z-index属性**，会产生层叠上下文\n\n元素的 **opacity** 值不是 1\n\n元素的 **transform** 值不是 none\n\n元素的 **filter** 值不是 none\n\n元素的 **isolation** 值是isolate\n\nwill-change指定的属性值为上面任意一个。(will-change的作用后面会详细介绍)\n\n还有需要裁剪的地方，比如一个div，里面的内容超出了出现滚动条，那么滚动条会被单独提升为一个图层\n\n**隐式合成**\n\n隐式合成就是层叠等级低的节点被提升为单独的图层之后，那么所有层叠登记比它高的节点都会成为一个单独的图层。隐式合成存在巨大的风险，当一个大型应用中，z-index比较低的元素被提升为单独的图层之后，层叠在它上面的元素都会被提升为单独的图层，可能会增加上千个图层，大大增加内存的压力，甚至让页面崩溃\n\n#### 生成绘制列表\n\n渲染引擎会将图层的绘制拆分成一个个绘制指令，比如先画背景再描绘边框，然后将这些指令俺顺序组合成一个待绘制列表，相当于给后面的绘制操作做了一波计划\n\n#### 生成图块并栅格化\n\n开始绘制的过程实际上是有专门的线程来完成的，这个线程叫做合成线程。考虑到页面非常大的时候，要滑很长时间才能滑到底，如果要一口气全部绘制出来是相当浪费性能的。因此合成线程要做的第一件事就是将图层分块。每一个图层块通常是256*256或则512*512大小的\n\n因为图块数据是要进入GPU内存的，为了提高性能，Chrome在首次合成图块时会采用一个分辨率低的图片，这样展示的时候只是展示出低分辨率的图片，这个时候继续进行合成操作，当正常的土块内容绘制完毕后，会将当前低分辨率的图块内容替换\n\n#### 显示器显示内容\n\n当栅格化完成后，合成线程会生成一个绘制命令‘DrawQuad’并发送给浏览器\n\n浏览器进程中的viz组件接受到这个命令，然后把页面内容发送到内存。然后发送到显卡\n\n**显示器显示原理**\n\n显示器都有一个固定的刷新频率，一般是60HZ，也就是一秒更新60张照片，每次更新的图片都是来自显卡的前缓冲区。显卡在接受到浏览器传来的页面后，会合成响应的图像，然后放入后缓冲区，然后系统自动将前缓冲区和后缓冲区对换位置，一直循环更新\n\n### 重绘和回流（**避免频繁使用style，采用class的方式可以减少回流**）\n\n#### 回流\n\n回流又叫重排会重新生成DOM树\n\n**触发条件**\n\n简单来说，当我们对DOM结构的修改引发DOM几何尺寸变化的时候，会发生回流的过程\n\n一个DOM元素的几何属性变化，常见的几何属性有width、height、padding、margin、left、top、border\n\n使DOM节点发生增减或则移动\n\n读写offset、sroll和client属性的时候，浏览器为了获取这些值，需要进行回流操作\n\n调用window.getComputedStyle方法\n\n#### 重绘\n\n重绘直接刷新页面 ，不会重新生成DOM树\n\n**触发条件**\n\n当DOM的修改导致样式的变化，并且没有影响几何属性的时候，会导致重绘\n\n### 合成\n\n合成也叫GPU加速，CSS3的transform、opacity、filter可以实现合成的效果。在合成的情况下，会直接跳过布局和绘制流程，直接进入非主线程处理的部分，直接交给合成线程处理\n\n**好处**\n\n能偶发挥GPU的优势。合成线程生成位图的过程中会调用线程池，并在其中使用GPU进行加速生成，而GPU是擅长处理位图数据的\n\n没有占用主线程的资源，即使主线程卡住了没效果依然能够流畅的展示","source":"_posts/browser.md","raw":"---\ntitle: 浏览器\ndate: 2022-12-4 10:36:15\ntags: 学习\ncategories: 前端\ntop: 997\ntypora-copy-images-to: upload\n---\n\n### 浏览器的本地储存\n\n浏览器的本地储存主要分为Cookie、localStorage、sessionStorage和IndexedDB\n\n<!--more-->\n\n#### Cookie\n\nCookie最开始标识用来做本地存储的，是为了弥补HTTP在状态管理上的不足。Cookie本质是浏览器上存储的一个小文件，在内部以键值对的方式来储存，在同一个域名下发送请求，都会携带相同的Cookie。服务器拿到Cookie进行解析便能字段客户端的状态\n\n**Cookie的缺陷：**\n\n- 容量缺陷，Cookie只能储存4kb的文件，信息量非常的少\n- 性能缺陷，Cookie紧跟着域名，不管域名下的某一个地址需不需要Cookie，请求都会带上这个Cookie。这样就造成了很大的性能浪费\n- 安全缺陷，由于Cookie和服务端都是以文本的形式进行交互，很容易被非法用户截获并加以修改\n\n#### localStorage\n\nlocalStorage和Cookie有点相似，都是针对同一个域名，会储存相同的一段信息\n\n**localStorage相比Cookie的区别：**\n\n- 容量，localStorage的容量上限为5M\n- localStorage的信息只存储在客户端，默认不参与和服务端的通信\n- 接口封装，通过localStorage暴露在全局，通过它的setItem和getItem等方法进行操作，非常的方便\n\n**使用方法**\n\n```javascript\nlet obj = { name: \"sanyuan\", age: 18 };\nlocalStorage.setItem(\"name\", \"sanyuan\"); \nlocalStorage.setItem(\"info\", JSON.stringify(obj));\n//取值\nlet name = localStorage.getItem(\"name\");\nlet info = JSON.parse(localStorage.getItem(\"info\"));\n//localStorage存储的都是字符串，如果想要存储对象的话需要使用JSON的stringify方法处理，然后再利用JSON的parse方法解析成对象。\n```\n\n**应用场景**\n\n利用localStorage的较大容量和持久特性，可以利用localStorage存储一些内容稳定的资源**。**\n\nlocalStorage和Cookie有点相似，都是针对同一个域名，会储存相同的一段信息\n\n#### sessionStorage\n\nsessionStorage基本和localStorage基本一致，只有一个最本质的区别，sessionStorage知识会话级的储存，并不是持久化存储。会话结束，也就是页面关闭sessionStorage的信息就会消失\n\n**应用场景**\n\n- 可以用来对表单信息进行维护，将表单的信息存储在里面，可以让页面刷新之后也不会让之前的表单信息消失\n- 可以用来存储本次浏览记录\n\nsessionStorage基本和localStorage基本一致，只有一个最本质的区别，sessionStorage知识会话级的储存，并不是持久化存储。会话结束，也就是页面关闭sessionStorage的信息就会消失\n\n#### IndexedDB\n\nIndexedDB是运行在浏览器中的非关系数据库，本质上数据库，存储容量没有上限。IndexedDB除了拥有数据库本身的一些特性，如支持事务和存储二进制还有一些其他的特性\n\n**额外特性：**\n\n- 键值对存储，内部采用对象仓库存放数据\n- 异步操作，数据库的读写数据I/O操作，浏览器中对异步I/O提供了支持\n- 受同源策略限制，无法访问跨域的数据库\n\n### 浏览器的请求过程\n\n当你在浏览器地址栏输入了`https://www.baidu.com/`\n\n#### 构建请求行\n\n浏览器会自动构建好请求行\n\n```javascript\nGET / HTTP/1.1\n```\n\n#### 查找强缓存\n\n先查看浏览器有没有强缓存，有的话就直接使用浏览器缓存中的资源。没有则继续进行请求\n\n#### DNS解析\n\n因为一开始输入的是域名，所以我们要得到域名对应的IP地址。这个过程就是DNS解析。浏览器提供了DNS数据缓存功能\n\n如果一个域名解析过了，第二次就会直接调用缓存。如果没有指定的端口，默认采用80端口\n\n#### 建立TCP连接\n\nTCP是一种面向连接的、可靠的、基于字节流的传输层通信协议\n\n注意Chrome在同一个域名下要求最多只能有6个TCP连接，超过6个的话就需要等待\n\n**建立TCP经历了下面三个阶段：**\n\n**三次握手建立连接**\n\n刚开始客户端处于Closed的状态，服务端处于Listen状态\n\n第一次握手：客户端给服务端发一个SYN报文，并指明客户端的初始化序列号ISN。此时客户端处于SYN_SEND状态\n\n第二次握手：服务器收到客户端的SYN报文之后，会以自己的SYN报文作文应答，并且也是指定了自己的初始化序列号ISN(s)。同时会把客户端的ISN+1作为ACK的值，表示自己已经收到了客户端的SYN，此时服务器处于SYN_REVD的状态\n\n第三次握手：客户端收到SYN报文之后，会发送一个ACK报文，也是把ISN+1作为ACK的值，表示已经收到了服务端的SYN报文，此时客户端处于EASTABLISHED的状态。服务器收到ACK报文后，也处于EASTABLISHED状态。此时，双方已建立起了连接\n\n**数据传输**\n\n发送方发一个数据包，接受方接受到数据包之后必须要向发送发确认，如果发送方没有收到这个确认消息，就判定为数据包丢失，并重新发该数据包。把大的数据包拆成小的数据包传输可以提高效率\n\n#### 四次挥手断开连接\n\n刚开始客户端和服务端都处于EASTABLISHED状态客户端和服务端均可主动发起挥手动作\n\n第一次挥手：客户端发送一个FIN报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态\n\n第二次挥手：服务端收到FIN之后，会发送ACK报文，且把客户端的序列号值+1作为ACk报文的序列值，表明已经收到客户端的报文了，此时服务端处于CLOSE_WAIT状态\n\n第三次挥手：如果服务端也想断开连接了，和客户端的第一次握手一样，发给FIN报文，并且指定一个序列号。此时服务端处于LAST_ACK的状态\n\n第四次挥手：客户端收到FIN之后，一样发送一个ACK报文作为应答，且把服务端的序列号值+1作为自己ACK报文的序列值，此时客户端处于TIME_WAIT状态。需要过一段时间确保服务器收到自己的ACK报文后才会进入CLOSED状态。服务端收到ACK报文后处于CLOSED状态\n\n#### 发送HTTP请求（如果请求头或者响应头中包含Connection: Keep-Alive表示建立了持久连接，tcp连接会一直保持）\n\nTCP连接建立好，浏览器就可以和服务器开始通信，浏览器HTTP请求需要携带三个东西：请求行（第一步的时候浏览器创建好了）、请求头和请求体（只有再POST方法下存在）\n\n**网络响应**\n\nHTTP请求到达服务器，服务器进行对应的处理。最后要把数据传给浏览器，也就是返回网络响应。网络响应包括三个部分：响应行、响应头和响应体\n\n响应行，HTTP/1.1 200 OK由HTTP协议、状态码和状态描述组成\n\n响应头，响应头包含了服务器及其返回数据的一些信息、服务器生成数据的时间、返回的数据类型以及对即将写入的Cookie信息\n\n响应体，服务端传给客户端的数据\n\n### 构建渲染树过程\n\n#### 构建DOM树\n\n由于浏览器无法直接理解HTML字符串，因此将这一系列字节流转换成一种有意义并且方便操作的数据结构，这种结构就是DOM树，也可以理解为一个以document为根节点的多叉树\n\n常规的编程语言都是上下文无关的，而HTML却相反。所以HTML不能使用常规编程语言的解析器来完成\n\n**标记化算法**\n\n标记化算法输入为HTML文本，输出为HTML标记，成为标记生成器。这个是通过有限自动状态机来完成的，既在当前状态下，接受一个或多个字符，就会更新到下一个状态。下面是一个简单的标记化过程的示例\n\n遇到<，状态为标记打开状态\n\n遇到[a-z]的字符，会进入标记名称状态\n\n遇到\\>，表示标记名称记录完成，这时候变为数据状态\n\n在遇到<，表示数据记录完成，状态又变成标记打开状态\n\n紧接着遇到下一个/后，会创建一个end tag的token，进入到标记名称状态\n\n遇到\\>，回到数据状态\n\n**建树算法**\n\n标记生成器会把每个标记的信息发送给建树器。建树器接受到相应的标记时，会创建相应的DOM对象。然后将DOM对象加入DOM树中然后将对应标记压入存放元素的栈中。下面是建树的实例\n\n首先是初始状态\n\n接受到标记生成器传来的html标签，这个时候状态变成before html状态。同时创建一个HTMLHtmlElement的DOM元素，将其加到document根对象上，并进行压栈操作\n\n接着状态自动变为before head，此时从标记生成器那边传来body，表示并没有head，这时候建树器会自动创建一个HTMLHeadElement并将其加入到Dom树中\n\n接着进入大in head状态，然后直接跳到after head状态\n\n接着标记生成器传来了body标记，创建HTMLBodyElement，插入到DOM树中，同时压入开放标记栈。状态变为in body\n\n然后接受后面的一系列字符：hello world，接受第一个时会先创建一个text节点并把Text节点插入搭配DOM树中body元素的下面\n\n现在标记生成器传来body的接受标记，进入after body状态\n\n标记生成器在传一个html的接受标记，进入搭配after after body状态，解析过程到此结束\n\n#### 样式计算\n\n**样式来源**\n\n主要有以下三种，link标签引用、style标签中的样式和元素的内嵌style属性\n\n**格式化样式表**\n\n首先浏览器是无法识别css样式文件的，渲染引擎接收到css文本之后第一件事就是将其转化为一个结构化的对象，即styleSheets。浏览器控制台能通过document.styleSheets来查看这个最终的结构\n\n**标准化样式属性**\n\n有一些css样式的数值不能被浏览器所理解，因为要在计算样式之前将他们都标准化，如em ->px等\n\n**计算每个节点的具体样式**\n\n继承：每个子节点都会默认继承父节点的样式属性，如果父节点中没有找到，就会采用浏览器默认样式，也叫UserAgent样式\n\n层叠：css最大的特点在于它的层叠性，也就是最终的样式取决于各个属性共同作用的效果。在计算样式之后，所有的样式都会被挂在window.getComputedStyle当中，可以通过js来获取计算后的样式\n\n#### 生成布局树\n\n拿到生成好了的DOM树和DOM样式后，首先会对DOM树进行遍历，并添加到布局树中。然后浏览器的布局系统会根据DOM样式来确定元素的位置，最后生成一颗布局树\n\n### 浏览器渲染过程\n\n浏览器渲染过程有以下几个步骤\n\n#### 建立图层树\n\n**显示合成**\n\n使用层叠上下文的节点，层叠上下文是有一些特定的CSS属性创建的，一般有以下情况：\n\nHTML元素本身就具有层叠上下文\n\n普通元素设置**position不为static**并且**设置了z-index属性**，会产生层叠上下文\n\n元素的 **opacity** 值不是 1\n\n元素的 **transform** 值不是 none\n\n元素的 **filter** 值不是 none\n\n元素的 **isolation** 值是isolate\n\nwill-change指定的属性值为上面任意一个。(will-change的作用后面会详细介绍)\n\n还有需要裁剪的地方，比如一个div，里面的内容超出了出现滚动条，那么滚动条会被单独提升为一个图层\n\n**隐式合成**\n\n隐式合成就是层叠等级低的节点被提升为单独的图层之后，那么所有层叠登记比它高的节点都会成为一个单独的图层。隐式合成存在巨大的风险，当一个大型应用中，z-index比较低的元素被提升为单独的图层之后，层叠在它上面的元素都会被提升为单独的图层，可能会增加上千个图层，大大增加内存的压力，甚至让页面崩溃\n\n#### 生成绘制列表\n\n渲染引擎会将图层的绘制拆分成一个个绘制指令，比如先画背景再描绘边框，然后将这些指令俺顺序组合成一个待绘制列表，相当于给后面的绘制操作做了一波计划\n\n#### 生成图块并栅格化\n\n开始绘制的过程实际上是有专门的线程来完成的，这个线程叫做合成线程。考虑到页面非常大的时候，要滑很长时间才能滑到底，如果要一口气全部绘制出来是相当浪费性能的。因此合成线程要做的第一件事就是将图层分块。每一个图层块通常是256*256或则512*512大小的\n\n因为图块数据是要进入GPU内存的，为了提高性能，Chrome在首次合成图块时会采用一个分辨率低的图片，这样展示的时候只是展示出低分辨率的图片，这个时候继续进行合成操作，当正常的土块内容绘制完毕后，会将当前低分辨率的图块内容替换\n\n#### 显示器显示内容\n\n当栅格化完成后，合成线程会生成一个绘制命令‘DrawQuad’并发送给浏览器\n\n浏览器进程中的viz组件接受到这个命令，然后把页面内容发送到内存。然后发送到显卡\n\n**显示器显示原理**\n\n显示器都有一个固定的刷新频率，一般是60HZ，也就是一秒更新60张照片，每次更新的图片都是来自显卡的前缓冲区。显卡在接受到浏览器传来的页面后，会合成响应的图像，然后放入后缓冲区，然后系统自动将前缓冲区和后缓冲区对换位置，一直循环更新\n\n### 重绘和回流（**避免频繁使用style，采用class的方式可以减少回流**）\n\n#### 回流\n\n回流又叫重排会重新生成DOM树\n\n**触发条件**\n\n简单来说，当我们对DOM结构的修改引发DOM几何尺寸变化的时候，会发生回流的过程\n\n一个DOM元素的几何属性变化，常见的几何属性有width、height、padding、margin、left、top、border\n\n使DOM节点发生增减或则移动\n\n读写offset、sroll和client属性的时候，浏览器为了获取这些值，需要进行回流操作\n\n调用window.getComputedStyle方法\n\n#### 重绘\n\n重绘直接刷新页面 ，不会重新生成DOM树\n\n**触发条件**\n\n当DOM的修改导致样式的变化，并且没有影响几何属性的时候，会导致重绘\n\n### 合成\n\n合成也叫GPU加速，CSS3的transform、opacity、filter可以实现合成的效果。在合成的情况下，会直接跳过布局和绘制流程，直接进入非主线程处理的部分，直接交给合成线程处理\n\n**好处**\n\n能偶发挥GPU的优势。合成线程生成位图的过程中会调用线程池，并在其中使用GPU进行加速生成，而GPU是擅长处理位图数据的\n\n没有占用主线程的资源，即使主线程卡住了没效果依然能够流畅的展示","slug":"browser","published":1,"updated":"2022-12-30T03:14:06.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc9yxb8m000150utfz173lzm","content":"<h3 id=\"浏览器的本地储存\"><a href=\"#浏览器的本地储存\" class=\"headerlink\" title=\"浏览器的本地储存\"></a>浏览器的本地储存</h3><p>浏览器的本地储存主要分为Cookie、localStorage、sessionStorage和IndexedDB</p>\n<span id=\"more\"></span>\n\n<h4 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><p>Cookie最开始标识用来做本地存储的，是为了弥补HTTP在状态管理上的不足。Cookie本质是浏览器上存储的一个小文件，在内部以键值对的方式来储存，在同一个域名下发送请求，都会携带相同的Cookie。服务器拿到Cookie进行解析便能字段客户端的状态</p>\n<p><strong>Cookie的缺陷：</strong></p>\n<ul>\n<li>容量缺陷，Cookie只能储存4kb的文件，信息量非常的少</li>\n<li>性能缺陷，Cookie紧跟着域名，不管域名下的某一个地址需不需要Cookie，请求都会带上这个Cookie。这样就造成了很大的性能浪费</li>\n<li>安全缺陷，由于Cookie和服务端都是以文本的形式进行交互，很容易被非法用户截获并加以修改</li>\n</ul>\n<h4 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h4><p>localStorage和Cookie有点相似，都是针对同一个域名，会储存相同的一段信息</p>\n<p><strong>localStorage相比Cookie的区别：</strong></p>\n<ul>\n<li>容量，localStorage的容量上限为5M</li>\n<li>localStorage的信息只存储在客户端，默认不参与和服务端的通信</li>\n<li>接口封装，通过localStorage暴露在全局，通过它的setItem和getItem等方法进行操作，非常的方便</li>\n</ul>\n<p><strong>使用方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;sanyuan&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;;</span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;sanyuan&quot;</span>); </span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;info&quot;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj));</span><br><span class=\"line\"><span class=\"comment\">//取值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> info = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;info&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//localStorage存储的都是字符串，如果想要存储对象的话需要使用JSON的stringify方法处理，然后再利用JSON的parse方法解析成对象。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>应用场景</strong></p>\n<p>利用localStorage的较大容量和持久特性，可以利用localStorage存储一些内容稳定的资源<strong>。</strong></p>\n<p>localStorage和Cookie有点相似，都是针对同一个域名，会储存相同的一段信息</p>\n<h4 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h4><p>sessionStorage基本和localStorage基本一致，只有一个最本质的区别，sessionStorage知识会话级的储存，并不是持久化存储。会话结束，也就是页面关闭sessionStorage的信息就会消失</p>\n<p><strong>应用场景</strong></p>\n<ul>\n<li>可以用来对表单信息进行维护，将表单的信息存储在里面，可以让页面刷新之后也不会让之前的表单信息消失</li>\n<li>可以用来存储本次浏览记录</li>\n</ul>\n<p>sessionStorage基本和localStorage基本一致，只有一个最本质的区别，sessionStorage知识会话级的储存，并不是持久化存储。会话结束，也就是页面关闭sessionStorage的信息就会消失</p>\n<h4 id=\"IndexedDB\"><a href=\"#IndexedDB\" class=\"headerlink\" title=\"IndexedDB\"></a>IndexedDB</h4><p>IndexedDB是运行在浏览器中的非关系数据库，本质上数据库，存储容量没有上限。IndexedDB除了拥有数据库本身的一些特性，如支持事务和存储二进制还有一些其他的特性</p>\n<p><strong>额外特性：</strong></p>\n<ul>\n<li>键值对存储，内部采用对象仓库存放数据</li>\n<li>异步操作，数据库的读写数据I/O操作，浏览器中对异步I/O提供了支持</li>\n<li>受同源策略限制，无法访问跨域的数据库</li>\n</ul>\n<h3 id=\"浏览器的请求过程\"><a href=\"#浏览器的请求过程\" class=\"headerlink\" title=\"浏览器的请求过程\"></a>浏览器的请求过程</h3><p>当你在浏览器地址栏输入了<code>https://www.baidu.com/</code></p>\n<h4 id=\"构建请求行\"><a href=\"#构建请求行\" class=\"headerlink\" title=\"构建请求行\"></a>构建请求行</h4><p>浏览器会自动构建好请求行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">GET</span> / <span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查找强缓存\"><a href=\"#查找强缓存\" class=\"headerlink\" title=\"查找强缓存\"></a>查找强缓存</h4><p>先查看浏览器有没有强缓存，有的话就直接使用浏览器缓存中的资源。没有则继续进行请求</p>\n<h4 id=\"DNS解析\"><a href=\"#DNS解析\" class=\"headerlink\" title=\"DNS解析\"></a>DNS解析</h4><p>因为一开始输入的是域名，所以我们要得到域名对应的IP地址。这个过程就是DNS解析。浏览器提供了DNS数据缓存功能</p>\n<p>如果一个域名解析过了，第二次就会直接调用缓存。如果没有指定的端口，默认采用80端口</p>\n<h4 id=\"建立TCP连接\"><a href=\"#建立TCP连接\" class=\"headerlink\" title=\"建立TCP连接\"></a>建立TCP连接</h4><p>TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议</p>\n<p>注意Chrome在同一个域名下要求最多只能有6个TCP连接，超过6个的话就需要等待</p>\n<p><strong>建立TCP经历了下面三个阶段：</strong></p>\n<p><strong>三次握手建立连接</strong></p>\n<p>刚开始客户端处于Closed的状态，服务端处于Listen状态</p>\n<p>第一次握手：客户端给服务端发一个SYN报文，并指明客户端的初始化序列号ISN。此时客户端处于SYN_SEND状态</p>\n<p>第二次握手：服务器收到客户端的SYN报文之后，会以自己的SYN报文作文应答，并且也是指定了自己的初始化序列号ISN(s)。同时会把客户端的ISN+1作为ACK的值，表示自己已经收到了客户端的SYN，此时服务器处于SYN_REVD的状态</p>\n<p>第三次握手：客户端收到SYN报文之后，会发送一个ACK报文，也是把ISN+1作为ACK的值，表示已经收到了服务端的SYN报文，此时客户端处于EASTABLISHED的状态。服务器收到ACK报文后，也处于EASTABLISHED状态。此时，双方已建立起了连接</p>\n<p><strong>数据传输</strong></p>\n<p>发送方发一个数据包，接受方接受到数据包之后必须要向发送发确认，如果发送方没有收到这个确认消息，就判定为数据包丢失，并重新发该数据包。把大的数据包拆成小的数据包传输可以提高效率</p>\n<h4 id=\"四次挥手断开连接\"><a href=\"#四次挥手断开连接\" class=\"headerlink\" title=\"四次挥手断开连接\"></a>四次挥手断开连接</h4><p>刚开始客户端和服务端都处于EASTABLISHED状态客户端和服务端均可主动发起挥手动作</p>\n<p>第一次挥手：客户端发送一个FIN报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态</p>\n<p>第二次挥手：服务端收到FIN之后，会发送ACK报文，且把客户端的序列号值+1作为ACk报文的序列值，表明已经收到客户端的报文了，此时服务端处于CLOSE_WAIT状态</p>\n<p>第三次挥手：如果服务端也想断开连接了，和客户端的第一次握手一样，发给FIN报文，并且指定一个序列号。此时服务端处于LAST_ACK的状态</p>\n<p>第四次挥手：客户端收到FIN之后，一样发送一个ACK报文作为应答，且把服务端的序列号值+1作为自己ACK报文的序列值，此时客户端处于TIME_WAIT状态。需要过一段时间确保服务器收到自己的ACK报文后才会进入CLOSED状态。服务端收到ACK报文后处于CLOSED状态</p>\n<h4 id=\"发送HTTP请求（如果请求头或者响应头中包含Connection-Keep-Alive表示建立了持久连接，tcp连接会一直保持）\"><a href=\"#发送HTTP请求（如果请求头或者响应头中包含Connection-Keep-Alive表示建立了持久连接，tcp连接会一直保持）\" class=\"headerlink\" title=\"发送HTTP请求（如果请求头或者响应头中包含Connection: Keep-Alive表示建立了持久连接，tcp连接会一直保持）\"></a>发送HTTP请求（如果请求头或者响应头中包含Connection: Keep-Alive表示建立了持久连接，tcp连接会一直保持）</h4><p>TCP连接建立好，浏览器就可以和服务器开始通信，浏览器HTTP请求需要携带三个东西：请求行（第一步的时候浏览器创建好了）、请求头和请求体（只有再POST方法下存在）</p>\n<p><strong>网络响应</strong></p>\n<p>HTTP请求到达服务器，服务器进行对应的处理。最后要把数据传给浏览器，也就是返回网络响应。网络响应包括三个部分：响应行、响应头和响应体</p>\n<p>响应行，HTTP/1.1 200 OK由HTTP协议、状态码和状态描述组成</p>\n<p>响应头，响应头包含了服务器及其返回数据的一些信息、服务器生成数据的时间、返回的数据类型以及对即将写入的Cookie信息</p>\n<p>响应体，服务端传给客户端的数据</p>\n<h3 id=\"构建渲染树过程\"><a href=\"#构建渲染树过程\" class=\"headerlink\" title=\"构建渲染树过程\"></a>构建渲染树过程</h3><h4 id=\"构建DOM树\"><a href=\"#构建DOM树\" class=\"headerlink\" title=\"构建DOM树\"></a>构建DOM树</h4><p>由于浏览器无法直接理解HTML字符串，因此将这一系列字节流转换成一种有意义并且方便操作的数据结构，这种结构就是DOM树，也可以理解为一个以document为根节点的多叉树</p>\n<p>常规的编程语言都是上下文无关的，而HTML却相反。所以HTML不能使用常规编程语言的解析器来完成</p>\n<p><strong>标记化算法</strong></p>\n<p>标记化算法输入为HTML文本，输出为HTML标记，成为标记生成器。这个是通过有限自动状态机来完成的，既在当前状态下，接受一个或多个字符，就会更新到下一个状态。下面是一个简单的标记化过程的示例</p>\n<p>遇到&lt;，状态为标记打开状态</p>\n<p>遇到[a-z]的字符，会进入标记名称状态</p>\n<p>遇到&gt;，表示标记名称记录完成，这时候变为数据状态</p>\n<p>在遇到&lt;，表示数据记录完成，状态又变成标记打开状态</p>\n<p>紧接着遇到下一个/后，会创建一个end tag的token，进入到标记名称状态</p>\n<p>遇到&gt;，回到数据状态</p>\n<p><strong>建树算法</strong></p>\n<p>标记生成器会把每个标记的信息发送给建树器。建树器接受到相应的标记时，会创建相应的DOM对象。然后将DOM对象加入DOM树中然后将对应标记压入存放元素的栈中。下面是建树的实例</p>\n<p>首先是初始状态</p>\n<p>接受到标记生成器传来的html标签，这个时候状态变成before html状态。同时创建一个HTMLHtmlElement的DOM元素，将其加到document根对象上，并进行压栈操作</p>\n<p>接着状态自动变为before head，此时从标记生成器那边传来body，表示并没有head，这时候建树器会自动创建一个HTMLHeadElement并将其加入到Dom树中</p>\n<p>接着进入大in head状态，然后直接跳到after head状态</p>\n<p>接着标记生成器传来了body标记，创建HTMLBodyElement，插入到DOM树中，同时压入开放标记栈。状态变为in body</p>\n<p>然后接受后面的一系列字符：hello world，接受第一个时会先创建一个text节点并把Text节点插入搭配DOM树中body元素的下面</p>\n<p>现在标记生成器传来body的接受标记，进入after body状态</p>\n<p>标记生成器在传一个html的接受标记，进入搭配after after body状态，解析过程到此结束</p>\n<h4 id=\"样式计算\"><a href=\"#样式计算\" class=\"headerlink\" title=\"样式计算\"></a>样式计算</h4><p><strong>样式来源</strong></p>\n<p>主要有以下三种，link标签引用、style标签中的样式和元素的内嵌style属性</p>\n<p><strong>格式化样式表</strong></p>\n<p>首先浏览器是无法识别css样式文件的，渲染引擎接收到css文本之后第一件事就是将其转化为一个结构化的对象，即styleSheets。浏览器控制台能通过document.styleSheets来查看这个最终的结构</p>\n<p><strong>标准化样式属性</strong></p>\n<p>有一些css样式的数值不能被浏览器所理解，因为要在计算样式之前将他们都标准化，如em -&gt;px等</p>\n<p><strong>计算每个节点的具体样式</strong></p>\n<p>继承：每个子节点都会默认继承父节点的样式属性，如果父节点中没有找到，就会采用浏览器默认样式，也叫UserAgent样式</p>\n<p>层叠：css最大的特点在于它的层叠性，也就是最终的样式取决于各个属性共同作用的效果。在计算样式之后，所有的样式都会被挂在window.getComputedStyle当中，可以通过js来获取计算后的样式</p>\n<h4 id=\"生成布局树\"><a href=\"#生成布局树\" class=\"headerlink\" title=\"生成布局树\"></a>生成布局树</h4><p>拿到生成好了的DOM树和DOM样式后，首先会对DOM树进行遍历，并添加到布局树中。然后浏览器的布局系统会根据DOM样式来确定元素的位置，最后生成一颗布局树</p>\n<h3 id=\"浏览器渲染过程\"><a href=\"#浏览器渲染过程\" class=\"headerlink\" title=\"浏览器渲染过程\"></a>浏览器渲染过程</h3><p>浏览器渲染过程有以下几个步骤</p>\n<h4 id=\"建立图层树\"><a href=\"#建立图层树\" class=\"headerlink\" title=\"建立图层树\"></a>建立图层树</h4><p><strong>显示合成</strong></p>\n<p>使用层叠上下文的节点，层叠上下文是有一些特定的CSS属性创建的，一般有以下情况：</p>\n<p>HTML元素本身就具有层叠上下文</p>\n<p>普通元素设置<strong>position不为static</strong>并且<strong>设置了z-index属性</strong>，会产生层叠上下文</p>\n<p>元素的 <strong>opacity</strong> 值不是 1</p>\n<p>元素的 <strong>transform</strong> 值不是 none</p>\n<p>元素的 <strong>filter</strong> 值不是 none</p>\n<p>元素的 <strong>isolation</strong> 值是isolate</p>\n<p>will-change指定的属性值为上面任意一个。(will-change的作用后面会详细介绍)</p>\n<p>还有需要裁剪的地方，比如一个div，里面的内容超出了出现滚动条，那么滚动条会被单独提升为一个图层</p>\n<p><strong>隐式合成</strong></p>\n<p>隐式合成就是层叠等级低的节点被提升为单独的图层之后，那么所有层叠登记比它高的节点都会成为一个单独的图层。隐式合成存在巨大的风险，当一个大型应用中，z-index比较低的元素被提升为单独的图层之后，层叠在它上面的元素都会被提升为单独的图层，可能会增加上千个图层，大大增加内存的压力，甚至让页面崩溃</p>\n<h4 id=\"生成绘制列表\"><a href=\"#生成绘制列表\" class=\"headerlink\" title=\"生成绘制列表\"></a>生成绘制列表</h4><p>渲染引擎会将图层的绘制拆分成一个个绘制指令，比如先画背景再描绘边框，然后将这些指令俺顺序组合成一个待绘制列表，相当于给后面的绘制操作做了一波计划</p>\n<h4 id=\"生成图块并栅格化\"><a href=\"#生成图块并栅格化\" class=\"headerlink\" title=\"生成图块并栅格化\"></a>生成图块并栅格化</h4><p>开始绘制的过程实际上是有专门的线程来完成的，这个线程叫做合成线程。考虑到页面非常大的时候，要滑很长时间才能滑到底，如果要一口气全部绘制出来是相当浪费性能的。因此合成线程要做的第一件事就是将图层分块。每一个图层块通常是256<em>256或则512</em>512大小的</p>\n<p>因为图块数据是要进入GPU内存的，为了提高性能，Chrome在首次合成图块时会采用一个分辨率低的图片，这样展示的时候只是展示出低分辨率的图片，这个时候继续进行合成操作，当正常的土块内容绘制完毕后，会将当前低分辨率的图块内容替换</p>\n<h4 id=\"显示器显示内容\"><a href=\"#显示器显示内容\" class=\"headerlink\" title=\"显示器显示内容\"></a>显示器显示内容</h4><p>当栅格化完成后，合成线程会生成一个绘制命令‘DrawQuad’并发送给浏览器</p>\n<p>浏览器进程中的viz组件接受到这个命令，然后把页面内容发送到内存。然后发送到显卡</p>\n<p><strong>显示器显示原理</strong></p>\n<p>显示器都有一个固定的刷新频率，一般是60HZ，也就是一秒更新60张照片，每次更新的图片都是来自显卡的前缓冲区。显卡在接受到浏览器传来的页面后，会合成响应的图像，然后放入后缓冲区，然后系统自动将前缓冲区和后缓冲区对换位置，一直循环更新</p>\n<h3 id=\"重绘和回流（避免频繁使用style，采用class的方式可以减少回流）\"><a href=\"#重绘和回流（避免频繁使用style，采用class的方式可以减少回流）\" class=\"headerlink\" title=\"重绘和回流（避免频繁使用style，采用class的方式可以减少回流）\"></a>重绘和回流（<strong>避免频繁使用style，采用class的方式可以减少回流</strong>）</h3><h4 id=\"回流\"><a href=\"#回流\" class=\"headerlink\" title=\"回流\"></a>回流</h4><p>回流又叫重排会重新生成DOM树</p>\n<p><strong>触发条件</strong></p>\n<p>简单来说，当我们对DOM结构的修改引发DOM几何尺寸变化的时候，会发生回流的过程</p>\n<p>一个DOM元素的几何属性变化，常见的几何属性有width、height、padding、margin、left、top、border</p>\n<p>使DOM节点发生增减或则移动</p>\n<p>读写offset、sroll和client属性的时候，浏览器为了获取这些值，需要进行回流操作</p>\n<p>调用window.getComputedStyle方法</p>\n<h4 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h4><p>重绘直接刷新页面 ，不会重新生成DOM树</p>\n<p><strong>触发条件</strong></p>\n<p>当DOM的修改导致样式的变化，并且没有影响几何属性的时候，会导致重绘</p>\n<h3 id=\"合成\"><a href=\"#合成\" class=\"headerlink\" title=\"合成\"></a>合成</h3><p>合成也叫GPU加速，CSS3的transform、opacity、filter可以实现合成的效果。在合成的情况下，会直接跳过布局和绘制流程，直接进入非主线程处理的部分，直接交给合成线程处理</p>\n<p><strong>好处</strong></p>\n<p>能偶发挥GPU的优势。合成线程生成位图的过程中会调用线程池，并在其中使用GPU进行加速生成，而GPU是擅长处理位图数据的</p>\n<p>没有占用主线程的资源，即使主线程卡住了没效果依然能够流畅的展示</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"浏览器的本地储存\"><a href=\"#浏览器的本地储存\" class=\"headerlink\" title=\"浏览器的本地储存\"></a>浏览器的本地储存</h3><p>浏览器的本地储存主要分为Cookie、localStorage、sessionStorage和IndexedDB</p>","more":"<h4 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h4><p>Cookie最开始标识用来做本地存储的，是为了弥补HTTP在状态管理上的不足。Cookie本质是浏览器上存储的一个小文件，在内部以键值对的方式来储存，在同一个域名下发送请求，都会携带相同的Cookie。服务器拿到Cookie进行解析便能字段客户端的状态</p>\n<p><strong>Cookie的缺陷：</strong></p>\n<ul>\n<li>容量缺陷，Cookie只能储存4kb的文件，信息量非常的少</li>\n<li>性能缺陷，Cookie紧跟着域名，不管域名下的某一个地址需不需要Cookie，请求都会带上这个Cookie。这样就造成了很大的性能浪费</li>\n<li>安全缺陷，由于Cookie和服务端都是以文本的形式进行交互，很容易被非法用户截获并加以修改</li>\n</ul>\n<h4 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h4><p>localStorage和Cookie有点相似，都是针对同一个域名，会储存相同的一段信息</p>\n<p><strong>localStorage相比Cookie的区别：</strong></p>\n<ul>\n<li>容量，localStorage的容量上限为5M</li>\n<li>localStorage的信息只存储在客户端，默认不参与和服务端的通信</li>\n<li>接口封装，通过localStorage暴露在全局，通过它的setItem和getItem等方法进行操作，非常的方便</li>\n</ul>\n<p><strong>使用方法</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;sanyuan&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;;</span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;sanyuan&quot;</span>); </span><br><span class=\"line\"><span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;info&quot;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(obj));</span><br><span class=\"line\"><span class=\"comment\">//取值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> info = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;info&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//localStorage存储的都是字符串，如果想要存储对象的话需要使用JSON的stringify方法处理，然后再利用JSON的parse方法解析成对象。</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>应用场景</strong></p>\n<p>利用localStorage的较大容量和持久特性，可以利用localStorage存储一些内容稳定的资源<strong>。</strong></p>\n<p>localStorage和Cookie有点相似，都是针对同一个域名，会储存相同的一段信息</p>\n<h4 id=\"sessionStorage\"><a href=\"#sessionStorage\" class=\"headerlink\" title=\"sessionStorage\"></a>sessionStorage</h4><p>sessionStorage基本和localStorage基本一致，只有一个最本质的区别，sessionStorage知识会话级的储存，并不是持久化存储。会话结束，也就是页面关闭sessionStorage的信息就会消失</p>\n<p><strong>应用场景</strong></p>\n<ul>\n<li>可以用来对表单信息进行维护，将表单的信息存储在里面，可以让页面刷新之后也不会让之前的表单信息消失</li>\n<li>可以用来存储本次浏览记录</li>\n</ul>\n<p>sessionStorage基本和localStorage基本一致，只有一个最本质的区别，sessionStorage知识会话级的储存，并不是持久化存储。会话结束，也就是页面关闭sessionStorage的信息就会消失</p>\n<h4 id=\"IndexedDB\"><a href=\"#IndexedDB\" class=\"headerlink\" title=\"IndexedDB\"></a>IndexedDB</h4><p>IndexedDB是运行在浏览器中的非关系数据库，本质上数据库，存储容量没有上限。IndexedDB除了拥有数据库本身的一些特性，如支持事务和存储二进制还有一些其他的特性</p>\n<p><strong>额外特性：</strong></p>\n<ul>\n<li>键值对存储，内部采用对象仓库存放数据</li>\n<li>异步操作，数据库的读写数据I/O操作，浏览器中对异步I/O提供了支持</li>\n<li>受同源策略限制，无法访问跨域的数据库</li>\n</ul>\n<h3 id=\"浏览器的请求过程\"><a href=\"#浏览器的请求过程\" class=\"headerlink\" title=\"浏览器的请求过程\"></a>浏览器的请求过程</h3><p>当你在浏览器地址栏输入了<code>https://www.baidu.com/</code></p>\n<h4 id=\"构建请求行\"><a href=\"#构建请求行\" class=\"headerlink\" title=\"构建请求行\"></a>构建请求行</h4><p>浏览器会自动构建好请求行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">GET</span> / <span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查找强缓存\"><a href=\"#查找强缓存\" class=\"headerlink\" title=\"查找强缓存\"></a>查找强缓存</h4><p>先查看浏览器有没有强缓存，有的话就直接使用浏览器缓存中的资源。没有则继续进行请求</p>\n<h4 id=\"DNS解析\"><a href=\"#DNS解析\" class=\"headerlink\" title=\"DNS解析\"></a>DNS解析</h4><p>因为一开始输入的是域名，所以我们要得到域名对应的IP地址。这个过程就是DNS解析。浏览器提供了DNS数据缓存功能</p>\n<p>如果一个域名解析过了，第二次就会直接调用缓存。如果没有指定的端口，默认采用80端口</p>\n<h4 id=\"建立TCP连接\"><a href=\"#建立TCP连接\" class=\"headerlink\" title=\"建立TCP连接\"></a>建立TCP连接</h4><p>TCP是一种面向连接的、可靠的、基于字节流的传输层通信协议</p>\n<p>注意Chrome在同一个域名下要求最多只能有6个TCP连接，超过6个的话就需要等待</p>\n<p><strong>建立TCP经历了下面三个阶段：</strong></p>\n<p><strong>三次握手建立连接</strong></p>\n<p>刚开始客户端处于Closed的状态，服务端处于Listen状态</p>\n<p>第一次握手：客户端给服务端发一个SYN报文，并指明客户端的初始化序列号ISN。此时客户端处于SYN_SEND状态</p>\n<p>第二次握手：服务器收到客户端的SYN报文之后，会以自己的SYN报文作文应答，并且也是指定了自己的初始化序列号ISN(s)。同时会把客户端的ISN+1作为ACK的值，表示自己已经收到了客户端的SYN，此时服务器处于SYN_REVD的状态</p>\n<p>第三次握手：客户端收到SYN报文之后，会发送一个ACK报文，也是把ISN+1作为ACK的值，表示已经收到了服务端的SYN报文，此时客户端处于EASTABLISHED的状态。服务器收到ACK报文后，也处于EASTABLISHED状态。此时，双方已建立起了连接</p>\n<p><strong>数据传输</strong></p>\n<p>发送方发一个数据包，接受方接受到数据包之后必须要向发送发确认，如果发送方没有收到这个确认消息，就判定为数据包丢失，并重新发该数据包。把大的数据包拆成小的数据包传输可以提高效率</p>\n<h4 id=\"四次挥手断开连接\"><a href=\"#四次挥手断开连接\" class=\"headerlink\" title=\"四次挥手断开连接\"></a>四次挥手断开连接</h4><p>刚开始客户端和服务端都处于EASTABLISHED状态客户端和服务端均可主动发起挥手动作</p>\n<p>第一次挥手：客户端发送一个FIN报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态</p>\n<p>第二次挥手：服务端收到FIN之后，会发送ACK报文，且把客户端的序列号值+1作为ACk报文的序列值，表明已经收到客户端的报文了，此时服务端处于CLOSE_WAIT状态</p>\n<p>第三次挥手：如果服务端也想断开连接了，和客户端的第一次握手一样，发给FIN报文，并且指定一个序列号。此时服务端处于LAST_ACK的状态</p>\n<p>第四次挥手：客户端收到FIN之后，一样发送一个ACK报文作为应答，且把服务端的序列号值+1作为自己ACK报文的序列值，此时客户端处于TIME_WAIT状态。需要过一段时间确保服务器收到自己的ACK报文后才会进入CLOSED状态。服务端收到ACK报文后处于CLOSED状态</p>\n<h4 id=\"发送HTTP请求（如果请求头或者响应头中包含Connection-Keep-Alive表示建立了持久连接，tcp连接会一直保持）\"><a href=\"#发送HTTP请求（如果请求头或者响应头中包含Connection-Keep-Alive表示建立了持久连接，tcp连接会一直保持）\" class=\"headerlink\" title=\"发送HTTP请求（如果请求头或者响应头中包含Connection: Keep-Alive表示建立了持久连接，tcp连接会一直保持）\"></a>发送HTTP请求（如果请求头或者响应头中包含Connection: Keep-Alive表示建立了持久连接，tcp连接会一直保持）</h4><p>TCP连接建立好，浏览器就可以和服务器开始通信，浏览器HTTP请求需要携带三个东西：请求行（第一步的时候浏览器创建好了）、请求头和请求体（只有再POST方法下存在）</p>\n<p><strong>网络响应</strong></p>\n<p>HTTP请求到达服务器，服务器进行对应的处理。最后要把数据传给浏览器，也就是返回网络响应。网络响应包括三个部分：响应行、响应头和响应体</p>\n<p>响应行，HTTP/1.1 200 OK由HTTP协议、状态码和状态描述组成</p>\n<p>响应头，响应头包含了服务器及其返回数据的一些信息、服务器生成数据的时间、返回的数据类型以及对即将写入的Cookie信息</p>\n<p>响应体，服务端传给客户端的数据</p>\n<h3 id=\"构建渲染树过程\"><a href=\"#构建渲染树过程\" class=\"headerlink\" title=\"构建渲染树过程\"></a>构建渲染树过程</h3><h4 id=\"构建DOM树\"><a href=\"#构建DOM树\" class=\"headerlink\" title=\"构建DOM树\"></a>构建DOM树</h4><p>由于浏览器无法直接理解HTML字符串，因此将这一系列字节流转换成一种有意义并且方便操作的数据结构，这种结构就是DOM树，也可以理解为一个以document为根节点的多叉树</p>\n<p>常规的编程语言都是上下文无关的，而HTML却相反。所以HTML不能使用常规编程语言的解析器来完成</p>\n<p><strong>标记化算法</strong></p>\n<p>标记化算法输入为HTML文本，输出为HTML标记，成为标记生成器。这个是通过有限自动状态机来完成的，既在当前状态下，接受一个或多个字符，就会更新到下一个状态。下面是一个简单的标记化过程的示例</p>\n<p>遇到&lt;，状态为标记打开状态</p>\n<p>遇到[a-z]的字符，会进入标记名称状态</p>\n<p>遇到&gt;，表示标记名称记录完成，这时候变为数据状态</p>\n<p>在遇到&lt;，表示数据记录完成，状态又变成标记打开状态</p>\n<p>紧接着遇到下一个/后，会创建一个end tag的token，进入到标记名称状态</p>\n<p>遇到&gt;，回到数据状态</p>\n<p><strong>建树算法</strong></p>\n<p>标记生成器会把每个标记的信息发送给建树器。建树器接受到相应的标记时，会创建相应的DOM对象。然后将DOM对象加入DOM树中然后将对应标记压入存放元素的栈中。下面是建树的实例</p>\n<p>首先是初始状态</p>\n<p>接受到标记生成器传来的html标签，这个时候状态变成before html状态。同时创建一个HTMLHtmlElement的DOM元素，将其加到document根对象上，并进行压栈操作</p>\n<p>接着状态自动变为before head，此时从标记生成器那边传来body，表示并没有head，这时候建树器会自动创建一个HTMLHeadElement并将其加入到Dom树中</p>\n<p>接着进入大in head状态，然后直接跳到after head状态</p>\n<p>接着标记生成器传来了body标记，创建HTMLBodyElement，插入到DOM树中，同时压入开放标记栈。状态变为in body</p>\n<p>然后接受后面的一系列字符：hello world，接受第一个时会先创建一个text节点并把Text节点插入搭配DOM树中body元素的下面</p>\n<p>现在标记生成器传来body的接受标记，进入after body状态</p>\n<p>标记生成器在传一个html的接受标记，进入搭配after after body状态，解析过程到此结束</p>\n<h4 id=\"样式计算\"><a href=\"#样式计算\" class=\"headerlink\" title=\"样式计算\"></a>样式计算</h4><p><strong>样式来源</strong></p>\n<p>主要有以下三种，link标签引用、style标签中的样式和元素的内嵌style属性</p>\n<p><strong>格式化样式表</strong></p>\n<p>首先浏览器是无法识别css样式文件的，渲染引擎接收到css文本之后第一件事就是将其转化为一个结构化的对象，即styleSheets。浏览器控制台能通过document.styleSheets来查看这个最终的结构</p>\n<p><strong>标准化样式属性</strong></p>\n<p>有一些css样式的数值不能被浏览器所理解，因为要在计算样式之前将他们都标准化，如em -&gt;px等</p>\n<p><strong>计算每个节点的具体样式</strong></p>\n<p>继承：每个子节点都会默认继承父节点的样式属性，如果父节点中没有找到，就会采用浏览器默认样式，也叫UserAgent样式</p>\n<p>层叠：css最大的特点在于它的层叠性，也就是最终的样式取决于各个属性共同作用的效果。在计算样式之后，所有的样式都会被挂在window.getComputedStyle当中，可以通过js来获取计算后的样式</p>\n<h4 id=\"生成布局树\"><a href=\"#生成布局树\" class=\"headerlink\" title=\"生成布局树\"></a>生成布局树</h4><p>拿到生成好了的DOM树和DOM样式后，首先会对DOM树进行遍历，并添加到布局树中。然后浏览器的布局系统会根据DOM样式来确定元素的位置，最后生成一颗布局树</p>\n<h3 id=\"浏览器渲染过程\"><a href=\"#浏览器渲染过程\" class=\"headerlink\" title=\"浏览器渲染过程\"></a>浏览器渲染过程</h3><p>浏览器渲染过程有以下几个步骤</p>\n<h4 id=\"建立图层树\"><a href=\"#建立图层树\" class=\"headerlink\" title=\"建立图层树\"></a>建立图层树</h4><p><strong>显示合成</strong></p>\n<p>使用层叠上下文的节点，层叠上下文是有一些特定的CSS属性创建的，一般有以下情况：</p>\n<p>HTML元素本身就具有层叠上下文</p>\n<p>普通元素设置<strong>position不为static</strong>并且<strong>设置了z-index属性</strong>，会产生层叠上下文</p>\n<p>元素的 <strong>opacity</strong> 值不是 1</p>\n<p>元素的 <strong>transform</strong> 值不是 none</p>\n<p>元素的 <strong>filter</strong> 值不是 none</p>\n<p>元素的 <strong>isolation</strong> 值是isolate</p>\n<p>will-change指定的属性值为上面任意一个。(will-change的作用后面会详细介绍)</p>\n<p>还有需要裁剪的地方，比如一个div，里面的内容超出了出现滚动条，那么滚动条会被单独提升为一个图层</p>\n<p><strong>隐式合成</strong></p>\n<p>隐式合成就是层叠等级低的节点被提升为单独的图层之后，那么所有层叠登记比它高的节点都会成为一个单独的图层。隐式合成存在巨大的风险，当一个大型应用中，z-index比较低的元素被提升为单独的图层之后，层叠在它上面的元素都会被提升为单独的图层，可能会增加上千个图层，大大增加内存的压力，甚至让页面崩溃</p>\n<h4 id=\"生成绘制列表\"><a href=\"#生成绘制列表\" class=\"headerlink\" title=\"生成绘制列表\"></a>生成绘制列表</h4><p>渲染引擎会将图层的绘制拆分成一个个绘制指令，比如先画背景再描绘边框，然后将这些指令俺顺序组合成一个待绘制列表，相当于给后面的绘制操作做了一波计划</p>\n<h4 id=\"生成图块并栅格化\"><a href=\"#生成图块并栅格化\" class=\"headerlink\" title=\"生成图块并栅格化\"></a>生成图块并栅格化</h4><p>开始绘制的过程实际上是有专门的线程来完成的，这个线程叫做合成线程。考虑到页面非常大的时候，要滑很长时间才能滑到底，如果要一口气全部绘制出来是相当浪费性能的。因此合成线程要做的第一件事就是将图层分块。每一个图层块通常是256<em>256或则512</em>512大小的</p>\n<p>因为图块数据是要进入GPU内存的，为了提高性能，Chrome在首次合成图块时会采用一个分辨率低的图片，这样展示的时候只是展示出低分辨率的图片，这个时候继续进行合成操作，当正常的土块内容绘制完毕后，会将当前低分辨率的图块内容替换</p>\n<h4 id=\"显示器显示内容\"><a href=\"#显示器显示内容\" class=\"headerlink\" title=\"显示器显示内容\"></a>显示器显示内容</h4><p>当栅格化完成后，合成线程会生成一个绘制命令‘DrawQuad’并发送给浏览器</p>\n<p>浏览器进程中的viz组件接受到这个命令，然后把页面内容发送到内存。然后发送到显卡</p>\n<p><strong>显示器显示原理</strong></p>\n<p>显示器都有一个固定的刷新频率，一般是60HZ，也就是一秒更新60张照片，每次更新的图片都是来自显卡的前缓冲区。显卡在接受到浏览器传来的页面后，会合成响应的图像，然后放入后缓冲区，然后系统自动将前缓冲区和后缓冲区对换位置，一直循环更新</p>\n<h3 id=\"重绘和回流（避免频繁使用style，采用class的方式可以减少回流）\"><a href=\"#重绘和回流（避免频繁使用style，采用class的方式可以减少回流）\" class=\"headerlink\" title=\"重绘和回流（避免频繁使用style，采用class的方式可以减少回流）\"></a>重绘和回流（<strong>避免频繁使用style，采用class的方式可以减少回流</strong>）</h3><h4 id=\"回流\"><a href=\"#回流\" class=\"headerlink\" title=\"回流\"></a>回流</h4><p>回流又叫重排会重新生成DOM树</p>\n<p><strong>触发条件</strong></p>\n<p>简单来说，当我们对DOM结构的修改引发DOM几何尺寸变化的时候，会发生回流的过程</p>\n<p>一个DOM元素的几何属性变化，常见的几何属性有width、height、padding、margin、left、top、border</p>\n<p>使DOM节点发生增减或则移动</p>\n<p>读写offset、sroll和client属性的时候，浏览器为了获取这些值，需要进行回流操作</p>\n<p>调用window.getComputedStyle方法</p>\n<h4 id=\"重绘\"><a href=\"#重绘\" class=\"headerlink\" title=\"重绘\"></a>重绘</h4><p>重绘直接刷新页面 ，不会重新生成DOM树</p>\n<p><strong>触发条件</strong></p>\n<p>当DOM的修改导致样式的变化，并且没有影响几何属性的时候，会导致重绘</p>\n<h3 id=\"合成\"><a href=\"#合成\" class=\"headerlink\" title=\"合成\"></a>合成</h3><p>合成也叫GPU加速，CSS3的transform、opacity、filter可以实现合成的效果。在合成的情况下，会直接跳过布局和绘制流程，直接进入非主线程处理的部分，直接交给合成线程处理</p>\n<p><strong>好处</strong></p>\n<p>能偶发挥GPU的优势。合成线程生成位图的过程中会调用线程池，并在其中使用GPU进行加速生成，而GPU是擅长处理位图数据的</p>\n<p>没有占用主线程的资源，即使主线程卡住了没效果依然能够流畅的展示</p>"},{"title":"寺庙点灯小程序","date":"2022-12-13T01:33:32.000Z","password":123456,"top":99,"_content":"\n#### 先来说说我做完这个小程序的一些收获吧\n\n- 在设计稿出来之前先不要写样式，按照产品搞写一下大概的dom和交互逻辑就好了\n- 做一个项目之前一定要先把这个项目的思路理清然后再开始搭建项目，返工效率真的很低效还很难受\n- 换个角度去思考问题很重要，很多时候你觉得这两个冲突了，做不了。但是你换个角度去解决这个冲突，这个问题可能就很容易解决了\n- 去网上找一个现成的组件往往能节省很多的时间和精力，但是也不要低估了自己的实现能力\n- 接口的数据结构没出来之前，搭建页面的时候先不用写数据接口\n- 接口出来之后可以先把接口全部写进api.ts里面，然后接口接收和返回的数据类型就放在server-dto文件里面\n- 个人认为小程序好像真的不需要写组件，因为如果项目中如果有相同的组件需要实现的花，只需要把样式写在全局样式就好\n<!--more-->\n#### 难点\n\n小程序的难点是选择位置，类似电影院的选座，但是寺庙点灯的场景会更复杂一些。会出现一个位置占了好几个位置，数据范围也很大，1至400个位置的情况都要覆盖到.还需要放大缩小。\n\n一开始我的实现思路比较简单，放大缩小使用的微信小程序的api，movable-area和movable-view实现选择位置区域放大缩小的功能。然后利用flex布局，遍历数组依次渲染，超过父容器后自动换行。空位利用css渲染成透明颜色。这样实现的效果有一些的问题，比如无法控制每一个列的数量。\n\n改进方法，使用了vant的Grid组件，通过传一个参数去动态的控制每一列的数量。提前计算有多少个位置，然后根据位置的多少分成四种情况，对应四种位置尺寸，让页面看起来更加美观。\n\n思考，怎么去表示一个位置很大，可能会是其他的位置的好几倍。不考虑代码实现的理想方案应该是一个很大特殊位置区域，然后中间有一个可点击的位置。但是代码实现起来有点复杂，并且不能达预期效果，每个位置之间的间隔会有空白。于是我换了一种实现方式，当有特殊位置出现的时候，我会现在当前位置，其他位置都说空白，但是我会在选中的座位表上注明它们占了几排几列。\n\n#### 坑\n\n- van时间选择器安卓bug\n\n在使用vant的时间选择器组件的时候，发现了一个兼容性bug，在ios手机和模拟器上正常，但是在安卓手机上选择时间的会有不规则的动画，并且选择的时候还会有1-2s的延迟。发现在两年前就已经有人github上提出了issue，然后一直都没有人解决。下面有一位网友给出方案是不要bind-input，换成bind-change。但是这样的话还是会有延迟的问题。在选中的时候立即点确定保存的值可能还是上一个的值。最后我决定使用微信小程序官方提供的时间选择器。在默认赋值的时候也出现了问题，因为js的单线程机制，在赋值的时候因为后面的数据都没有渲染出来，到处无法设置默认值。后面我在onload方法上赋值的时候使用了异步解决的这个问题。\n\n- ios部分机型上按钮边框会消失。这个是因为border设置1rpx的宽度，渲染到具体的手机上可能宽度达不到1px，出现小数位的狂赌。安卓会统一向上取整，而ios机型则会向下取整。导致边框消失。最后是通过伪类写200%长和宽，然后再缩小一半。\n","source":"_posts/heartLight.md","raw":"---\ntitle: 寺庙点灯小程序\ndate: 2022-12-13 09:33:32\ntags: 总结\ncategories: 前端\npassword: 123456\ntop: 99\n---\n\n#### 先来说说我做完这个小程序的一些收获吧\n\n- 在设计稿出来之前先不要写样式，按照产品搞写一下大概的dom和交互逻辑就好了\n- 做一个项目之前一定要先把这个项目的思路理清然后再开始搭建项目，返工效率真的很低效还很难受\n- 换个角度去思考问题很重要，很多时候你觉得这两个冲突了，做不了。但是你换个角度去解决这个冲突，这个问题可能就很容易解决了\n- 去网上找一个现成的组件往往能节省很多的时间和精力，但是也不要低估了自己的实现能力\n- 接口的数据结构没出来之前，搭建页面的时候先不用写数据接口\n- 接口出来之后可以先把接口全部写进api.ts里面，然后接口接收和返回的数据类型就放在server-dto文件里面\n- 个人认为小程序好像真的不需要写组件，因为如果项目中如果有相同的组件需要实现的花，只需要把样式写在全局样式就好\n<!--more-->\n#### 难点\n\n小程序的难点是选择位置，类似电影院的选座，但是寺庙点灯的场景会更复杂一些。会出现一个位置占了好几个位置，数据范围也很大，1至400个位置的情况都要覆盖到.还需要放大缩小。\n\n一开始我的实现思路比较简单，放大缩小使用的微信小程序的api，movable-area和movable-view实现选择位置区域放大缩小的功能。然后利用flex布局，遍历数组依次渲染，超过父容器后自动换行。空位利用css渲染成透明颜色。这样实现的效果有一些的问题，比如无法控制每一个列的数量。\n\n改进方法，使用了vant的Grid组件，通过传一个参数去动态的控制每一列的数量。提前计算有多少个位置，然后根据位置的多少分成四种情况，对应四种位置尺寸，让页面看起来更加美观。\n\n思考，怎么去表示一个位置很大，可能会是其他的位置的好几倍。不考虑代码实现的理想方案应该是一个很大特殊位置区域，然后中间有一个可点击的位置。但是代码实现起来有点复杂，并且不能达预期效果，每个位置之间的间隔会有空白。于是我换了一种实现方式，当有特殊位置出现的时候，我会现在当前位置，其他位置都说空白，但是我会在选中的座位表上注明它们占了几排几列。\n\n#### 坑\n\n- van时间选择器安卓bug\n\n在使用vant的时间选择器组件的时候，发现了一个兼容性bug，在ios手机和模拟器上正常，但是在安卓手机上选择时间的会有不规则的动画，并且选择的时候还会有1-2s的延迟。发现在两年前就已经有人github上提出了issue，然后一直都没有人解决。下面有一位网友给出方案是不要bind-input，换成bind-change。但是这样的话还是会有延迟的问题。在选中的时候立即点确定保存的值可能还是上一个的值。最后我决定使用微信小程序官方提供的时间选择器。在默认赋值的时候也出现了问题，因为js的单线程机制，在赋值的时候因为后面的数据都没有渲染出来，到处无法设置默认值。后面我在onload方法上赋值的时候使用了异步解决的这个问题。\n\n- ios部分机型上按钮边框会消失。这个是因为border设置1rpx的宽度，渲染到具体的手机上可能宽度达不到1px，出现小数位的狂赌。安卓会统一向上取整，而ios机型则会向下取整。导致边框消失。最后是通过伪类写200%长和宽，然后再缩小一半。\n","slug":"heartLight","published":1,"updated":"2022-12-30T03:14:06.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc9yxb8p000350ut20kj9uop","content":"<h4 id=\"先来说说我做完这个小程序的一些收获吧\"><a href=\"#先来说说我做完这个小程序的一些收获吧\" class=\"headerlink\" title=\"先来说说我做完这个小程序的一些收获吧\"></a>先来说说我做完这个小程序的一些收获吧</h4><ul>\n<li>在设计稿出来之前先不要写样式，按照产品搞写一下大概的dom和交互逻辑就好了</li>\n<li>做一个项目之前一定要先把这个项目的思路理清然后再开始搭建项目，返工效率真的很低效还很难受</li>\n<li>换个角度去思考问题很重要，很多时候你觉得这两个冲突了，做不了。但是你换个角度去解决这个冲突，这个问题可能就很容易解决了</li>\n<li>去网上找一个现成的组件往往能节省很多的时间和精力，但是也不要低估了自己的实现能力</li>\n<li>接口的数据结构没出来之前，搭建页面的时候先不用写数据接口</li>\n<li>接口出来之后可以先把接口全部写进api.ts里面，然后接口接收和返回的数据类型就放在server-dto文件里面</li>\n<li>个人认为小程序好像真的不需要写组件，因为如果项目中如果有相同的组件需要实现的花，只需要把样式写在全局样式就好<span id=\"more\"></span>\n<h4 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h4></li>\n</ul>\n<p>小程序的难点是选择位置，类似电影院的选座，但是寺庙点灯的场景会更复杂一些。会出现一个位置占了好几个位置，数据范围也很大，1至400个位置的情况都要覆盖到.还需要放大缩小。</p>\n<p>一开始我的实现思路比较简单，放大缩小使用的微信小程序的api，movable-area和movable-view实现选择位置区域放大缩小的功能。然后利用flex布局，遍历数组依次渲染，超过父容器后自动换行。空位利用css渲染成透明颜色。这样实现的效果有一些的问题，比如无法控制每一个列的数量。</p>\n<p>改进方法，使用了vant的Grid组件，通过传一个参数去动态的控制每一列的数量。提前计算有多少个位置，然后根据位置的多少分成四种情况，对应四种位置尺寸，让页面看起来更加美观。</p>\n<p>思考，怎么去表示一个位置很大，可能会是其他的位置的好几倍。不考虑代码实现的理想方案应该是一个很大特殊位置区域，然后中间有一个可点击的位置。但是代码实现起来有点复杂，并且不能达预期效果，每个位置之间的间隔会有空白。于是我换了一种实现方式，当有特殊位置出现的时候，我会现在当前位置，其他位置都说空白，但是我会在选中的座位表上注明它们占了几排几列。</p>\n<h4 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h4><ul>\n<li>van时间选择器安卓bug</li>\n</ul>\n<p>在使用vant的时间选择器组件的时候，发现了一个兼容性bug，在ios手机和模拟器上正常，但是在安卓手机上选择时间的会有不规则的动画，并且选择的时候还会有1-2s的延迟。发现在两年前就已经有人github上提出了issue，然后一直都没有人解决。下面有一位网友给出方案是不要bind-input，换成bind-change。但是这样的话还是会有延迟的问题。在选中的时候立即点确定保存的值可能还是上一个的值。最后我决定使用微信小程序官方提供的时间选择器。在默认赋值的时候也出现了问题，因为js的单线程机制，在赋值的时候因为后面的数据都没有渲染出来，到处无法设置默认值。后面我在onload方法上赋值的时候使用了异步解决的这个问题。</p>\n<ul>\n<li>ios部分机型上按钮边框会消失。这个是因为border设置1rpx的宽度，渲染到具体的手机上可能宽度达不到1px，出现小数位的狂赌。安卓会统一向上取整，而ios机型则会向下取整。导致边框消失。最后是通过伪类写200%长和宽，然后再缩小一半。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h4 id=\"先来说说我做完这个小程序的一些收获吧\"><a href=\"#先来说说我做完这个小程序的一些收获吧\" class=\"headerlink\" title=\"先来说说我做完这个小程序的一些收获吧\"></a>先来说说我做完这个小程序的一些收获吧</h4><ul>\n<li>在设计稿出来之前先不要写样式，按照产品搞写一下大概的dom和交互逻辑就好了</li>\n<li>做一个项目之前一定要先把这个项目的思路理清然后再开始搭建项目，返工效率真的很低效还很难受</li>\n<li>换个角度去思考问题很重要，很多时候你觉得这两个冲突了，做不了。但是你换个角度去解决这个冲突，这个问题可能就很容易解决了</li>\n<li>去网上找一个现成的组件往往能节省很多的时间和精力，但是也不要低估了自己的实现能力</li>\n<li>接口的数据结构没出来之前，搭建页面的时候先不用写数据接口</li>\n<li>接口出来之后可以先把接口全部写进api.ts里面，然后接口接收和返回的数据类型就放在server-dto文件里面</li>\n<li>个人认为小程序好像真的不需要写组件，因为如果项目中如果有相同的组件需要实现的花，只需要把样式写在全局样式就好","more":"<h4 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h4></li>\n</ul>\n<p>小程序的难点是选择位置，类似电影院的选座，但是寺庙点灯的场景会更复杂一些。会出现一个位置占了好几个位置，数据范围也很大，1至400个位置的情况都要覆盖到.还需要放大缩小。</p>\n<p>一开始我的实现思路比较简单，放大缩小使用的微信小程序的api，movable-area和movable-view实现选择位置区域放大缩小的功能。然后利用flex布局，遍历数组依次渲染，超过父容器后自动换行。空位利用css渲染成透明颜色。这样实现的效果有一些的问题，比如无法控制每一个列的数量。</p>\n<p>改进方法，使用了vant的Grid组件，通过传一个参数去动态的控制每一列的数量。提前计算有多少个位置，然后根据位置的多少分成四种情况，对应四种位置尺寸，让页面看起来更加美观。</p>\n<p>思考，怎么去表示一个位置很大，可能会是其他的位置的好几倍。不考虑代码实现的理想方案应该是一个很大特殊位置区域，然后中间有一个可点击的位置。但是代码实现起来有点复杂，并且不能达预期效果，每个位置之间的间隔会有空白。于是我换了一种实现方式，当有特殊位置出现的时候，我会现在当前位置，其他位置都说空白，但是我会在选中的座位表上注明它们占了几排几列。</p>\n<h4 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h4><ul>\n<li>van时间选择器安卓bug</li>\n</ul>\n<p>在使用vant的时间选择器组件的时候，发现了一个兼容性bug，在ios手机和模拟器上正常，但是在安卓手机上选择时间的会有不规则的动画，并且选择的时候还会有1-2s的延迟。发现在两年前就已经有人github上提出了issue，然后一直都没有人解决。下面有一位网友给出方案是不要bind-input，换成bind-change。但是这样的话还是会有延迟的问题。在选中的时候立即点确定保存的值可能还是上一个的值。最后我决定使用微信小程序官方提供的时间选择器。在默认赋值的时候也出现了问题，因为js的单线程机制，在赋值的时候因为后面的数据都没有渲染出来，到处无法设置默认值。后面我在onload方法上赋值的时候使用了异步解决的这个问题。</p>\n<ul>\n<li>ios部分机型上按钮边框会消失。这个是因为border设置1rpx的宽度，渲染到具体的手机上可能宽度达不到1px，出现小数位的狂赌。安卓会统一向上取整，而ios机型则会向下取整。导致边框消失。最后是通过伪类写200%长和宽，然后再缩小一半。</li>\n</ul>"},{"title":"JavaScript语言基础","date":"2022-12-12T02:36:15.000Z","typora-copy-images-to":"upload","top":999,"_content":"\n### 区分基本类型和对象类型\n\n#### 基本类型不可变性\n\n在ECMAScript标准中，它们被定义为primitive value，即原始值，代表值本身是不可被改变的。\n\n在JavaScript中，每一个变量在内存中都需要一个空间来存储\n\n<!--more-->\n\n内存空间被分为两种，栈内存和堆内存\n\n栈内存的特点：\n\n- 存储的值大小固定\n\n- 空间较小\n\n- 可以直接操作其保存的变量，运行效率高\n  \n- 由系统自动分配存储空间\n\n由于栈中的内存空间的大小是固定的，那么注定了存储栈中的变量就是不可变的\n\n### 引用类型\n\n- 存储的值大小不定，可动态调整\n\n- 空间较大，运行效率低\n\n- 无法直接操作其内部存储，使用引用地址读取\n\n- 通过代码进行分配空间\n\n相对于上面具有不可变性的原始类型，我习惯把对象成为引用类型，引用类型的值实际存储在堆内存中，它在栈中值存储了一个固定长度的地址，这个地址指向堆内存中的值\n\n#### 复制\n\n当我们把一个变量的值复制到另一个变量上时，原始类型和引用类型的表现是不一样的\n\n**原始类型**\n\n内存中有一个变量name，值为ConardLi。我们从变量name复制出一个变量name2，此时在内存中创建了一块新的空间用于存储ConardLi，虽然两者值都是相同的，但是两者指向的内存空间完全不同，这两个量参与任何操作都互不影响。\n\n```javascript\nvar name = 'fsang';\nvar name2 = name;\nname2 = 'code秘密花园';\nconsole.log(name); // fsang;\n```\n\n![image-20221213164248277](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213164248277.png)\n\n**引用类型**\n\n当我们复制引用类型的变量时，实际上复制的是栈中存储的地址，所以复制出来的obj2实际上和obj指向的堆中同一个对象。因此，我们改变其中任何一个变量的值，另一个变量都会收到影响，这也是为什么会有深拷贝和浅拷贝的原因\n\n```javascript\nvar obj = {name:'ConardLi'};\nvar obj2 = obj;\nobj2.name = 'code秘密花园';\nconsole.log(obj.name); // code秘密花园\n```\n\n![image-20221213164404630](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213164404630.png)\n\n#### 比较\n\n对于原始类型，比较时会直接比较他们的值，如果值相等，即返回true\n\n对于引用类型，比较时会比较他们的引用地址，虽然两个变量在堆中存储的对象具有的属性都是相等的，但是它们被存储在了不同的存储空间，因此比较值为false\n\n```javascript\nvar name = 'ConardLi';\nvar name2 = 'ConardLi';\nconsole.log(name === name2); // true\nvar obj = {name:'ConardLi'};\nvar obj2 = {name:'ConardLi'};\nconsole.log(obj === obj2); // false\n```\n\n![image-20221213164453686](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213164453686.png)\n\n#### 值传递和引用传递\n\n```javascript\nlet name = 'ConardLi';\nfunction changeValue(name){\n  name = 'code秘密花园';\n}\nchangeValue(name);\nconsole.log(name);\n```\n\n执行上面的代码，如果最终打印出来的name是'ConarLi'，没有改变，说明函数参数传递的是变量的值，即值传递。如果最终打印的是'code秘密花园'，内书内部的操作可以改变传入的变量，那么说明函数参数传递的是引用，即引用传递。\n\n很明显，上面的执行结果是'ConarLi'，即函数参数仅仅是被传入变量复制的一个局部变量，改变这个局部变量不会对外部变量产生影响。\n\n```javascript\nlet obj = {name:'ConardLi'};\nfunction changeValue(obj){\n  obj.name = 'code秘密花园';\n}\nchangeValue(obj);\nconsole.log(obj.name); // code秘密花园\n```\n\n上面的代码可能会产生疑惑，是不是参数是引用类型就是引用传递呢\n\n首先明确一点，ECMAScript中所有的函数的参数都是按值传递的\n\n当函数参数是引用类型时，同样将参数复制了一个副本到局部变量，只不过复制的这个副本是指向堆内存中的地址，我们在函数内部对对象的属性进行操作，实际上和外部变量指向堆内存中的值相同，但是这并不代表着引用传递\n\n```javascript\nlet obj = {};\nfunction changeValue(obj){\n  obj.name = 'ConardLi';\n  obj = {name:'code秘密花园'};\n}\nchangeValue(obj);\nconsole.log(obj.name); // ConardLi\n```\n\n函数参数传递的并不是变量的引用，而是变量拷贝的副本，当变量是原始类型时，这个副本就是值本身，当变量是引用类型时，这个副本是指向堆内存的地址。\n\n最后注意：函数参数都是按照值传递的\n\n### 引用数据类型(对象类型)\n\n#### Array\n\n**创建数组的方法**\n\nconst arr = [1,2,3]// 数组字面量\n\nconst arr = [,,,]// 三元素空位数组（hole array）\n\nconst arr = new Array(4)// [,,,,]\n\nconst arr = new Array(4,2)// [4,2]\n\nconst arr = Array.of(1,2,3)// [1,2,3]\n\nconst arr = Array.of(4)// [4]\n\n**操作数组的方法**\n\nconcat() 连接两个或多个数组，并返回已连接数组的副本\n\ncopyWithin() 将数组中的数组元素复制到指定位置或从指定位置复制\n\nentries() 返回键 / 值对数组迭代对象\n\nevery() 检查数组中的每一个元素是否通过测试\n\nfill() 用静态值填充数组中的元素\n\nfilter() 使用数组中通过测试的每个元素创建新数组\n\nfind() 返回数组中第一个通过测试的元素的值\n\nfindIndex() 返回数组中通过测试的第一个元素的索引\n\nforEach() 为每个数组调用函数\n\nArray.from() 方法用于通过拥有 length 属性的对象或可迭代的对象来返回一个数组\n\nincludes() 检查数组是否包含指定的元素\n\nindexOf() 在数组中搜索元素并返回其位置\n\njoin() 将数组的所有元素连接成一个字符串\n\nkeys() 返回Array Iteration对象，包含原始数组的键\n\nlastindexOf() 在数组中搜索元素，从末尾开始，并返回其位置\n\nmap() 使用为每个数组元素调用函数的结果创建新数组\n\npop() 删除数组的最后一个元素，并返回该元素\n\npush() 将新元素添加到数组的末尾，并返回新的长度\n\nreduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。数组的值减为单个值\n\nreduceRight() 方法接收一个函数作为累加器，数组中的每个值（从右到左）开始缩减，最终计算为一个值。数组的值减为单个值\n\nreverse() 反转数组中元素的顺序\n\nshift() 删除数组的第一个元素，并返回该元素\n\nslice() 选择数组的一部分，并返回该元素\n\nsome() 检查数组中的任意元素是否通过测试\n\nsort() 对数组的元素进行排序\n\nsplice() 用于添加或删除数组中的元素\n\ntoString() 将数组转为字符串，并返回结果\n\nunshift() 将新元素添加到开头，并返回新的长度\n\nvalueOf() 返回数组的元素值\n\nflat() 将嵌套数组转成一维数组\n\n#### Object\n\nJavaScript对象的原生方法分成两类：Object本身的方法和Object的实例方法\n\nObject本身的方法就是直接定义在Object的方法。如Object.print = function (o) => {onsole.log(o)}\n\nObject的实例方法就是Object原型对象Object.prototype上的方法，可以直接被Object实例直接使用。如Object.prototype.print = function () =>{console.log(this)}   var obj = new Object(); obj.ptrint()\n\nObject.keys() 参数是一个对象，返回该对象自身的所有属性名\n\nObject.balues() 返回一个数组，成员是参数对象自身的所有可遍历属性的键值。与Object.keys相对接\n\nObject.entries() 返回一个数组，成员是参数对象自身的所有可遍历属性的键值对数组\n\nObject.getOwnPropertyDescriptor() 获取某个属性的描述对象\n\nObject.defineProperty()通过描述对象，定义某个属性\n\nObject.defineProperties() 通过描述对象，定义多个属性\n\nObject.preventExtensions() 防止对象扩展\n\nObject.isExtensible() 判断对象是否可扩展\n\nObject.seal() 禁止对象配置\n\nObject.isSealed() 判断一个对象是否可配置\n\nObject.freeze() 冻结一个对象\n\nObject.isFrozen() 判断一个对象是否被冻结\n\nObject.create() 该方法可以指定对象和属性，返回一个新的对象\n\nObject.gerPrototypeOf() 获取对象的Prototype对象\n\nObject.prototype.valueOf() 返回当前对象对应的值\n\nObject.prototype.toString() 返回当前对象对应的字符串形式\n\nObject.prototype.toLoacaleString() 返回当前对象对应的本地字符串形式\n\nObject.prototype.hasOwnProperty() 判断某个属性是否为当前对象的属性，还是继承当前原型对象的属性\n\nObject.prototype.isPrototypeOf() 判断当前对象是否为另一个对象的原型\n\nObject.prototype.propertyIsEnumerable() 判断某个属性是否可枚举\n\n#### Function\n\nFunction普通函数\n\nArrow Function 箭头函数适用于需要匿名哈数的地方\n\n函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象\n\n不可以当作构造函数，也就是不可以使用new命令，否则会抛出一个错误\n\n不可以使用argument对象，该对象在函数体内不存在，如果要用可以用rest参数代替\n\nGenerator函数用来返回generator对象，并且它符合可迭代协议和迭代器协议，是一个协程函数，它通过yield命令来暂停某个进程，执行其他线程，通过Generator函数实现异步避免回调地狱，但是因为切换下个状态都要用next方法，所以不常用，一般用es6中async函数解决。\n\nAsync Function用来处理异步操作，避免了回调地狱，让异步代码看起来更友好。\n\nAsync函数调用async的时候会异步执行\n\n在async函数中使用await的时候，会执行当前代码才会往下继续执行其他代码，实现按照指定顺序执行异步操作\n\nasync函数会返回一个Promise\n\napply和call都是函数对象的方法，两者都可以改变函数运行时的this，这个是apply和call的主要使用的功能\n\napply和call不同在于，提供的参数格式不一样：apply需要的是一个参数数组，call需要的是参数列表\n\nbind与apply和call不同的是，apply和call是在每次调用的时候动态指定被调用函数的this和实参，apply与call自动帮我们对目标函数进行调用，而bind是创建一个新的绑定函数固定了目标函数的this值和部分实参\n\n立即执行函数表达式，是一个在定义时就会立即执行的JS函数(function(){})()\n\n第一部分是包围在圆括号运算符（）里的一个匿名函数，这个匿名函数拥有独立的词法作用域。这不仅避免了外界访问IIFE中的变量，而且也不会污染全局作用域。\n\n第二部分再一次使用（）创建了立即执行函数表达式，javaScript引擎到此直接执行函数\n\n符合以下两点的函数就是纯函数\n\n相同输入总是会返回相同的输出。返回的结果只依赖于输入的参数且于外部系统状态无关\n\n没有副作用。不会影响该函数作用域以外的外部状态（比如全局变量、参数）\n\n柯里化就是把接受多个参数的函数变成接受一个单一参数（最初函数的第一个参数）的函数，并且返回一个新的函数的技术，新函数接受余下参数并返回运算结果\n\n#### Date\n\n```javascript\n//-8小时\nvar cur=new Date(2018,2,25,14,6,38); //0~11代表1月~12月\nvar year=cur.getUTCFullYear(); \nvar month=cur.getUTCMonth();  \nvar day=cur.getUTCDate();\nvar hour=cur.getUTCHours();\nvar minutes=cur.getUTCMinutes();\nvar seconds=cur.getUTCSeconds();\nvar mseconds=cur.getUTCMilliseconds();\nconsole.log(\"时间为：\"+year+\"-\"+(month+1)+\"-\"+day+\" \"+hour+\":\"+minutes+\":\"+seconds+\":\"+mseconds);\n//打印结果\n时间为：2018-3-25 6:6:38:0\n\nvar cur=new Date(2018,2,25,14,6,38); //0~11代表1月~12月\nvar week=cur.getDay();\nvar arr=[\"星期一\",\"星期二\",\"星期三\",\"星期四\",\"星期五\",\"星期六\",\"星期天\"]\nconsole.log(\"本地时间是：\"+arr[week]);\nvar weekUTC=cur.getUTCDay();\nconsole.log(\"格林威治时间是：\"+arr[weekUTC]);\n//打印结果\n本地时间是：星期一\n格林威治时间是：星期一\n```\n\n#### Regex\n\n![image-20221213170250905](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213170250905.png)\n\ng:global--全文搜索，不添加，搜索到第一个匹配为止\n\ni:ignore case--忽略小写写，默认大小写敏感\n\nm:multiplelines--多行搜索\n\n#### Error\n\nSyntaxError 语法错误。多半是哪里的符号写错了\n\nReFerenceError 引用错误。根本没有创建过就去使用\n\nTypeError 类型错误。不是你的方法你去调用了\n\nRangeError 范围错误\n\n```javascript\ntry{\n//可能出错的代码;\n}catch(){\nconsole.log(err);//可以提示用户错误的原因是什么\n}//后续代码正常执行\nthrow new Error(\"抛出一个自定义的错误\")\n```\n\n### 值类型（基本类型）\n\n#### number\n\n**浮点数**\n\n数值包含小数点，而且小数点后面必须至少有一个数字。\n\n经典问题：0.1+0.2 ==0.3吗？答案是不等于\n\n因为在浮点数运算过程中存在舍入误差，之所以存在这种舍入错误，是因为使用了IEEE754，这种错误并非ECMAScript独有，只要是使用这种格式的语言都有这个问题\n\n**值的范围**\n\n正数，负数，0，Infinity\n\n最小值：Number.MIN_VALUE = 5e-324\n\n最大值：Number.MAX_VALUE = 1.797693134862315 7e+308\n\n数值超出JavaScript表示的范围：Infinity（正无穷大）-Infinity（负无穷大）\n\n确定数值是否为有限数：isFinite()函数\n\n**NaN**\n\n- 意思：不是数值\n- 表示本来要返回数值的操作失败了（而不是抛出错误）\n- 如何涉及NaN的操作始终返回NaN\n- NaN不等于包括NaN在内的任何值\n- isNaN()函数，判断传入其中的参数是否不是数值\n- isNaN()会尝试转换成数值\n\n**数值转换**\n\nNumber()函数，可用于任何数据类型\n\n![image-20221213171131994](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213171131994.png)\n\npareInt()函数会忽略字符串最前面的空格，第一个非空格字符开始转换，如果第一个字符不是数值字符、加号或减号，parseInt()立即返回NaN\n\nparseInt()函数可以接受第二个参数，用于指定底数\n\n```javascript\nparseInt(\"AF\", 16); // 175 提供了16进制参数，可以省略0x\nparseInt(\"AF\"); // NaN , 没有提供第二个参数，就不可以\n```\n\nparseFloat()和pareInt()函数类似。区别在于parseFloat()识别有效的小数点（也就是第一次出现的小数点，在后面的小数点就都忽略了），还有就是忽略字符串开头的零；parseFloat()只解析十进制值，不能指定底数，十六进制数值始终返回0\n\ntoFixed()保留小数点后N位（最后的结果是字符串）\n\nvalueOf()方法返回对象的数字字面量\n\ntoString()方法将数字转换为字符串\n\ntoLocalString()方法将数字转换为本地惯例格式数字的字符串\n\ntoExponential()方法返回数值四舍五入后的指数表示法(e表示法)的字符串表示，参数表示转换后的小数位数\n\noPrecision()方法接收一个参数，即表示数值的所有数字的位数(不包括指数部分)，自动调用toFixed()或toExponential()\n\n**string**\n\nJavascript采用UTF-16编码的Unicode字符集，Javascript中的字符串是由一组无符号的16位值组成的序列，最常用的Unicode字符都是通过16位的内码来表示的，并代表字符串的单个字符\n\n只要引用了字符传的属性，JavaScript就会将字符串通过new String()的方式转换为对象，这个对象继承了字符串的方法，一旦引用结束，这个新创建的对象就会被销毁。这个临时对象称之为包装对象，字符串（还有数字和布尔值）的属性都是只读的，并不能赋值，有别于其他的对象字符串是存放再堆内存里面的，一旦创建就不可更改，如果想改变某个变量保存的字符串，就必须销毁原来的字符串，再用一个新的来填充该变量\n\nString类型是字符串的包装类型，可以用String构造函数来创建\n\n```javascript\nvar stringObject = new String('hello world');\nvar stringText = 'hello world';\n```\n\n**String([value])**\n\n```javascript\nlet a = 111\nString(a) // '111'\n```\n\n[value].toString()\n\n```javascript\n转换数字的进制（2-36进制）\nconst a = 10\na.toString(2) //\"1010\"\na.toString(8) //\"12\"\na.toString(16) // \"a\"\nMath.random().toString(36).subString(3,7) // 生成四位数的随机验证码\n判断数据\nObject.prototype.toString.call(Array) // \"[object Function]\"\nObject.prototype.toString.call([]) // \"[object Array]\"\n```\n\n**charAt()**\n\n```javascript\n以单字符字符串的形式返回给定位置的那个字符\nvar stringValue = 'hello world';\nconsole.log(stringValue.charAt(1)); // 'e'\n```\n\n**charCodeAt**\n\n```javascript\n返回给定位置的字符所对应的字符编码\nvar stringValue = 'hello world';\nconsole.log(stringValue.charCodeAt(1)); // '101'\n```\n\n**concat()**\n\n```javascript\n将一个或者多个字符串拼接起来，返回拼接得到的字符串，可接受任意多个参数\nvar stringValue = 'hello world';\nconsole.log(stringValue.charCodeAt(1)); // '101'\n//实际情况中使用+拼接的情况更多\n```\n\n**slice(start,end)**\n\n```javascript\n截取字符串，返回一个新的字符串（当传入负值时，会默认加上原数组的长度）\nstart：指定子字符串的起始位置（可不传，不传返回原字符串）\nend：指定字符串到哪个位置结束（可不传，不传默认到原字符最后一个字符结束）\nvar stringValue = 'hello world';\nconsole.log(stringValue.slice()); // 'hello world';\nconsole.log(stringValue.slice(2)); // 'llo world'\nconsole.log(stringValue.slice(2, 6)); // 'llo '\nconsole.log(stringValue.slice(-9)); // 'llo world'\nconsole.log(stringValue.slice(2, -5)); // 'llo '\n```\n\n**suubstr(start,length)**\n\n```javascript\n截取字符串，返回一个新的子字符串（当第一个参数为负值时，会默认加上原数组的长度，第二个参数为负值时，会默认转为0）\nstart：指定子字符串的起始位置（可不传，不传则返回原字符串）\nlength：指定子字符串的长度（可不传，不传默认原字符串最后一个字符结束）\nvar stringValue = 'hello world';\nconsole.log(stringValue.substr()); // 'hello world';\nconsole.log(stringValue.substr(2)); // 'llo world'\nconsole.log(stringValue.substr(2, 6)); // 'llo wo'\nconsole.log(stringValue.substr(-2)); // 'ld'\nconsole.log(stringValue.substr(2, -6)); // ''\n```\n\n**substring(start,end)**\n\n```javascript\n截取字符串，返回一个新的子字符串（当传入负值时，会将所有负值转为0。如果start大于end,两个值会互相调换，保持start<end）\nstart：指定子字符串的起始位置（可不传，不传返回原字符串）\nend：指定字符串到哪里结束（可不传，不传默认到原字符串最后一个字符结束）\nvar stringValue = 'hello world';\nconsole.log(stringValue.substring()); // 'hello world';\nconsole.log(stringValue.substring(2)); // 'llo world'\nconsole.log(stringValue.substring(2, 6)); // 'llo '\nconsole.log(stringValue.substring(-3)); // 'hello world'\nconsole.log(stringValue.substring(2, -6)); // 'he'\n```\n\n**indexOf(char,start)和lastIndexOf(char, start)**\n\n```javascript\nindexOf从字符串的开头向后搜索子字符串，返回第一个子字符串的位置（未找到返回-1）\nlastIndexOf从字符串的末尾向前搜索子字符串，返回子字符串的位置（没找到则返回-1）\nchar：需要查找的字符串\nstart：从哪个位置开始向后查找，可不传\nvar stringValue = 'hello world';\nconsole.log(stringValue.indexOf('o')); // 4\nconsole.log(stringValue.lastIndexOf('o')); // 7\nconsole.log(stringValue.indexOf('o', 6)); // 7\nconsole.log(stringValue.lastIndexOf('o', 6)); // 4\n```\n\n**trim()**\n\n```javascript\n去除原始字符串中的前置及后缀空格，返回一个新的字符串\nvar stringValue = '  hello world  ';\nconsole.log(stringValue.trim()); // 'hello world'\nconsole.log(stringValue); // '  hello world  '\n```\n\n**toLowerCase()**\n\n```javascript\n将字符串转为小写\nvar stringValue = 'HELLO WORLD';\nconsole.log(stringValue.toLowerCase()); // 'hello world'\nconsole.log(stringValue.toLocaleLowerCase()); // 'hello world'\n```\n\n**toUpperCase()**\n\n```javascript\n将字符串转为大写\nvar stringValue = 'hello world';\nconsole.log(stringValue.toUpperCase()); // 'HELLO WORLD'\nconsole.log(stringValue.toLocalUpperCase()); // 'HELLO WORLD'\n```\n\n**match()**\n\n```javascript\nmatch只接受一个参数，要么是一个正则表达式，要么是一个RegExp对象，返回一个数组\nvar test = 'cat, bat, sat, fat';\nvar pattern = /.at/;\nvar matches = test.match(pattern);\nconsole.log(matches); // 输出匹配到的东西\n```\n\n**search()**\n\n```javascript\nsearch()只接受一个参数，要么是一个正则表达式，要么是一个RegExp对象\n返回字符串中第一个匹配的索引，如果没有，则返回-1\nvar test = 'cat, bat, sat, fat';\nvar index = test.search(/at/);\nconsole.log(index);\n```\n\n**replace()**\n\n```javascript\nreplace()接受两个参数，第一个参数可以是一个RegExp对象或一个字符串（这个字符串不会被转换成正则表达式），第二个参数可以是简化替换子字符串的操作\nvar test = 'cat, bat, sat, fat';\nconsole.log(test.replace('at', 'ond')); // 'cond, bat, sat, fat'\nconsole.log(test.replace(/at/g, 'ond')); // 'cond, bond, sond, fond'\n```\n\n**split()**\n\n```javascript\n可以基于指定的分隔符将一个字符串分割成多个字符串，返回一个数组\n第一个参数可以是一个字符串或一个RexExp对象\n第二个参数用于指定数组的大小，可不传\nvar test = 'red, blue, green, yellow';\nconsole.log(test.split(',')); // '['red', blue', 'green', 'yellow']\nconsole.log(test.split(',', 2)); // ['red', blue']\nconsole.log(test.split(/[^,]+/)); // ['', '', '', '']\n```\n\n##### **boolean**\n\nboolean只有两个值true和fasle\n\nJavaScript中的任何值都可以转换成布尔值，其中只有六个转换为false，他们分别是 “0、NaN、null、undefined、空字符串” ，其余的都是true\n\n![image-20221213172416788](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213172416788.png)\n\ntostring(),把布尔值转为字符串，并返回结果\n\n```javascript\nconst a = new Boolean(1) // Boolean {true}\na.toString() //‘true’\n```\n\nvalueOf()返回Boolean对象的原始值\n\n```javascript\nconst a = new Boolean(1) // Boolean {true}\na.valueOf() //true\n```\n\n**null/undefined**\n\n1. undefined不是关键字，而null是关键字\n2. undefined和null被转换为布尔值的时候，两者都为false;\n3. undefined在和null进行==比较时两者相等，全等于比较时两者不等\n4. 使用Number()对undefined和null进行类型转换,undefined为NaN，null为0\n5. undefined本质上是window的一个属性，而null是一个对象；\n6. null表示没有对象，即不应该有值，经常作用函数的参数，或作为原型链的重点。undefined表示缺少值，即应该有值，但是还没有赋予（变量提升时会默认赋值为undefined，函数参数为提供默认为undefined，函数的返回值默认为undefined）\n\n**symbol**\n\nES6引入了一种新的原始数据类型Symbol，表示独一无二的值，最大的用法就是用来定义对象的唯一属性名\n\n基本用法\n\nSymbol函数不能用new命令，因为Symbol是原始数据类型，不是对象。可以接受一个字符串作为参数，为新建的Symbol提供描述，用来描述在控制台或者作为字符串的时候使用，便于区分\n\n```javascript\nlet sy = Symbol('yy') // Symbol(kk)\ntypeof(sy)  //\"symbol\"\n//相同的参数Symbol（）放回的值不相等\nlet sy1 = Symbol('kk')\nsy === sy1 //false\n```\n\n使用场景\n\n作为属性名使用，由于每一个Symbol的值都是不相等的，所以Symbol作为对象的属性名，可以保证属性不重名\n\nSymbol作为对象属性名时不能用.运算符，要用方括号。因为.运算符后面是字符串，所以取到的是字符串sy属性，而不是Symbol值sy属性\n\n```javascript\nlet syObject = {};\nsyObject[sy] = \"kk\";\nsyObject[sy];  // \"kk\"\nsyObject.sy;   // undefined\n```\n\n在定义常量的时候，因为用字符串不能保证常量是独特的，这样会引起一些问题，但是使用Symbol定义常量，这样就可以保证这一组值都不相等，Symbol的值是唯一的，所以不会出现相同值的常量，即可以保证switch按照代码预想的方式执行。\n\nSymbol.for()\n\nSymbol.for()类似单例模式，首先会在全局搜索被登记的Symbol中是否有该字符串参数作为名称的Symbol值，如果有即返回该Symbol值，若没有则新建并返回一个以该字符串参数为名的Symbol值，并登记在全局环境中拱搜索\n\n```javascript\nlet yellow = Symbol(\"Yellow\");\nlet yellow1 = Symbol.for(\"Yellow\");\nyellow === yellow1;      // false\nlet yellow2 = Symbol.for(\"Yellow\");\nyellow1 === yellow2;     // true\n```\n\nSymbol.ketFor()\n\nSymbol.keyFor()返回一个已经登记的Symbol类型值的key，用来检测该字符作为名称的Symbol值是否已被登记\n\n```javascript\nlet yellow1 = Symbol.for(\"Yellow\");\nSymbol.keyFor(yellow1);    // \"Yellow\"\n```\n\n### JSON API\n\n#### JSON.stringify()\n\n使用方法 JSON.stringify(value,replacer?,space?)\n\n可选参数replacer用于转换参数value\n\n节点访问函数，会在值被转为字符串之前转换树节点的值\n\n```javascript\n//序列化时，碰到数值，则乘以2\nfunction replacer(key, value){\nif(typeof value === 'number'){\nvalue = 2 * value\n}\nreturn value\n}\n//调用\nJSON.stringify({ a: 5, b: [2, 3] }, replacer)\n//结果\n\"{\"a\":10,\"b\":[4,6]}\"\n```\n\n属性白名单，用于隐藏那些非数组对象内属性不在这个列表中的所有属性\n\n```javascript\nJSON.stringify({ foo: 1, bar: {foo: 1, bar: 1} }, ['bar'])\n//结果\n\"{\"bar\":{\"bar\":1}\"\n```\n\n可选参数space会影响输出格式，可以插入新行并通过数组和对象的嵌套增加缩进\n\n如果是数字，则在字符串化时每一级别缩进这个数字值的空格，小于0解释成0，大于10解释成10\n\n如果是一个字符串，则每一个级别会比上一个级别用该字符串形成的缩进（或该字符串的前十个字符）\n\n被JSON.stringify忽略的数据，只考虑自身枚举属性，忽略不被支持的值，即除了对象、数组、字符串、布尔值和null以外的任何值。如函数，Symbol值，undefined等，将返回undefined。如果属性值是这些值，该属性直接被忽略，在数组中被解析成null\n\n#### toJSON(key)方法\n\n如果一个被序列化的对象拥有toJSON方法，那么该toJSON方法就会覆盖该对象默认的序列化行为：不是那个对象被序列化，而是调用toJSON方法后的返回值会被序列化\n\n#### JSON.parse()\n\n使用方法JSON.parse(text,reviver?)\n\n\"\"string\"\"是不被js支持的，尽管虽然是标准的JSON字符串。你可以使用'\"string\"'代替。如果确实需要这样的行hi，可以使用JSON.stringify(\"\")\n\nrevier参数是一个节点访问函数。它可以用来转换解析后的数据\n\n### Math API\n\nMath.abs() 返回参数的绝对值\n\nMath.ceil() 向上取整，接受一个参数，返回大于该参数的最小整数\n\nMath.floor() 向下取整\n\nMath.max(n,m1...) 可接受多个参数，返回最大值\n\nMath.min(n,n1...) 可接受多个参数，返回最小值\n\nMath.pow(n,e) 指数运算，返回第一个参数为底数、第二个参数为幂的指数值\n\nMath.sqrt() 返回参数值的平方根。如果参数是一个负值，则返回NaN\n\nMath.log() 返回以e为底的自然对数值\n\nMath.exp() 返回e的指数，也就是常数e的参数次方\n\nMath.round() 四舍五入\n\nMath.random() 返回0-1之间的一个伪随机数，可能等于0，但是一定小于1\n\n### ES标准\n\n#### ES6\n\n**类**\n\n对于熟悉Java，object-c，c#等纯面向对象语言的开发者来说，都会对class有一种特殊的情怀。ES6引入了class，让JavaScript的面向对象编程更加简单和易于理解。\n\n通过生成实例对象的传统方法是通过构造函数\n\n```javascript\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return '(' + this.x + ', ' + this.y + ')';\n};\n\nvar p = new Point(1, 2);\n```\n\n实际上，ES6的class可以看作是一个语法糖，它的绝大部分功能，ES5都能做到，新的calss写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已，上面的代码用ES6的class改写如下\n\n```javascript\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n```\n\nES6的类，完全可以看作构造函数的另一种写法\n\n```javascript\nclass Point {\n  // ...\n}\n\ntypeof Point // \"function\"\nPoint === Point.prototype.constructor // true\n```\n\n上面的代码表明，类的数据类型就是函数，类本身就是指向构造函数\n\n使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致\n\n```javascript\nclass Bar {\n  doStuff() {\n    console.log('stuff');\n  }\n}\n\nconst b = new Bar();\nb.doStuff() // \"stuff\"\n```\n\n构造函数的prototype属性，在ES6的类上面继续存在。事实上，类的所有方法定义在类的prototype属性上面\n\n```javascript\nclass Point {\n  constructor() {\n    // ...\n  }\n\n  toString() {\n    // ...\n  }\n\n  toValue() {\n    // ...\n  }\n}\n\n// 等同于\n\nPoint.prototype = {\n  constructor() {},\n  toString() {},\n  toValue() {},\n};\n```\n\nconstructor()方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor()方法，如果没有显式定义，一个空的constructor()方法会被默认添加\n\n类的实例\n\n使用new命令生成类的实例，如果忘记加上new，像函数那样调用Class，将会报错\n\n```javascript\nclass Point {\n  // ...\n}\n\n// 报错\nvar point = Point(2, 3);\n\n// 正确\nvar point = new Point(2, 3);\n```\n\n#### 模块化\n\n模块的功能主要由export和import组成。每一个模块都有自己单独的作用域，模块之间的相互调用关系是通过export来规定模块对外暴露的接口，通过import来引用其他模块提供的接口。同时还为模块创造了命名空间，防止函数的命名冲突\n\nES6允许在一个模块中使用export来导出多个变量或函数\n\nES6将一个文件视为一个模块，上面的模块通过export向外输出了一个变量。一个模块也可以同时往外面输出多个变量。\n\n一条import语句可以同时导入默认函数和其他变量\n\nimport defaultMethod，{otherMethod} from ‘xxx.js’\n\n#### 箭头函数\n\n箭头函数的箭头=>之前是一个空括号、单个的参数名、或用括号包括起的参数名额，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）\n\n```javascript\n()=>1\nv=>v+1\n(a,b)=>a+b\n()=>{alert(\"foo\")}\ne=>{if(e===0){\nreturn 0}\nreturn 1000/e\n}\n```\n\n不论是箭头函数还是bind，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（臂如卸载监听器），那么你必须自己保存这个引用。\n\n#### 函数参数默认值\n\nES6支持在定义函数的时候为其设置默认值\n\n```javascript\nfunction foo(height = 50,color = 'red'){}\n```\n\n#### 模板字符串\n\nES6支持模板字符串，使得字符串的拼接更加的简洁、直观\n\n```javascript\n//不使用模板字符串\nvar name = 'Your name is' + first + '' + last + '.'\n//使用模板字符串\nvar name = `Your name is ${first} ${last}.`\n```\n\n#### 解构赋值\n\n结构赋值语法是JavaScript的一种表达式，可以方便的从数组或者对象中快速提取值赋给定义的变量\n\n从数组中获取值并赋值到变量中，变量的顺序与数组中对象顺序对应\n\n```javascript\nvar foo [\"one\",\"two\",\"three\",\"four\"]\nvar [one,two,three] = foo\n\n//如果需要忽略某些值，可以按照下面的写法获取想要的值\nvar [fisrt, , , last] = foo\n```\n\n如果从数组中没有取到值，你可以为变量设置一个默认值\n\n```javascript\nvar a,b\n[a=5,b=7] = [1]\n```\n\n通过解构赋值可以方便的交换两个变量的值\n\n```javascript\nvar a = 1\nvar b = 3\n[a,b] = [b,a]\n```\n\n获取对象中的值\n\n```javascript\nconst student = {\n    name:'Ming',\n    age:'18',\n    city:'Shanghai'\n}\nconst {name.age,city} = student\n```\n\n#### 延展操作符\n\n延展操作符...可以在函数调用/数组构造时，将数组表达式或者string在语法层面展开；还可以在构造对象时，将对象表达式按key-value的方式展开\n\n```javascript\n//函数调用\nmyFunction(...iterableObj)\n//数组构造或字符串\n[...iterableObj,'4',...'hello',6]\n//构造对象时，进行克隆或者属性拷贝（ECMAScript2018规范新特性）\nlet objClone = {...obj}\n```\n\n应用场景\n\n```javascript\n//在函数调用时候使用延展操作符\nfunction sum(x,y,z){\n    return x+y+z\n}\nconst numbers = [1,2,3]\nconsole.log(sum.apply(null,numbers))\nconsole.log(sum(...numbers))\n//构造数组\nconst students = ['jine','Tom']\nconst persons = ['Tony',...students,'Aaron','Anna']\n//数组拷贝\nvar arr = [1,2,3]\nvar arr2 = [...arr]\narr2.push(4)\n//连接多个数组\nvar arr1 = [0,1,2]\nvar arr2 = [3,4,5]\nvar arr3 = [...arr1,...arr2]\n//等同于\nvar arr4 = arr1.concat(arr2)\n//在ECMAScript 2018中延展操作符增加了对对象的支持\nvar obj1 = {foo:'bar',x:42}\nvar obj2 = {foo:'bar',y:13}\nvar cloneObj = {...obj1}\nvar mergeObj = {..obj1,...obj2}\n<CustomComponent name:'jine',age={21} />\n//等同于\nconst params = {\n    name:'jine',\n    age:21\n}\n<CustomComponent ...params />\n//配合解构赋值避免传入一些不需要的参数\nvar params = {\n    name：'123',\n    title:'456',\n    type:'aaa'\n}\nvar {type,...other} = params\n<CustomComponent type='normal' number={2},{...ohter} />\n//等同于\n<CustomComponent type='normal' number={2} name='123',title='456' />\n```\n\n#### 对象属性简写\n\n在ES6中允许我们在设置一个对象的属性的时候不指定属性名\n\n```javascript\n//不使用ES6\nconst name='Ming',age='18',city='Shanghai'\nconst student = {\n    name:name,\n    age:age,\n    city:city\n}\n//使用ES6\nconst name='Ming',age:'18',city='Shanghai'\nconst student = {\n    name,\n    age,\n    city\n}\n```\n\n#### Promise\n\nPromise是异步编程的一种解决方案，比传统的解决方案callback更加的优雅。它最早由社区提出和实现的，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象\n\n```javascript\n//不适用ES6，嵌套两个setTimeout\nsettimeout(function(){\n    console.log('Hello')\n    setTimeout(function(){\n        console.log('Hello')\n        setTimeout(function(){\n            console.log('Hi')        \n        },1000)    \n    })\n},1000)\n//使用ES6\nvar waitSecond = new Promise(function(resolve,reject){\n    setTimeout(resolve,1000)\n})\nwaisecond\n    .then(function(){\n        console.log(\"Hello\")\n        return waitSecond    \n    })\n    .then(function(){\n        console.log(\"Hi\")    \n  })\n```\n\n#### Let与Const\n\n在之前JS是没有块级作用域的，const与let填补了这方面的空白，const与let都是块级作用域\n\n### Qs API\n\nQs是一个流行的查询参数序列化和解析库。可以将一个普通的object序列化成一个查询字符串，或者反过来将一个查询字符串解析成一个object，而且支持复杂的嵌套\n\nQs.parse('x[]=1') //{x:['1']}\n\nQS.stringify({x:[1]}) //x%5B0%5D=1\n\nignoreQueryPrefix和addQueryPrefix\n\nignoreQueryPrefix这个参数可以自动帮我们过滤掉location.search前面的？，然后再解析，addQueryPrefix设为true可以在序列化的时候给我们加上？\n\n```javascript\n/ 解析\nQs.parse('?x=1') // {?x: \"1\"}\nQs.parse('?x=1', {ignoreQueryPrefix: true}) //  {x: \"1\"}\n// 序列化\nQs.stringify({x: \"1\"}) //  x=1\nQs.parse({x: \"1\"}, {addQueryPrefix: true}) //  ?x=1\n```\n\n数组解析和序列化\n\n数组序列化有几种方式：indices，brackets，repeat，comma，用来控制字符串的生成格式\n\n```javascript\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'indices' })\n// 'a[0]=b&a[1]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'brackets' })\n// 'a[]=b&a[]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'repeat' })\n// 'a=b&a=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'comma' })\n// 'a=b,c'\n```\n\n以上四种方式，序列化得到的结果越来越来精简，但是当面对嵌套数组时，却会导致不同程序的信息丢失，而且丢失的越来月严重\n\n```javascript\nqs.parse(qs.stringify({ a: [['b'], 'c'] }, { arrayFormat: 'indices' })) // { a: [['b'], 'c'] }\nqs.parse(qs.stringify({ a: [['b'], 'c'] }, { arrayFormat: 'brackets' })) // {a: [\"b\", \"c\"]}\nqs.parse(qs.stringify({ a: [['b'], 'c'] }, { arrayFormat: 'repeat' })) // {a: [\"b\", \"c\"]}\nqs.parse(qs.stringify({ a: [['b'], 'c'] }, { arrayFormat: 'comma' })) // {a: \"b,c\"}\n```\n\ndelimiter可以控制哪种字符作为分隔符，由于cookie的格式是使用，一个使用的例子是用来解析cookie\n\n```javascript\ndocument.cookie // \"_ga=GA1.2.806176131.1570244607; _jsuid=1335121594; _gid=GA1.2.1453554609.1575990858\"\nQs.parse(document.cookie, {delimiter:'; '})\n```\n\n### 进制\n\n#### 八进制\n\n八进制字面值的第一位必须是0，然后是八进制数字序列（0-7）.如果字面值中的数值超出了范围，那么前导0将被忽略，后面的数值被当作十进制数解析\n\n注意由于某些JavaScript的实现不支持八进制字面量，且八进制数字面量在严格模式下是无效，会导致JavaScript抛出错误\n\n#### 十六进制\n\n十六进制字面量的前两位必须是0X，后跟十六进制数字序列（0-9，a-f），字母可大可小。果十六进制中的数值超出范围，如出现g、h等会报错\n\n#### 二进制\n\n二进制字面值的前两位必须0b，如果出现除0、1以外的数字会报错\n\n### JS模块化\n\n#### commomJS\n\n**特点**\n\n获取依赖模块用同步加载方式，适合服务端，在浏览器使用会出现浏览器假死的情况，因为在服务端，所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间\n\n模块可以多次加载（多次使用require加载），但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果\n\n**使用**\n\n```javascript\n/*定义模块*/\n//example.js\nvar n = 1;\nfunction sayHello( name ){\n    var name = name || \"Tom\";\n    return \"Hello~\"+name\n}\nfunction addFn(val){\n    var val = val.x+val.y;\n    return val\n}\n/*使用module.exports的方法*/\nmodule.exports ={\n    n:n,\n    sayHello:sayHello,\n    addFn:addFn\n}\n/*\n    使用exports的方法\n    exports.n=n;\n    exports.sayHello=sayHello\n    exports.addFn=addFn\n\n/*\n    两种输出方式是等价的\n*/\n\n/*使用模块*/\n//main.js\nvar example = require('./example.js');/*同步执行*/\nvar addNum = {\n    \"x\":10,\n    \"y\":5\n}\nconsole.log( example )//查看example输出的对外模块接口；\nconsole.log( example.n )//1;\nconsole.log( example.sayHello(\"Jack\") )// \"Hello~ Jack\";\nconsole.log( example.addFn(addNum) ) //15;\n```\n\n#### AMD\n\n**特点**\n\n获取依赖模块异步加载方式，适合浏览器端\n\n**使用**\n\n```javascript\n/*定义模块*/\n/*\n    define(id?, dependencies?, factory)\n    id:字符串，模块名称(可选)\n    dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式\n    factory: 工厂方法，返回一个模块函数\n*/\n//example.js\n/*在定义模块时，也使用了其他依赖模块*/\ndefine(['Lib'], function(Lib){\n　　　　function foo(){\n　　　　　　Lib.doSomething();\n　　　　}\n　　　　return {\n　　　　　　foo : foo\n　　　　};\n　　});\n　　\n/*使用模块*/\n/*\nrequire( dependencies, factory)\n    dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式\n    factory: 在这里使用模块完成业务\n*/\n/*\n    将依赖的模块全部加载执行以后执行回调\n*/\nrequire(['./a', './b'], function (m1,m2) {\n　m1.add(2, 3);\n  m2.add(2, 3);\n});\n```\n\n#### CMD\n\n**特点**\n\n延迟加载执行\n\n**使用**\n\n```javascript\ndefine(function(require, exports, module) {\n  // 模块代码\n    var a = require('./a');\n  //require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口。\n  \n    //异步加载一个模块，在加载完成时，执行回调\n    require.async('./b', function(b) {\n        b.doSomething();\n    });\n    \n    //异步加载多个模块，在加载完成时，执行回调\n    require.async(['./c', './d'], function(c, d) {\n        c.doSomething();\n        d.doSomething();\n    });\n    \n    \n    //模块输出\n     return {\n        foo: 'bar',\n        doSomething: function() {}\n     };\n    \n    // 对外提供 foo 属性\n    exports.foo = 'bar';\n\n    // 对外提供 doSomething 方法\n    exports.doSomething = function() {};\n    \n    // 错误用法！！!\n      exports = {\n        foo: 'bar',\n        doSomething: function() {}\n      };\n    // 正确写法\n      module.exports = {\n        foo: 'bar',\n        doSomething: function() {}\n      };\n/*\n    exports 仅仅是 module.exports 的一个引用。在 factory 内部给 exports 重新赋值时，并不会改变 module.exports 的值。因此给 exports 赋值是无效的，不能用来更改模块接口。\n*/\n});\n```\n\n#### ES6 Moubule\n\n**特点**\n\nexport指令导出接口，以import引入模块\n\nimport的语法和require不同，而且import必须放在文件的最开始，且前面不允许有其他逻辑代码，这和其他所有的编程语言风格一致\n\n**使用**\n\n```javascript\nexport var m = 1;\n// 等价于\nvar m = 1;\nexport { m }\n\nexport const student = {\n  name: 'Megan',\n  age: 18\n}\n// 等价于\nconst obj = {\n  id: 1,\n  value: 'lalala'\n};\nexport { obj };\n\nexport function sun(a, b) {\n  return a + b;\n}\n// 等价于\nfunction sum(a, b){\n  return a + b;\n}\nexport { sum };\nimport { sum } from xxxx\n\nexport default function() {}\n \n// 等效于：\nfunction a() {};\nexport {a as default};\n\nimport  xxx  from xxxx //可以省去花括号{}。\n// 等效于，或者说就是下面这种写法的简写，是同一个意思\nimport { default as xxx } from xxxx;\n```\n\n```javascript\n//一个文件即模块中只能存在一个export default语句，导出一个当前模块的默认对外接口\nexport default var i = 0;\n//使用默认式\nimport variable from './exportDemo';\n//同时使用命名式和默认式\nimport variable, { sum, boy } from './exportDemo';\n```\n\n```javascript\n//导入一个模块，但不进行任何绑定：\nimport \"my-module\";\n```\n\n```javascript\n//在同一个模块可以同时使用两种导出方式\nexport function sun(a, b) {\n  return a + b;\n}\nexport default {\n  install,\n  DottedTitle,\n};\n```\n\n","source":"_posts/JavaScirpt.md","raw":"---\ntitle: JavaScript语言基础\ndate: 2022-12-12 10:36:15\ntags: 学习\ncategories: 前端\ntypora-copy-images-to: upload\ntop: 999\n---\n\n### 区分基本类型和对象类型\n\n#### 基本类型不可变性\n\n在ECMAScript标准中，它们被定义为primitive value，即原始值，代表值本身是不可被改变的。\n\n在JavaScript中，每一个变量在内存中都需要一个空间来存储\n\n<!--more-->\n\n内存空间被分为两种，栈内存和堆内存\n\n栈内存的特点：\n\n- 存储的值大小固定\n\n- 空间较小\n\n- 可以直接操作其保存的变量，运行效率高\n  \n- 由系统自动分配存储空间\n\n由于栈中的内存空间的大小是固定的，那么注定了存储栈中的变量就是不可变的\n\n### 引用类型\n\n- 存储的值大小不定，可动态调整\n\n- 空间较大，运行效率低\n\n- 无法直接操作其内部存储，使用引用地址读取\n\n- 通过代码进行分配空间\n\n相对于上面具有不可变性的原始类型，我习惯把对象成为引用类型，引用类型的值实际存储在堆内存中，它在栈中值存储了一个固定长度的地址，这个地址指向堆内存中的值\n\n#### 复制\n\n当我们把一个变量的值复制到另一个变量上时，原始类型和引用类型的表现是不一样的\n\n**原始类型**\n\n内存中有一个变量name，值为ConardLi。我们从变量name复制出一个变量name2，此时在内存中创建了一块新的空间用于存储ConardLi，虽然两者值都是相同的，但是两者指向的内存空间完全不同，这两个量参与任何操作都互不影响。\n\n```javascript\nvar name = 'fsang';\nvar name2 = name;\nname2 = 'code秘密花园';\nconsole.log(name); // fsang;\n```\n\n![image-20221213164248277](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213164248277.png)\n\n**引用类型**\n\n当我们复制引用类型的变量时，实际上复制的是栈中存储的地址，所以复制出来的obj2实际上和obj指向的堆中同一个对象。因此，我们改变其中任何一个变量的值，另一个变量都会收到影响，这也是为什么会有深拷贝和浅拷贝的原因\n\n```javascript\nvar obj = {name:'ConardLi'};\nvar obj2 = obj;\nobj2.name = 'code秘密花园';\nconsole.log(obj.name); // code秘密花园\n```\n\n![image-20221213164404630](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213164404630.png)\n\n#### 比较\n\n对于原始类型，比较时会直接比较他们的值，如果值相等，即返回true\n\n对于引用类型，比较时会比较他们的引用地址，虽然两个变量在堆中存储的对象具有的属性都是相等的，但是它们被存储在了不同的存储空间，因此比较值为false\n\n```javascript\nvar name = 'ConardLi';\nvar name2 = 'ConardLi';\nconsole.log(name === name2); // true\nvar obj = {name:'ConardLi'};\nvar obj2 = {name:'ConardLi'};\nconsole.log(obj === obj2); // false\n```\n\n![image-20221213164453686](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213164453686.png)\n\n#### 值传递和引用传递\n\n```javascript\nlet name = 'ConardLi';\nfunction changeValue(name){\n  name = 'code秘密花园';\n}\nchangeValue(name);\nconsole.log(name);\n```\n\n执行上面的代码，如果最终打印出来的name是'ConarLi'，没有改变，说明函数参数传递的是变量的值，即值传递。如果最终打印的是'code秘密花园'，内书内部的操作可以改变传入的变量，那么说明函数参数传递的是引用，即引用传递。\n\n很明显，上面的执行结果是'ConarLi'，即函数参数仅仅是被传入变量复制的一个局部变量，改变这个局部变量不会对外部变量产生影响。\n\n```javascript\nlet obj = {name:'ConardLi'};\nfunction changeValue(obj){\n  obj.name = 'code秘密花园';\n}\nchangeValue(obj);\nconsole.log(obj.name); // code秘密花园\n```\n\n上面的代码可能会产生疑惑，是不是参数是引用类型就是引用传递呢\n\n首先明确一点，ECMAScript中所有的函数的参数都是按值传递的\n\n当函数参数是引用类型时，同样将参数复制了一个副本到局部变量，只不过复制的这个副本是指向堆内存中的地址，我们在函数内部对对象的属性进行操作，实际上和外部变量指向堆内存中的值相同，但是这并不代表着引用传递\n\n```javascript\nlet obj = {};\nfunction changeValue(obj){\n  obj.name = 'ConardLi';\n  obj = {name:'code秘密花园'};\n}\nchangeValue(obj);\nconsole.log(obj.name); // ConardLi\n```\n\n函数参数传递的并不是变量的引用，而是变量拷贝的副本，当变量是原始类型时，这个副本就是值本身，当变量是引用类型时，这个副本是指向堆内存的地址。\n\n最后注意：函数参数都是按照值传递的\n\n### 引用数据类型(对象类型)\n\n#### Array\n\n**创建数组的方法**\n\nconst arr = [1,2,3]// 数组字面量\n\nconst arr = [,,,]// 三元素空位数组（hole array）\n\nconst arr = new Array(4)// [,,,,]\n\nconst arr = new Array(4,2)// [4,2]\n\nconst arr = Array.of(1,2,3)// [1,2,3]\n\nconst arr = Array.of(4)// [4]\n\n**操作数组的方法**\n\nconcat() 连接两个或多个数组，并返回已连接数组的副本\n\ncopyWithin() 将数组中的数组元素复制到指定位置或从指定位置复制\n\nentries() 返回键 / 值对数组迭代对象\n\nevery() 检查数组中的每一个元素是否通过测试\n\nfill() 用静态值填充数组中的元素\n\nfilter() 使用数组中通过测试的每个元素创建新数组\n\nfind() 返回数组中第一个通过测试的元素的值\n\nfindIndex() 返回数组中通过测试的第一个元素的索引\n\nforEach() 为每个数组调用函数\n\nArray.from() 方法用于通过拥有 length 属性的对象或可迭代的对象来返回一个数组\n\nincludes() 检查数组是否包含指定的元素\n\nindexOf() 在数组中搜索元素并返回其位置\n\njoin() 将数组的所有元素连接成一个字符串\n\nkeys() 返回Array Iteration对象，包含原始数组的键\n\nlastindexOf() 在数组中搜索元素，从末尾开始，并返回其位置\n\nmap() 使用为每个数组元素调用函数的结果创建新数组\n\npop() 删除数组的最后一个元素，并返回该元素\n\npush() 将新元素添加到数组的末尾，并返回新的长度\n\nreduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。数组的值减为单个值\n\nreduceRight() 方法接收一个函数作为累加器，数组中的每个值（从右到左）开始缩减，最终计算为一个值。数组的值减为单个值\n\nreverse() 反转数组中元素的顺序\n\nshift() 删除数组的第一个元素，并返回该元素\n\nslice() 选择数组的一部分，并返回该元素\n\nsome() 检查数组中的任意元素是否通过测试\n\nsort() 对数组的元素进行排序\n\nsplice() 用于添加或删除数组中的元素\n\ntoString() 将数组转为字符串，并返回结果\n\nunshift() 将新元素添加到开头，并返回新的长度\n\nvalueOf() 返回数组的元素值\n\nflat() 将嵌套数组转成一维数组\n\n#### Object\n\nJavaScript对象的原生方法分成两类：Object本身的方法和Object的实例方法\n\nObject本身的方法就是直接定义在Object的方法。如Object.print = function (o) => {onsole.log(o)}\n\nObject的实例方法就是Object原型对象Object.prototype上的方法，可以直接被Object实例直接使用。如Object.prototype.print = function () =>{console.log(this)}   var obj = new Object(); obj.ptrint()\n\nObject.keys() 参数是一个对象，返回该对象自身的所有属性名\n\nObject.balues() 返回一个数组，成员是参数对象自身的所有可遍历属性的键值。与Object.keys相对接\n\nObject.entries() 返回一个数组，成员是参数对象自身的所有可遍历属性的键值对数组\n\nObject.getOwnPropertyDescriptor() 获取某个属性的描述对象\n\nObject.defineProperty()通过描述对象，定义某个属性\n\nObject.defineProperties() 通过描述对象，定义多个属性\n\nObject.preventExtensions() 防止对象扩展\n\nObject.isExtensible() 判断对象是否可扩展\n\nObject.seal() 禁止对象配置\n\nObject.isSealed() 判断一个对象是否可配置\n\nObject.freeze() 冻结一个对象\n\nObject.isFrozen() 判断一个对象是否被冻结\n\nObject.create() 该方法可以指定对象和属性，返回一个新的对象\n\nObject.gerPrototypeOf() 获取对象的Prototype对象\n\nObject.prototype.valueOf() 返回当前对象对应的值\n\nObject.prototype.toString() 返回当前对象对应的字符串形式\n\nObject.prototype.toLoacaleString() 返回当前对象对应的本地字符串形式\n\nObject.prototype.hasOwnProperty() 判断某个属性是否为当前对象的属性，还是继承当前原型对象的属性\n\nObject.prototype.isPrototypeOf() 判断当前对象是否为另一个对象的原型\n\nObject.prototype.propertyIsEnumerable() 判断某个属性是否可枚举\n\n#### Function\n\nFunction普通函数\n\nArrow Function 箭头函数适用于需要匿名哈数的地方\n\n函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象\n\n不可以当作构造函数，也就是不可以使用new命令，否则会抛出一个错误\n\n不可以使用argument对象，该对象在函数体内不存在，如果要用可以用rest参数代替\n\nGenerator函数用来返回generator对象，并且它符合可迭代协议和迭代器协议，是一个协程函数，它通过yield命令来暂停某个进程，执行其他线程，通过Generator函数实现异步避免回调地狱，但是因为切换下个状态都要用next方法，所以不常用，一般用es6中async函数解决。\n\nAsync Function用来处理异步操作，避免了回调地狱，让异步代码看起来更友好。\n\nAsync函数调用async的时候会异步执行\n\n在async函数中使用await的时候，会执行当前代码才会往下继续执行其他代码，实现按照指定顺序执行异步操作\n\nasync函数会返回一个Promise\n\napply和call都是函数对象的方法，两者都可以改变函数运行时的this，这个是apply和call的主要使用的功能\n\napply和call不同在于，提供的参数格式不一样：apply需要的是一个参数数组，call需要的是参数列表\n\nbind与apply和call不同的是，apply和call是在每次调用的时候动态指定被调用函数的this和实参，apply与call自动帮我们对目标函数进行调用，而bind是创建一个新的绑定函数固定了目标函数的this值和部分实参\n\n立即执行函数表达式，是一个在定义时就会立即执行的JS函数(function(){})()\n\n第一部分是包围在圆括号运算符（）里的一个匿名函数，这个匿名函数拥有独立的词法作用域。这不仅避免了外界访问IIFE中的变量，而且也不会污染全局作用域。\n\n第二部分再一次使用（）创建了立即执行函数表达式，javaScript引擎到此直接执行函数\n\n符合以下两点的函数就是纯函数\n\n相同输入总是会返回相同的输出。返回的结果只依赖于输入的参数且于外部系统状态无关\n\n没有副作用。不会影响该函数作用域以外的外部状态（比如全局变量、参数）\n\n柯里化就是把接受多个参数的函数变成接受一个单一参数（最初函数的第一个参数）的函数，并且返回一个新的函数的技术，新函数接受余下参数并返回运算结果\n\n#### Date\n\n```javascript\n//-8小时\nvar cur=new Date(2018,2,25,14,6,38); //0~11代表1月~12月\nvar year=cur.getUTCFullYear(); \nvar month=cur.getUTCMonth();  \nvar day=cur.getUTCDate();\nvar hour=cur.getUTCHours();\nvar minutes=cur.getUTCMinutes();\nvar seconds=cur.getUTCSeconds();\nvar mseconds=cur.getUTCMilliseconds();\nconsole.log(\"时间为：\"+year+\"-\"+(month+1)+\"-\"+day+\" \"+hour+\":\"+minutes+\":\"+seconds+\":\"+mseconds);\n//打印结果\n时间为：2018-3-25 6:6:38:0\n\nvar cur=new Date(2018,2,25,14,6,38); //0~11代表1月~12月\nvar week=cur.getDay();\nvar arr=[\"星期一\",\"星期二\",\"星期三\",\"星期四\",\"星期五\",\"星期六\",\"星期天\"]\nconsole.log(\"本地时间是：\"+arr[week]);\nvar weekUTC=cur.getUTCDay();\nconsole.log(\"格林威治时间是：\"+arr[weekUTC]);\n//打印结果\n本地时间是：星期一\n格林威治时间是：星期一\n```\n\n#### Regex\n\n![image-20221213170250905](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213170250905.png)\n\ng:global--全文搜索，不添加，搜索到第一个匹配为止\n\ni:ignore case--忽略小写写，默认大小写敏感\n\nm:multiplelines--多行搜索\n\n#### Error\n\nSyntaxError 语法错误。多半是哪里的符号写错了\n\nReFerenceError 引用错误。根本没有创建过就去使用\n\nTypeError 类型错误。不是你的方法你去调用了\n\nRangeError 范围错误\n\n```javascript\ntry{\n//可能出错的代码;\n}catch(){\nconsole.log(err);//可以提示用户错误的原因是什么\n}//后续代码正常执行\nthrow new Error(\"抛出一个自定义的错误\")\n```\n\n### 值类型（基本类型）\n\n#### number\n\n**浮点数**\n\n数值包含小数点，而且小数点后面必须至少有一个数字。\n\n经典问题：0.1+0.2 ==0.3吗？答案是不等于\n\n因为在浮点数运算过程中存在舍入误差，之所以存在这种舍入错误，是因为使用了IEEE754，这种错误并非ECMAScript独有，只要是使用这种格式的语言都有这个问题\n\n**值的范围**\n\n正数，负数，0，Infinity\n\n最小值：Number.MIN_VALUE = 5e-324\n\n最大值：Number.MAX_VALUE = 1.797693134862315 7e+308\n\n数值超出JavaScript表示的范围：Infinity（正无穷大）-Infinity（负无穷大）\n\n确定数值是否为有限数：isFinite()函数\n\n**NaN**\n\n- 意思：不是数值\n- 表示本来要返回数值的操作失败了（而不是抛出错误）\n- 如何涉及NaN的操作始终返回NaN\n- NaN不等于包括NaN在内的任何值\n- isNaN()函数，判断传入其中的参数是否不是数值\n- isNaN()会尝试转换成数值\n\n**数值转换**\n\nNumber()函数，可用于任何数据类型\n\n![image-20221213171131994](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213171131994.png)\n\npareInt()函数会忽略字符串最前面的空格，第一个非空格字符开始转换，如果第一个字符不是数值字符、加号或减号，parseInt()立即返回NaN\n\nparseInt()函数可以接受第二个参数，用于指定底数\n\n```javascript\nparseInt(\"AF\", 16); // 175 提供了16进制参数，可以省略0x\nparseInt(\"AF\"); // NaN , 没有提供第二个参数，就不可以\n```\n\nparseFloat()和pareInt()函数类似。区别在于parseFloat()识别有效的小数点（也就是第一次出现的小数点，在后面的小数点就都忽略了），还有就是忽略字符串开头的零；parseFloat()只解析十进制值，不能指定底数，十六进制数值始终返回0\n\ntoFixed()保留小数点后N位（最后的结果是字符串）\n\nvalueOf()方法返回对象的数字字面量\n\ntoString()方法将数字转换为字符串\n\ntoLocalString()方法将数字转换为本地惯例格式数字的字符串\n\ntoExponential()方法返回数值四舍五入后的指数表示法(e表示法)的字符串表示，参数表示转换后的小数位数\n\noPrecision()方法接收一个参数，即表示数值的所有数字的位数(不包括指数部分)，自动调用toFixed()或toExponential()\n\n**string**\n\nJavascript采用UTF-16编码的Unicode字符集，Javascript中的字符串是由一组无符号的16位值组成的序列，最常用的Unicode字符都是通过16位的内码来表示的，并代表字符串的单个字符\n\n只要引用了字符传的属性，JavaScript就会将字符串通过new String()的方式转换为对象，这个对象继承了字符串的方法，一旦引用结束，这个新创建的对象就会被销毁。这个临时对象称之为包装对象，字符串（还有数字和布尔值）的属性都是只读的，并不能赋值，有别于其他的对象字符串是存放再堆内存里面的，一旦创建就不可更改，如果想改变某个变量保存的字符串，就必须销毁原来的字符串，再用一个新的来填充该变量\n\nString类型是字符串的包装类型，可以用String构造函数来创建\n\n```javascript\nvar stringObject = new String('hello world');\nvar stringText = 'hello world';\n```\n\n**String([value])**\n\n```javascript\nlet a = 111\nString(a) // '111'\n```\n\n[value].toString()\n\n```javascript\n转换数字的进制（2-36进制）\nconst a = 10\na.toString(2) //\"1010\"\na.toString(8) //\"12\"\na.toString(16) // \"a\"\nMath.random().toString(36).subString(3,7) // 生成四位数的随机验证码\n判断数据\nObject.prototype.toString.call(Array) // \"[object Function]\"\nObject.prototype.toString.call([]) // \"[object Array]\"\n```\n\n**charAt()**\n\n```javascript\n以单字符字符串的形式返回给定位置的那个字符\nvar stringValue = 'hello world';\nconsole.log(stringValue.charAt(1)); // 'e'\n```\n\n**charCodeAt**\n\n```javascript\n返回给定位置的字符所对应的字符编码\nvar stringValue = 'hello world';\nconsole.log(stringValue.charCodeAt(1)); // '101'\n```\n\n**concat()**\n\n```javascript\n将一个或者多个字符串拼接起来，返回拼接得到的字符串，可接受任意多个参数\nvar stringValue = 'hello world';\nconsole.log(stringValue.charCodeAt(1)); // '101'\n//实际情况中使用+拼接的情况更多\n```\n\n**slice(start,end)**\n\n```javascript\n截取字符串，返回一个新的字符串（当传入负值时，会默认加上原数组的长度）\nstart：指定子字符串的起始位置（可不传，不传返回原字符串）\nend：指定字符串到哪个位置结束（可不传，不传默认到原字符最后一个字符结束）\nvar stringValue = 'hello world';\nconsole.log(stringValue.slice()); // 'hello world';\nconsole.log(stringValue.slice(2)); // 'llo world'\nconsole.log(stringValue.slice(2, 6)); // 'llo '\nconsole.log(stringValue.slice(-9)); // 'llo world'\nconsole.log(stringValue.slice(2, -5)); // 'llo '\n```\n\n**suubstr(start,length)**\n\n```javascript\n截取字符串，返回一个新的子字符串（当第一个参数为负值时，会默认加上原数组的长度，第二个参数为负值时，会默认转为0）\nstart：指定子字符串的起始位置（可不传，不传则返回原字符串）\nlength：指定子字符串的长度（可不传，不传默认原字符串最后一个字符结束）\nvar stringValue = 'hello world';\nconsole.log(stringValue.substr()); // 'hello world';\nconsole.log(stringValue.substr(2)); // 'llo world'\nconsole.log(stringValue.substr(2, 6)); // 'llo wo'\nconsole.log(stringValue.substr(-2)); // 'ld'\nconsole.log(stringValue.substr(2, -6)); // ''\n```\n\n**substring(start,end)**\n\n```javascript\n截取字符串，返回一个新的子字符串（当传入负值时，会将所有负值转为0。如果start大于end,两个值会互相调换，保持start<end）\nstart：指定子字符串的起始位置（可不传，不传返回原字符串）\nend：指定字符串到哪里结束（可不传，不传默认到原字符串最后一个字符结束）\nvar stringValue = 'hello world';\nconsole.log(stringValue.substring()); // 'hello world';\nconsole.log(stringValue.substring(2)); // 'llo world'\nconsole.log(stringValue.substring(2, 6)); // 'llo '\nconsole.log(stringValue.substring(-3)); // 'hello world'\nconsole.log(stringValue.substring(2, -6)); // 'he'\n```\n\n**indexOf(char,start)和lastIndexOf(char, start)**\n\n```javascript\nindexOf从字符串的开头向后搜索子字符串，返回第一个子字符串的位置（未找到返回-1）\nlastIndexOf从字符串的末尾向前搜索子字符串，返回子字符串的位置（没找到则返回-1）\nchar：需要查找的字符串\nstart：从哪个位置开始向后查找，可不传\nvar stringValue = 'hello world';\nconsole.log(stringValue.indexOf('o')); // 4\nconsole.log(stringValue.lastIndexOf('o')); // 7\nconsole.log(stringValue.indexOf('o', 6)); // 7\nconsole.log(stringValue.lastIndexOf('o', 6)); // 4\n```\n\n**trim()**\n\n```javascript\n去除原始字符串中的前置及后缀空格，返回一个新的字符串\nvar stringValue = '  hello world  ';\nconsole.log(stringValue.trim()); // 'hello world'\nconsole.log(stringValue); // '  hello world  '\n```\n\n**toLowerCase()**\n\n```javascript\n将字符串转为小写\nvar stringValue = 'HELLO WORLD';\nconsole.log(stringValue.toLowerCase()); // 'hello world'\nconsole.log(stringValue.toLocaleLowerCase()); // 'hello world'\n```\n\n**toUpperCase()**\n\n```javascript\n将字符串转为大写\nvar stringValue = 'hello world';\nconsole.log(stringValue.toUpperCase()); // 'HELLO WORLD'\nconsole.log(stringValue.toLocalUpperCase()); // 'HELLO WORLD'\n```\n\n**match()**\n\n```javascript\nmatch只接受一个参数，要么是一个正则表达式，要么是一个RegExp对象，返回一个数组\nvar test = 'cat, bat, sat, fat';\nvar pattern = /.at/;\nvar matches = test.match(pattern);\nconsole.log(matches); // 输出匹配到的东西\n```\n\n**search()**\n\n```javascript\nsearch()只接受一个参数，要么是一个正则表达式，要么是一个RegExp对象\n返回字符串中第一个匹配的索引，如果没有，则返回-1\nvar test = 'cat, bat, sat, fat';\nvar index = test.search(/at/);\nconsole.log(index);\n```\n\n**replace()**\n\n```javascript\nreplace()接受两个参数，第一个参数可以是一个RegExp对象或一个字符串（这个字符串不会被转换成正则表达式），第二个参数可以是简化替换子字符串的操作\nvar test = 'cat, bat, sat, fat';\nconsole.log(test.replace('at', 'ond')); // 'cond, bat, sat, fat'\nconsole.log(test.replace(/at/g, 'ond')); // 'cond, bond, sond, fond'\n```\n\n**split()**\n\n```javascript\n可以基于指定的分隔符将一个字符串分割成多个字符串，返回一个数组\n第一个参数可以是一个字符串或一个RexExp对象\n第二个参数用于指定数组的大小，可不传\nvar test = 'red, blue, green, yellow';\nconsole.log(test.split(',')); // '['red', blue', 'green', 'yellow']\nconsole.log(test.split(',', 2)); // ['red', blue']\nconsole.log(test.split(/[^,]+/)); // ['', '', '', '']\n```\n\n##### **boolean**\n\nboolean只有两个值true和fasle\n\nJavaScript中的任何值都可以转换成布尔值，其中只有六个转换为false，他们分别是 “0、NaN、null、undefined、空字符串” ，其余的都是true\n\n![image-20221213172416788](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213172416788.png)\n\ntostring(),把布尔值转为字符串，并返回结果\n\n```javascript\nconst a = new Boolean(1) // Boolean {true}\na.toString() //‘true’\n```\n\nvalueOf()返回Boolean对象的原始值\n\n```javascript\nconst a = new Boolean(1) // Boolean {true}\na.valueOf() //true\n```\n\n**null/undefined**\n\n1. undefined不是关键字，而null是关键字\n2. undefined和null被转换为布尔值的时候，两者都为false;\n3. undefined在和null进行==比较时两者相等，全等于比较时两者不等\n4. 使用Number()对undefined和null进行类型转换,undefined为NaN，null为0\n5. undefined本质上是window的一个属性，而null是一个对象；\n6. null表示没有对象，即不应该有值，经常作用函数的参数，或作为原型链的重点。undefined表示缺少值，即应该有值，但是还没有赋予（变量提升时会默认赋值为undefined，函数参数为提供默认为undefined，函数的返回值默认为undefined）\n\n**symbol**\n\nES6引入了一种新的原始数据类型Symbol，表示独一无二的值，最大的用法就是用来定义对象的唯一属性名\n\n基本用法\n\nSymbol函数不能用new命令，因为Symbol是原始数据类型，不是对象。可以接受一个字符串作为参数，为新建的Symbol提供描述，用来描述在控制台或者作为字符串的时候使用，便于区分\n\n```javascript\nlet sy = Symbol('yy') // Symbol(kk)\ntypeof(sy)  //\"symbol\"\n//相同的参数Symbol（）放回的值不相等\nlet sy1 = Symbol('kk')\nsy === sy1 //false\n```\n\n使用场景\n\n作为属性名使用，由于每一个Symbol的值都是不相等的，所以Symbol作为对象的属性名，可以保证属性不重名\n\nSymbol作为对象属性名时不能用.运算符，要用方括号。因为.运算符后面是字符串，所以取到的是字符串sy属性，而不是Symbol值sy属性\n\n```javascript\nlet syObject = {};\nsyObject[sy] = \"kk\";\nsyObject[sy];  // \"kk\"\nsyObject.sy;   // undefined\n```\n\n在定义常量的时候，因为用字符串不能保证常量是独特的，这样会引起一些问题，但是使用Symbol定义常量，这样就可以保证这一组值都不相等，Symbol的值是唯一的，所以不会出现相同值的常量，即可以保证switch按照代码预想的方式执行。\n\nSymbol.for()\n\nSymbol.for()类似单例模式，首先会在全局搜索被登记的Symbol中是否有该字符串参数作为名称的Symbol值，如果有即返回该Symbol值，若没有则新建并返回一个以该字符串参数为名的Symbol值，并登记在全局环境中拱搜索\n\n```javascript\nlet yellow = Symbol(\"Yellow\");\nlet yellow1 = Symbol.for(\"Yellow\");\nyellow === yellow1;      // false\nlet yellow2 = Symbol.for(\"Yellow\");\nyellow1 === yellow2;     // true\n```\n\nSymbol.ketFor()\n\nSymbol.keyFor()返回一个已经登记的Symbol类型值的key，用来检测该字符作为名称的Symbol值是否已被登记\n\n```javascript\nlet yellow1 = Symbol.for(\"Yellow\");\nSymbol.keyFor(yellow1);    // \"Yellow\"\n```\n\n### JSON API\n\n#### JSON.stringify()\n\n使用方法 JSON.stringify(value,replacer?,space?)\n\n可选参数replacer用于转换参数value\n\n节点访问函数，会在值被转为字符串之前转换树节点的值\n\n```javascript\n//序列化时，碰到数值，则乘以2\nfunction replacer(key, value){\nif(typeof value === 'number'){\nvalue = 2 * value\n}\nreturn value\n}\n//调用\nJSON.stringify({ a: 5, b: [2, 3] }, replacer)\n//结果\n\"{\"a\":10,\"b\":[4,6]}\"\n```\n\n属性白名单，用于隐藏那些非数组对象内属性不在这个列表中的所有属性\n\n```javascript\nJSON.stringify({ foo: 1, bar: {foo: 1, bar: 1} }, ['bar'])\n//结果\n\"{\"bar\":{\"bar\":1}\"\n```\n\n可选参数space会影响输出格式，可以插入新行并通过数组和对象的嵌套增加缩进\n\n如果是数字，则在字符串化时每一级别缩进这个数字值的空格，小于0解释成0，大于10解释成10\n\n如果是一个字符串，则每一个级别会比上一个级别用该字符串形成的缩进（或该字符串的前十个字符）\n\n被JSON.stringify忽略的数据，只考虑自身枚举属性，忽略不被支持的值，即除了对象、数组、字符串、布尔值和null以外的任何值。如函数，Symbol值，undefined等，将返回undefined。如果属性值是这些值，该属性直接被忽略，在数组中被解析成null\n\n#### toJSON(key)方法\n\n如果一个被序列化的对象拥有toJSON方法，那么该toJSON方法就会覆盖该对象默认的序列化行为：不是那个对象被序列化，而是调用toJSON方法后的返回值会被序列化\n\n#### JSON.parse()\n\n使用方法JSON.parse(text,reviver?)\n\n\"\"string\"\"是不被js支持的，尽管虽然是标准的JSON字符串。你可以使用'\"string\"'代替。如果确实需要这样的行hi，可以使用JSON.stringify(\"\")\n\nrevier参数是一个节点访问函数。它可以用来转换解析后的数据\n\n### Math API\n\nMath.abs() 返回参数的绝对值\n\nMath.ceil() 向上取整，接受一个参数，返回大于该参数的最小整数\n\nMath.floor() 向下取整\n\nMath.max(n,m1...) 可接受多个参数，返回最大值\n\nMath.min(n,n1...) 可接受多个参数，返回最小值\n\nMath.pow(n,e) 指数运算，返回第一个参数为底数、第二个参数为幂的指数值\n\nMath.sqrt() 返回参数值的平方根。如果参数是一个负值，则返回NaN\n\nMath.log() 返回以e为底的自然对数值\n\nMath.exp() 返回e的指数，也就是常数e的参数次方\n\nMath.round() 四舍五入\n\nMath.random() 返回0-1之间的一个伪随机数，可能等于0，但是一定小于1\n\n### ES标准\n\n#### ES6\n\n**类**\n\n对于熟悉Java，object-c，c#等纯面向对象语言的开发者来说，都会对class有一种特殊的情怀。ES6引入了class，让JavaScript的面向对象编程更加简单和易于理解。\n\n通过生成实例对象的传统方法是通过构造函数\n\n```javascript\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype.toString = function () {\n  return '(' + this.x + ', ' + this.y + ')';\n};\n\nvar p = new Point(1, 2);\n```\n\n实际上，ES6的class可以看作是一个语法糖，它的绝大部分功能，ES5都能做到，新的calss写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已，上面的代码用ES6的class改写如下\n\n```javascript\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n```\n\nES6的类，完全可以看作构造函数的另一种写法\n\n```javascript\nclass Point {\n  // ...\n}\n\ntypeof Point // \"function\"\nPoint === Point.prototype.constructor // true\n```\n\n上面的代码表明，类的数据类型就是函数，类本身就是指向构造函数\n\n使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致\n\n```javascript\nclass Bar {\n  doStuff() {\n    console.log('stuff');\n  }\n}\n\nconst b = new Bar();\nb.doStuff() // \"stuff\"\n```\n\n构造函数的prototype属性，在ES6的类上面继续存在。事实上，类的所有方法定义在类的prototype属性上面\n\n```javascript\nclass Point {\n  constructor() {\n    // ...\n  }\n\n  toString() {\n    // ...\n  }\n\n  toValue() {\n    // ...\n  }\n}\n\n// 等同于\n\nPoint.prototype = {\n  constructor() {},\n  toString() {},\n  toValue() {},\n};\n```\n\nconstructor()方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor()方法，如果没有显式定义，一个空的constructor()方法会被默认添加\n\n类的实例\n\n使用new命令生成类的实例，如果忘记加上new，像函数那样调用Class，将会报错\n\n```javascript\nclass Point {\n  // ...\n}\n\n// 报错\nvar point = Point(2, 3);\n\n// 正确\nvar point = new Point(2, 3);\n```\n\n#### 模块化\n\n模块的功能主要由export和import组成。每一个模块都有自己单独的作用域，模块之间的相互调用关系是通过export来规定模块对外暴露的接口，通过import来引用其他模块提供的接口。同时还为模块创造了命名空间，防止函数的命名冲突\n\nES6允许在一个模块中使用export来导出多个变量或函数\n\nES6将一个文件视为一个模块，上面的模块通过export向外输出了一个变量。一个模块也可以同时往外面输出多个变量。\n\n一条import语句可以同时导入默认函数和其他变量\n\nimport defaultMethod，{otherMethod} from ‘xxx.js’\n\n#### 箭头函数\n\n箭头函数的箭头=>之前是一个空括号、单个的参数名、或用括号包括起的参数名额，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）\n\n```javascript\n()=>1\nv=>v+1\n(a,b)=>a+b\n()=>{alert(\"foo\")}\ne=>{if(e===0){\nreturn 0}\nreturn 1000/e\n}\n```\n\n不论是箭头函数还是bind，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（臂如卸载监听器），那么你必须自己保存这个引用。\n\n#### 函数参数默认值\n\nES6支持在定义函数的时候为其设置默认值\n\n```javascript\nfunction foo(height = 50,color = 'red'){}\n```\n\n#### 模板字符串\n\nES6支持模板字符串，使得字符串的拼接更加的简洁、直观\n\n```javascript\n//不使用模板字符串\nvar name = 'Your name is' + first + '' + last + '.'\n//使用模板字符串\nvar name = `Your name is ${first} ${last}.`\n```\n\n#### 解构赋值\n\n结构赋值语法是JavaScript的一种表达式，可以方便的从数组或者对象中快速提取值赋给定义的变量\n\n从数组中获取值并赋值到变量中，变量的顺序与数组中对象顺序对应\n\n```javascript\nvar foo [\"one\",\"two\",\"three\",\"four\"]\nvar [one,two,three] = foo\n\n//如果需要忽略某些值，可以按照下面的写法获取想要的值\nvar [fisrt, , , last] = foo\n```\n\n如果从数组中没有取到值，你可以为变量设置一个默认值\n\n```javascript\nvar a,b\n[a=5,b=7] = [1]\n```\n\n通过解构赋值可以方便的交换两个变量的值\n\n```javascript\nvar a = 1\nvar b = 3\n[a,b] = [b,a]\n```\n\n获取对象中的值\n\n```javascript\nconst student = {\n    name:'Ming',\n    age:'18',\n    city:'Shanghai'\n}\nconst {name.age,city} = student\n```\n\n#### 延展操作符\n\n延展操作符...可以在函数调用/数组构造时，将数组表达式或者string在语法层面展开；还可以在构造对象时，将对象表达式按key-value的方式展开\n\n```javascript\n//函数调用\nmyFunction(...iterableObj)\n//数组构造或字符串\n[...iterableObj,'4',...'hello',6]\n//构造对象时，进行克隆或者属性拷贝（ECMAScript2018规范新特性）\nlet objClone = {...obj}\n```\n\n应用场景\n\n```javascript\n//在函数调用时候使用延展操作符\nfunction sum(x,y,z){\n    return x+y+z\n}\nconst numbers = [1,2,3]\nconsole.log(sum.apply(null,numbers))\nconsole.log(sum(...numbers))\n//构造数组\nconst students = ['jine','Tom']\nconst persons = ['Tony',...students,'Aaron','Anna']\n//数组拷贝\nvar arr = [1,2,3]\nvar arr2 = [...arr]\narr2.push(4)\n//连接多个数组\nvar arr1 = [0,1,2]\nvar arr2 = [3,4,5]\nvar arr3 = [...arr1,...arr2]\n//等同于\nvar arr4 = arr1.concat(arr2)\n//在ECMAScript 2018中延展操作符增加了对对象的支持\nvar obj1 = {foo:'bar',x:42}\nvar obj2 = {foo:'bar',y:13}\nvar cloneObj = {...obj1}\nvar mergeObj = {..obj1,...obj2}\n<CustomComponent name:'jine',age={21} />\n//等同于\nconst params = {\n    name:'jine',\n    age:21\n}\n<CustomComponent ...params />\n//配合解构赋值避免传入一些不需要的参数\nvar params = {\n    name：'123',\n    title:'456',\n    type:'aaa'\n}\nvar {type,...other} = params\n<CustomComponent type='normal' number={2},{...ohter} />\n//等同于\n<CustomComponent type='normal' number={2} name='123',title='456' />\n```\n\n#### 对象属性简写\n\n在ES6中允许我们在设置一个对象的属性的时候不指定属性名\n\n```javascript\n//不使用ES6\nconst name='Ming',age='18',city='Shanghai'\nconst student = {\n    name:name,\n    age:age,\n    city:city\n}\n//使用ES6\nconst name='Ming',age:'18',city='Shanghai'\nconst student = {\n    name,\n    age,\n    city\n}\n```\n\n#### Promise\n\nPromise是异步编程的一种解决方案，比传统的解决方案callback更加的优雅。它最早由社区提出和实现的，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象\n\n```javascript\n//不适用ES6，嵌套两个setTimeout\nsettimeout(function(){\n    console.log('Hello')\n    setTimeout(function(){\n        console.log('Hello')\n        setTimeout(function(){\n            console.log('Hi')        \n        },1000)    \n    })\n},1000)\n//使用ES6\nvar waitSecond = new Promise(function(resolve,reject){\n    setTimeout(resolve,1000)\n})\nwaisecond\n    .then(function(){\n        console.log(\"Hello\")\n        return waitSecond    \n    })\n    .then(function(){\n        console.log(\"Hi\")    \n  })\n```\n\n#### Let与Const\n\n在之前JS是没有块级作用域的，const与let填补了这方面的空白，const与let都是块级作用域\n\n### Qs API\n\nQs是一个流行的查询参数序列化和解析库。可以将一个普通的object序列化成一个查询字符串，或者反过来将一个查询字符串解析成一个object，而且支持复杂的嵌套\n\nQs.parse('x[]=1') //{x:['1']}\n\nQS.stringify({x:[1]}) //x%5B0%5D=1\n\nignoreQueryPrefix和addQueryPrefix\n\nignoreQueryPrefix这个参数可以自动帮我们过滤掉location.search前面的？，然后再解析，addQueryPrefix设为true可以在序列化的时候给我们加上？\n\n```javascript\n/ 解析\nQs.parse('?x=1') // {?x: \"1\"}\nQs.parse('?x=1', {ignoreQueryPrefix: true}) //  {x: \"1\"}\n// 序列化\nQs.stringify({x: \"1\"}) //  x=1\nQs.parse({x: \"1\"}, {addQueryPrefix: true}) //  ?x=1\n```\n\n数组解析和序列化\n\n数组序列化有几种方式：indices，brackets，repeat，comma，用来控制字符串的生成格式\n\n```javascript\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'indices' })\n// 'a[0]=b&a[1]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'brackets' })\n// 'a[]=b&a[]=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'repeat' })\n// 'a=b&a=c'\nqs.stringify({ a: ['b', 'c'] }, { arrayFormat: 'comma' })\n// 'a=b,c'\n```\n\n以上四种方式，序列化得到的结果越来越来精简，但是当面对嵌套数组时，却会导致不同程序的信息丢失，而且丢失的越来月严重\n\n```javascript\nqs.parse(qs.stringify({ a: [['b'], 'c'] }, { arrayFormat: 'indices' })) // { a: [['b'], 'c'] }\nqs.parse(qs.stringify({ a: [['b'], 'c'] }, { arrayFormat: 'brackets' })) // {a: [\"b\", \"c\"]}\nqs.parse(qs.stringify({ a: [['b'], 'c'] }, { arrayFormat: 'repeat' })) // {a: [\"b\", \"c\"]}\nqs.parse(qs.stringify({ a: [['b'], 'c'] }, { arrayFormat: 'comma' })) // {a: \"b,c\"}\n```\n\ndelimiter可以控制哪种字符作为分隔符，由于cookie的格式是使用，一个使用的例子是用来解析cookie\n\n```javascript\ndocument.cookie // \"_ga=GA1.2.806176131.1570244607; _jsuid=1335121594; _gid=GA1.2.1453554609.1575990858\"\nQs.parse(document.cookie, {delimiter:'; '})\n```\n\n### 进制\n\n#### 八进制\n\n八进制字面值的第一位必须是0，然后是八进制数字序列（0-7）.如果字面值中的数值超出了范围，那么前导0将被忽略，后面的数值被当作十进制数解析\n\n注意由于某些JavaScript的实现不支持八进制字面量，且八进制数字面量在严格模式下是无效，会导致JavaScript抛出错误\n\n#### 十六进制\n\n十六进制字面量的前两位必须是0X，后跟十六进制数字序列（0-9，a-f），字母可大可小。果十六进制中的数值超出范围，如出现g、h等会报错\n\n#### 二进制\n\n二进制字面值的前两位必须0b，如果出现除0、1以外的数字会报错\n\n### JS模块化\n\n#### commomJS\n\n**特点**\n\n获取依赖模块用同步加载方式，适合服务端，在浏览器使用会出现浏览器假死的情况，因为在服务端，所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间\n\n模块可以多次加载（多次使用require加载），但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果\n\n**使用**\n\n```javascript\n/*定义模块*/\n//example.js\nvar n = 1;\nfunction sayHello( name ){\n    var name = name || \"Tom\";\n    return \"Hello~\"+name\n}\nfunction addFn(val){\n    var val = val.x+val.y;\n    return val\n}\n/*使用module.exports的方法*/\nmodule.exports ={\n    n:n,\n    sayHello:sayHello,\n    addFn:addFn\n}\n/*\n    使用exports的方法\n    exports.n=n;\n    exports.sayHello=sayHello\n    exports.addFn=addFn\n\n/*\n    两种输出方式是等价的\n*/\n\n/*使用模块*/\n//main.js\nvar example = require('./example.js');/*同步执行*/\nvar addNum = {\n    \"x\":10,\n    \"y\":5\n}\nconsole.log( example )//查看example输出的对外模块接口；\nconsole.log( example.n )//1;\nconsole.log( example.sayHello(\"Jack\") )// \"Hello~ Jack\";\nconsole.log( example.addFn(addNum) ) //15;\n```\n\n#### AMD\n\n**特点**\n\n获取依赖模块异步加载方式，适合浏览器端\n\n**使用**\n\n```javascript\n/*定义模块*/\n/*\n    define(id?, dependencies?, factory)\n    id:字符串，模块名称(可选)\n    dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式\n    factory: 工厂方法，返回一个模块函数\n*/\n//example.js\n/*在定义模块时，也使用了其他依赖模块*/\ndefine(['Lib'], function(Lib){\n　　　　function foo(){\n　　　　　　Lib.doSomething();\n　　　　}\n　　　　return {\n　　　　　　foo : foo\n　　　　};\n　　});\n　　\n/*使用模块*/\n/*\nrequire( dependencies, factory)\n    dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式\n    factory: 在这里使用模块完成业务\n*/\n/*\n    将依赖的模块全部加载执行以后执行回调\n*/\nrequire(['./a', './b'], function (m1,m2) {\n　m1.add(2, 3);\n  m2.add(2, 3);\n});\n```\n\n#### CMD\n\n**特点**\n\n延迟加载执行\n\n**使用**\n\n```javascript\ndefine(function(require, exports, module) {\n  // 模块代码\n    var a = require('./a');\n  //require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口。\n  \n    //异步加载一个模块，在加载完成时，执行回调\n    require.async('./b', function(b) {\n        b.doSomething();\n    });\n    \n    //异步加载多个模块，在加载完成时，执行回调\n    require.async(['./c', './d'], function(c, d) {\n        c.doSomething();\n        d.doSomething();\n    });\n    \n    \n    //模块输出\n     return {\n        foo: 'bar',\n        doSomething: function() {}\n     };\n    \n    // 对外提供 foo 属性\n    exports.foo = 'bar';\n\n    // 对外提供 doSomething 方法\n    exports.doSomething = function() {};\n    \n    // 错误用法！！!\n      exports = {\n        foo: 'bar',\n        doSomething: function() {}\n      };\n    // 正确写法\n      module.exports = {\n        foo: 'bar',\n        doSomething: function() {}\n      };\n/*\n    exports 仅仅是 module.exports 的一个引用。在 factory 内部给 exports 重新赋值时，并不会改变 module.exports 的值。因此给 exports 赋值是无效的，不能用来更改模块接口。\n*/\n});\n```\n\n#### ES6 Moubule\n\n**特点**\n\nexport指令导出接口，以import引入模块\n\nimport的语法和require不同，而且import必须放在文件的最开始，且前面不允许有其他逻辑代码，这和其他所有的编程语言风格一致\n\n**使用**\n\n```javascript\nexport var m = 1;\n// 等价于\nvar m = 1;\nexport { m }\n\nexport const student = {\n  name: 'Megan',\n  age: 18\n}\n// 等价于\nconst obj = {\n  id: 1,\n  value: 'lalala'\n};\nexport { obj };\n\nexport function sun(a, b) {\n  return a + b;\n}\n// 等价于\nfunction sum(a, b){\n  return a + b;\n}\nexport { sum };\nimport { sum } from xxxx\n\nexport default function() {}\n \n// 等效于：\nfunction a() {};\nexport {a as default};\n\nimport  xxx  from xxxx //可以省去花括号{}。\n// 等效于，或者说就是下面这种写法的简写，是同一个意思\nimport { default as xxx } from xxxx;\n```\n\n```javascript\n//一个文件即模块中只能存在一个export default语句，导出一个当前模块的默认对外接口\nexport default var i = 0;\n//使用默认式\nimport variable from './exportDemo';\n//同时使用命名式和默认式\nimport variable, { sum, boy } from './exportDemo';\n```\n\n```javascript\n//导入一个模块，但不进行任何绑定：\nimport \"my-module\";\n```\n\n```javascript\n//在同一个模块可以同时使用两种导出方式\nexport function sun(a, b) {\n  return a + b;\n}\nexport default {\n  install,\n  DottedTitle,\n};\n```\n\n","slug":"JavaScirpt","published":1,"updated":"2022-12-30T03:14:06.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc9yxb8s000650ut8p9x2q9y","content":"<h3 id=\"区分基本类型和对象类型\"><a href=\"#区分基本类型和对象类型\" class=\"headerlink\" title=\"区分基本类型和对象类型\"></a>区分基本类型和对象类型</h3><h4 id=\"基本类型不可变性\"><a href=\"#基本类型不可变性\" class=\"headerlink\" title=\"基本类型不可变性\"></a>基本类型不可变性</h4><p>在ECMAScript标准中，它们被定义为primitive value，即原始值，代表值本身是不可被改变的。</p>\n<p>在JavaScript中，每一个变量在内存中都需要一个空间来存储</p>\n<span id=\"more\"></span>\n\n<p>内存空间被分为两种，栈内存和堆内存</p>\n<p>栈内存的特点：</p>\n<ul>\n<li><p>存储的值大小固定</p>\n</li>\n<li><p>空间较小</p>\n</li>\n<li><p>可以直接操作其保存的变量，运行效率高</p>\n</li>\n<li><p>由系统自动分配存储空间</p>\n</li>\n</ul>\n<p>由于栈中的内存空间的大小是固定的，那么注定了存储栈中的变量就是不可变的</p>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><ul>\n<li><p>存储的值大小不定，可动态调整</p>\n</li>\n<li><p>空间较大，运行效率低</p>\n</li>\n<li><p>无法直接操作其内部存储，使用引用地址读取</p>\n</li>\n<li><p>通过代码进行分配空间</p>\n</li>\n</ul>\n<p>相对于上面具有不可变性的原始类型，我习惯把对象成为引用类型，引用类型的值实际存储在堆内存中，它在栈中值存储了一个固定长度的地址，这个地址指向堆内存中的值</p>\n<h4 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h4><p>当我们把一个变量的值复制到另一个变量上时，原始类型和引用类型的表现是不一样的</p>\n<p><strong>原始类型</strong></p>\n<p>内存中有一个变量name，值为ConardLi。我们从变量name复制出一个变量name2，此时在内存中创建了一块新的空间用于存储ConardLi，虽然两者值都是相同的，但是两者指向的内存空间完全不同，这两个量参与任何操作都互不影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;fsang&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name2 = name;</span><br><span class=\"line\">name2 = <span class=\"string\">&#x27;code秘密花园&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// fsang;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213164248277.png\" alt=\"image-20221213164248277\"></p>\n<p><strong>引用类型</strong></p>\n<p>当我们复制引用类型的变量时，实际上复制的是栈中存储的地址，所以复制出来的obj2实际上和obj指向的堆中同一个对象。因此，我们改变其中任何一个变量的值，另一个变量都会收到影响，这也是为什么会有深拷贝和浅拷贝的原因</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;ConardLi&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj;</span><br><span class=\"line\">obj2.<span class=\"property\">name</span> = <span class=\"string\">&#x27;code秘密花园&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>); <span class=\"comment\">// code秘密花园</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213164404630.png\" alt=\"image-20221213164404630\"></p>\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>对于原始类型，比较时会直接比较他们的值，如果值相等，即返回true</p>\n<p>对于引用类型，比较时会比较他们的引用地址，虽然两个变量在堆中存储的对象具有的属性都是相等的，但是它们被存储在了不同的存储空间，因此比较值为false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;ConardLi&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name2 = <span class=\"string\">&#x27;ConardLi&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name === name2); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;ConardLi&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;ConardLi&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj === obj2); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213164453686.png\" alt=\"image-20221213164453686\"></p>\n<h4 id=\"值传递和引用传递\"><a href=\"#值传递和引用传递\" class=\"headerlink\" title=\"值传递和引用传递\"></a>值传递和引用传递</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;ConardLi&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeValue</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">  name = <span class=\"string\">&#x27;code秘密花园&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">changeValue</span>(name);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br></pre></td></tr></table></figure>\n\n<p>执行上面的代码，如果最终打印出来的name是’ConarLi’，没有改变，说明函数参数传递的是变量的值，即值传递。如果最终打印的是’code秘密花园’，内书内部的操作可以改变传入的变量，那么说明函数参数传递的是引用，即引用传递。</p>\n<p>很明显，上面的执行结果是’ConarLi’，即函数参数仅仅是被传入变量复制的一个局部变量，改变这个局部变量不会对外部变量产生影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;ConardLi&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeValue</span>(<span class=\"params\">obj</span>)&#123;</span><br><span class=\"line\">  obj.<span class=\"property\">name</span> = <span class=\"string\">&#x27;code秘密花园&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">changeValue</span>(obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>); <span class=\"comment\">// code秘密花园</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码可能会产生疑惑，是不是参数是引用类型就是引用传递呢</p>\n<p>首先明确一点，ECMAScript中所有的函数的参数都是按值传递的</p>\n<p>当函数参数是引用类型时，同样将参数复制了一个副本到局部变量，只不过复制的这个副本是指向堆内存中的地址，我们在函数内部对对象的属性进行操作，实际上和外部变量指向堆内存中的值相同，但是这并不代表着引用传递</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeValue</span>(<span class=\"params\">obj</span>)&#123;</span><br><span class=\"line\">  obj.<span class=\"property\">name</span> = <span class=\"string\">&#x27;ConardLi&#x27;</span>;</span><br><span class=\"line\">  obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;code秘密花园&#x27;</span>&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">changeValue</span>(obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>); <span class=\"comment\">// ConardLi</span></span><br></pre></td></tr></table></figure>\n\n<p>函数参数传递的并不是变量的引用，而是变量拷贝的副本，当变量是原始类型时，这个副本就是值本身，当变量是引用类型时，这个副本是指向堆内存的地址。</p>\n<p>最后注意：函数参数都是按照值传递的</p>\n<h3 id=\"引用数据类型-对象类型\"><a href=\"#引用数据类型-对象类型\" class=\"headerlink\" title=\"引用数据类型(对象类型)\"></a>引用数据类型(对象类型)</h3><h4 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h4><p><strong>创建数组的方法</strong></p>\n<p>const arr = [1,2,3]// 数组字面量</p>\n<p>const arr = [,,,]// 三元素空位数组（hole array）</p>\n<p>const arr = new Array(4)// [,,,,]</p>\n<p>const arr = new Array(4,2)// [4,2]</p>\n<p>const arr = Array.of(1,2,3)// [1,2,3]</p>\n<p>const arr = Array.of(4)// [4]</p>\n<p><strong>操作数组的方法</strong></p>\n<p>concat() 连接两个或多个数组，并返回已连接数组的副本</p>\n<p>copyWithin() 将数组中的数组元素复制到指定位置或从指定位置复制</p>\n<p>entries() 返回键 / 值对数组迭代对象</p>\n<p>every() 检查数组中的每一个元素是否通过测试</p>\n<p>fill() 用静态值填充数组中的元素</p>\n<p>filter() 使用数组中通过测试的每个元素创建新数组</p>\n<p>find() 返回数组中第一个通过测试的元素的值</p>\n<p>findIndex() 返回数组中通过测试的第一个元素的索引</p>\n<p>forEach() 为每个数组调用函数</p>\n<p>Array.from() 方法用于通过拥有 length 属性的对象或可迭代的对象来返回一个数组</p>\n<p>includes() 检查数组是否包含指定的元素</p>\n<p>indexOf() 在数组中搜索元素并返回其位置</p>\n<p>join() 将数组的所有元素连接成一个字符串</p>\n<p>keys() 返回Array Iteration对象，包含原始数组的键</p>\n<p>lastindexOf() 在数组中搜索元素，从末尾开始，并返回其位置</p>\n<p>map() 使用为每个数组元素调用函数的结果创建新数组</p>\n<p>pop() 删除数组的最后一个元素，并返回该元素</p>\n<p>push() 将新元素添加到数组的末尾，并返回新的长度</p>\n<p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。数组的值减为单个值</p>\n<p>reduceRight() 方法接收一个函数作为累加器，数组中的每个值（从右到左）开始缩减，最终计算为一个值。数组的值减为单个值</p>\n<p>reverse() 反转数组中元素的顺序</p>\n<p>shift() 删除数组的第一个元素，并返回该元素</p>\n<p>slice() 选择数组的一部分，并返回该元素</p>\n<p>some() 检查数组中的任意元素是否通过测试</p>\n<p>sort() 对数组的元素进行排序</p>\n<p>splice() 用于添加或删除数组中的元素</p>\n<p>toString() 将数组转为字符串，并返回结果</p>\n<p>unshift() 将新元素添加到开头，并返回新的长度</p>\n<p>valueOf() 返回数组的元素值</p>\n<p>flat() 将嵌套数组转成一维数组</p>\n<h4 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h4><p>JavaScript对象的原生方法分成两类：Object本身的方法和Object的实例方法</p>\n<p>Object本身的方法就是直接定义在Object的方法。如Object.print = function (o) =&gt; {onsole.log(o)}</p>\n<p>Object的实例方法就是Object原型对象Object.prototype上的方法，可以直接被Object实例直接使用。如Object.prototype.print = function () =&gt;{console.log(this)}   var obj = new Object(); obj.ptrint()</p>\n<p>Object.keys() 参数是一个对象，返回该对象自身的所有属性名</p>\n<p>Object.balues() 返回一个数组，成员是参数对象自身的所有可遍历属性的键值。与Object.keys相对接</p>\n<p>Object.entries() 返回一个数组，成员是参数对象自身的所有可遍历属性的键值对数组</p>\n<p>Object.getOwnPropertyDescriptor() 获取某个属性的描述对象</p>\n<p>Object.defineProperty()通过描述对象，定义某个属性</p>\n<p>Object.defineProperties() 通过描述对象，定义多个属性</p>\n<p>Object.preventExtensions() 防止对象扩展</p>\n<p>Object.isExtensible() 判断对象是否可扩展</p>\n<p>Object.seal() 禁止对象配置</p>\n<p>Object.isSealed() 判断一个对象是否可配置</p>\n<p>Object.freeze() 冻结一个对象</p>\n<p>Object.isFrozen() 判断一个对象是否被冻结</p>\n<p>Object.create() 该方法可以指定对象和属性，返回一个新的对象</p>\n<p>Object.gerPrototypeOf() 获取对象的Prototype对象</p>\n<p>Object.prototype.valueOf() 返回当前对象对应的值</p>\n<p>Object.prototype.toString() 返回当前对象对应的字符串形式</p>\n<p>Object.prototype.toLoacaleString() 返回当前对象对应的本地字符串形式</p>\n<p>Object.prototype.hasOwnProperty() 判断某个属性是否为当前对象的属性，还是继承当前原型对象的属性</p>\n<p>Object.prototype.isPrototypeOf() 判断当前对象是否为另一个对象的原型</p>\n<p>Object.prototype.propertyIsEnumerable() 判断某个属性是否可枚举</p>\n<h4 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h4><p>Function普通函数</p>\n<p>Arrow Function 箭头函数适用于需要匿名哈数的地方</p>\n<p>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象</p>\n<p>不可以当作构造函数，也就是不可以使用new命令，否则会抛出一个错误</p>\n<p>不可以使用argument对象，该对象在函数体内不存在，如果要用可以用rest参数代替</p>\n<p>Generator函数用来返回generator对象，并且它符合可迭代协议和迭代器协议，是一个协程函数，它通过yield命令来暂停某个进程，执行其他线程，通过Generator函数实现异步避免回调地狱，但是因为切换下个状态都要用next方法，所以不常用，一般用es6中async函数解决。</p>\n<p>Async Function用来处理异步操作，避免了回调地狱，让异步代码看起来更友好。</p>\n<p>Async函数调用async的时候会异步执行</p>\n<p>在async函数中使用await的时候，会执行当前代码才会往下继续执行其他代码，实现按照指定顺序执行异步操作</p>\n<p>async函数会返回一个Promise</p>\n<p>apply和call都是函数对象的方法，两者都可以改变函数运行时的this，这个是apply和call的主要使用的功能</p>\n<p>apply和call不同在于，提供的参数格式不一样：apply需要的是一个参数数组，call需要的是参数列表</p>\n<p>bind与apply和call不同的是，apply和call是在每次调用的时候动态指定被调用函数的this和实参，apply与call自动帮我们对目标函数进行调用，而bind是创建一个新的绑定函数固定了目标函数的this值和部分实参</p>\n<p>立即执行函数表达式，是一个在定义时就会立即执行的JS函数(function(){})()</p>\n<p>第一部分是包围在圆括号运算符（）里的一个匿名函数，这个匿名函数拥有独立的词法作用域。这不仅避免了外界访问IIFE中的变量，而且也不会污染全局作用域。</p>\n<p>第二部分再一次使用（）创建了立即执行函数表达式，javaScript引擎到此直接执行函数</p>\n<p>符合以下两点的函数就是纯函数</p>\n<p>相同输入总是会返回相同的输出。返回的结果只依赖于输入的参数且于外部系统状态无关</p>\n<p>没有副作用。不会影响该函数作用域以外的外部状态（比如全局变量、参数）</p>\n<p>柯里化就是把接受多个参数的函数变成接受一个单一参数（最初函数的第一个参数）的函数，并且返回一个新的函数的技术，新函数接受余下参数并返回运算结果</p>\n<h4 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//-8小时</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cur=<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2018</span>,<span class=\"number\">2</span>,<span class=\"number\">25</span>,<span class=\"number\">14</span>,<span class=\"number\">6</span>,<span class=\"number\">38</span>); <span class=\"comment\">//0~11代表1月~12月</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> year=cur.<span class=\"title function_\">getUTCFullYear</span>(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> month=cur.<span class=\"title function_\">getUTCMonth</span>();  </span><br><span class=\"line\"><span class=\"keyword\">var</span> day=cur.<span class=\"title function_\">getUTCDate</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> hour=cur.<span class=\"title function_\">getUTCHours</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> minutes=cur.<span class=\"title function_\">getUTCMinutes</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> seconds=cur.<span class=\"title function_\">getUTCSeconds</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> mseconds=cur.<span class=\"title function_\">getUTCMilliseconds</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;时间为：&quot;</span>+year+<span class=\"string\">&quot;-&quot;</span>+(month+<span class=\"number\">1</span>)+<span class=\"string\">&quot;-&quot;</span>+day+<span class=\"string\">&quot; &quot;</span>+hour+<span class=\"string\">&quot;:&quot;</span>+minutes+<span class=\"string\">&quot;:&quot;</span>+seconds+<span class=\"string\">&quot;:&quot;</span>+mseconds);</span><br><span class=\"line\"><span class=\"comment\">//打印结果</span></span><br><span class=\"line\">时间为：<span class=\"number\">2018</span>-<span class=\"number\">3</span>-<span class=\"number\">25</span> <span class=\"number\">6</span>:<span class=\"number\">6</span>:<span class=\"number\">38</span>:<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cur=<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2018</span>,<span class=\"number\">2</span>,<span class=\"number\">25</span>,<span class=\"number\">14</span>,<span class=\"number\">6</span>,<span class=\"number\">38</span>); <span class=\"comment\">//0~11代表1月~12月</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> week=cur.<span class=\"title function_\">getDay</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"string\">&quot;星期一&quot;</span>,<span class=\"string\">&quot;星期二&quot;</span>,<span class=\"string\">&quot;星期三&quot;</span>,<span class=\"string\">&quot;星期四&quot;</span>,<span class=\"string\">&quot;星期五&quot;</span>,<span class=\"string\">&quot;星期六&quot;</span>,<span class=\"string\">&quot;星期天&quot;</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;本地时间是：&quot;</span>+arr[week]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> weekUTC=cur.<span class=\"title function_\">getUTCDay</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;格林威治时间是：&quot;</span>+arr[weekUTC]);</span><br><span class=\"line\"><span class=\"comment\">//打印结果</span></span><br><span class=\"line\">本地时间是：星期一</span><br><span class=\"line\">格林威治时间是：星期一</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Regex\"><a href=\"#Regex\" class=\"headerlink\" title=\"Regex\"></a>Regex</h4><p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213170250905.png\" alt=\"image-20221213170250905\"></p>\n<p>g:global–全文搜索，不添加，搜索到第一个匹配为止</p>\n<p>i:ignore case–忽略小写写，默认大小写敏感</p>\n<p>m:multiplelines–多行搜索</p>\n<h4 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h4><p>SyntaxError 语法错误。多半是哪里的符号写错了</p>\n<p>ReFerenceError 引用错误。根本没有创建过就去使用</p>\n<p>TypeError 类型错误。不是你的方法你去调用了</p>\n<p>RangeError 范围错误</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//可能出错的代码;</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>()&#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);<span class=\"comment\">//可以提示用户错误的原因是什么</span></span><br><span class=\"line\">&#125;<span class=\"comment\">//后续代码正常执行</span></span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;抛出一个自定义的错误&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"值类型（基本类型）\"><a href=\"#值类型（基本类型）\" class=\"headerlink\" title=\"值类型（基本类型）\"></a>值类型（基本类型）</h3><h4 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h4><p><strong>浮点数</strong></p>\n<p>数值包含小数点，而且小数点后面必须至少有一个数字。</p>\n<p>经典问题：0.1+0.2 ==0.3吗？答案是不等于</p>\n<p>因为在浮点数运算过程中存在舍入误差，之所以存在这种舍入错误，是因为使用了IEEE754，这种错误并非ECMAScript独有，只要是使用这种格式的语言都有这个问题</p>\n<p><strong>值的范围</strong></p>\n<p>正数，负数，0，Infinity</p>\n<p>最小值：Number.MIN_VALUE = 5e-324</p>\n<p>最大值：Number.MAX_VALUE = 1.797693134862315 7e+308</p>\n<p>数值超出JavaScript表示的范围：Infinity（正无穷大）-Infinity（负无穷大）</p>\n<p>确定数值是否为有限数：isFinite()函数</p>\n<p><strong>NaN</strong></p>\n<ul>\n<li>意思：不是数值</li>\n<li>表示本来要返回数值的操作失败了（而不是抛出错误）</li>\n<li>如何涉及NaN的操作始终返回NaN</li>\n<li>NaN不等于包括NaN在内的任何值</li>\n<li>isNaN()函数，判断传入其中的参数是否不是数值</li>\n<li>isNaN()会尝试转换成数值</li>\n</ul>\n<p><strong>数值转换</strong></p>\n<p>Number()函数，可用于任何数据类型</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213171131994.png\" alt=\"image-20221213171131994\"></p>\n<p>pareInt()函数会忽略字符串最前面的空格，第一个非空格字符开始转换，如果第一个字符不是数值字符、加号或减号，parseInt()立即返回NaN</p>\n<p>parseInt()函数可以接受第二个参数，用于指定底数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;AF&quot;</span>, <span class=\"number\">16</span>); <span class=\"comment\">// 175 提供了16进制参数，可以省略0x</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;AF&quot;</span>); <span class=\"comment\">// NaN , 没有提供第二个参数，就不可以</span></span><br></pre></td></tr></table></figure>\n\n<p>parseFloat()和pareInt()函数类似。区别在于parseFloat()识别有效的小数点（也就是第一次出现的小数点，在后面的小数点就都忽略了），还有就是忽略字符串开头的零；parseFloat()只解析十进制值，不能指定底数，十六进制数值始终返回0</p>\n<p>toFixed()保留小数点后N位（最后的结果是字符串）</p>\n<p>valueOf()方法返回对象的数字字面量</p>\n<p>toString()方法将数字转换为字符串</p>\n<p>toLocalString()方法将数字转换为本地惯例格式数字的字符串</p>\n<p>toExponential()方法返回数值四舍五入后的指数表示法(e表示法)的字符串表示，参数表示转换后的小数位数</p>\n<p>oPrecision()方法接收一个参数，即表示数值的所有数字的位数(不包括指数部分)，自动调用toFixed()或toExponential()</p>\n<p><strong>string</strong></p>\n<p>Javascript采用UTF-16编码的Unicode字符集，Javascript中的字符串是由一组无符号的16位值组成的序列，最常用的Unicode字符都是通过16位的内码来表示的，并代表字符串的单个字符</p>\n<p>只要引用了字符传的属性，JavaScript就会将字符串通过new String()的方式转换为对象，这个对象继承了字符串的方法，一旦引用结束，这个新创建的对象就会被销毁。这个临时对象称之为包装对象，字符串（还有数字和布尔值）的属性都是只读的，并不能赋值，有别于其他的对象字符串是存放再堆内存里面的，一旦创建就不可更改，如果想改变某个变量保存的字符串，就必须销毁原来的字符串，再用一个新的来填充该变量</p>\n<p>String类型是字符串的包装类型，可以用String构造函数来创建</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stringObject = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;hello world&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringText = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>String([value])</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"title class_\">String</span>(a) <span class=\"comment\">// &#x27;111&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>[value].toString()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">转换数字的进制（<span class=\"number\">2</span>-<span class=\"number\">36</span>进制）</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">10</span></span><br><span class=\"line\">a.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>) <span class=\"comment\">//&quot;1010&quot;</span></span><br><span class=\"line\">a.<span class=\"title function_\">toString</span>(<span class=\"number\">8</span>) <span class=\"comment\">//&quot;12&quot;</span></span><br><span class=\"line\">a.<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>) <span class=\"comment\">// &quot;a&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>().<span class=\"title function_\">toString</span>(<span class=\"number\">36</span>).<span class=\"title function_\">subString</span>(<span class=\"number\">3</span>,<span class=\"number\">7</span>) <span class=\"comment\">// 生成四位数的随机验证码</span></span><br><span class=\"line\">判断数据</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"title class_\">Array</span>) <span class=\"comment\">// &quot;[object Function]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([]) <span class=\"comment\">// &quot;[object Array]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>charAt()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以单字符字符串的形式返回给定位置的那个字符</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">charAt</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// &#x27;e&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>charCodeAt</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回给定位置的字符所对应的字符编码</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">charCodeAt</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// &#x27;101&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>concat()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将一个或者多个字符串拼接起来，返回拼接得到的字符串，可接受任意多个参数</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">charCodeAt</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// &#x27;101&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//实际情况中使用+拼接的情况更多</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>slice(start,end)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">截取字符串，返回一个新的字符串（当传入负值时，会默认加上原数组的长度）</span><br><span class=\"line\">start：指定子字符串的起始位置（可不传，不传返回原字符串）</span><br><span class=\"line\">end：指定字符串到哪个位置结束（可不传，不传默认到原字符最后一个字符结束）</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">slice</span>()); <span class=\"comment\">// &#x27;hello world&#x27;;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>)); <span class=\"comment\">// &#x27;llo world&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// &#x27;llo &#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">slice</span>(-<span class=\"number\">9</span>)); <span class=\"comment\">// &#x27;llo world&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>, -<span class=\"number\">5</span>)); <span class=\"comment\">// &#x27;llo &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>suubstr(start,length)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">截取字符串，返回一个新的子字符串（当第一个参数为负值时，会默认加上原数组的长度，第二个参数为负值时，会默认转为<span class=\"number\">0</span>）</span><br><span class=\"line\">start：指定子字符串的起始位置（可不传，不传则返回原字符串）</span><br><span class=\"line\">length：指定子字符串的长度（可不传，不传默认原字符串最后一个字符结束）</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substr</span>()); <span class=\"comment\">// &#x27;hello world&#x27;;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substr</span>(<span class=\"number\">2</span>)); <span class=\"comment\">// &#x27;llo world&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substr</span>(<span class=\"number\">2</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// &#x27;llo wo&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substr</span>(-<span class=\"number\">2</span>)); <span class=\"comment\">// &#x27;ld&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substr</span>(<span class=\"number\">2</span>, -<span class=\"number\">6</span>)); <span class=\"comment\">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>substring(start,end)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">截取字符串，返回一个新的子字符串（当传入负值时，会将所有负值转为<span class=\"number\">0</span>。如果start大于end,两个值会互相调换，保持start&lt;end）</span><br><span class=\"line\">start：指定子字符串的起始位置（可不传，不传返回原字符串）</span><br><span class=\"line\">end：指定字符串到哪里结束（可不传，不传默认到原字符串最后一个字符结束）</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substring</span>()); <span class=\"comment\">// &#x27;hello world&#x27;;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substring</span>(<span class=\"number\">2</span>)); <span class=\"comment\">// &#x27;llo world&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substring</span>(<span class=\"number\">2</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// &#x27;llo &#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substring</span>(-<span class=\"number\">3</span>)); <span class=\"comment\">// &#x27;hello world&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substring</span>(<span class=\"number\">2</span>, -<span class=\"number\">6</span>)); <span class=\"comment\">// &#x27;he&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>indexOf(char,start)和lastIndexOf(char, start)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">indexOf从字符串的开头向后搜索子字符串，返回第一个子字符串的位置（未找到返回-<span class=\"number\">1</span>）</span><br><span class=\"line\">lastIndexOf从字符串的末尾向前搜索子字符串，返回子字符串的位置（没找到则返回-<span class=\"number\">1</span>）</span><br><span class=\"line\">char：需要查找的字符串</span><br><span class=\"line\">start：从哪个位置开始向后查找，可不传</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;o&#x27;</span>)); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;o&#x27;</span>)); <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;o&#x27;</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;o&#x27;</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>trim()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">去除原始字符串中的前置及后缀空格，返回一个新的字符串</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;  hello world  &#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">trim</span>()); <span class=\"comment\">// &#x27;hello world&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue); <span class=\"comment\">// &#x27;  hello world  &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>toLowerCase()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将字符串转为小写</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;HELLO WORLD&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">toLowerCase</span>()); <span class=\"comment\">// &#x27;hello world&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">toLocaleLowerCase</span>()); <span class=\"comment\">// &#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>toUpperCase()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将字符串转为大写</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">toUpperCase</span>()); <span class=\"comment\">// &#x27;HELLO WORLD&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">toLocalUpperCase</span>()); <span class=\"comment\">// &#x27;HELLO WORLD&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>match()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">match只接受一个参数，要么是一个正则表达式，要么是一个<span class=\"title class_\">RegExp</span>对象，返回一个数组</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"string\">&#x27;cat, bat, sat, fat&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/.at/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> matches = test.<span class=\"title function_\">match</span>(pattern);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matches); <span class=\"comment\">// 输出匹配到的东西</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>search()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">search</span>()只接受一个参数，要么是一个正则表达式，要么是一个<span class=\"title class_\">RegExp</span>对象</span><br><span class=\"line\">返回字符串中第一个匹配的索引，如果没有，则返回-<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"string\">&#x27;cat, bat, sat, fat&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = test.<span class=\"title function_\">search</span>(<span class=\"regexp\">/at/</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index);</span><br></pre></td></tr></table></figure>\n\n<p><strong>replace()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">replace</span>()接受两个参数，第一个参数可以是一个<span class=\"title class_\">RegExp</span>对象或一个字符串（这个字符串不会被转换成正则表达式），第二个参数可以是简化替换子字符串的操作</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"string\">&#x27;cat, bat, sat, fat&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;at&#x27;</span>, <span class=\"string\">&#x27;ond&#x27;</span>)); <span class=\"comment\">// &#x27;cond, bat, sat, fat&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/at/g</span>, <span class=\"string\">&#x27;ond&#x27;</span>)); <span class=\"comment\">// &#x27;cond, bond, sond, fond&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>split()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以基于指定的分隔符将一个字符串分割成多个字符串，返回一个数组</span><br><span class=\"line\">第一个参数可以是一个字符串或一个<span class=\"title class_\">RexExp</span>对象</span><br><span class=\"line\">第二个参数用于指定数组的大小，可不传</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"string\">&#x27;red, blue, green, yellow&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)); <span class=\"comment\">// &#x27;[&#x27;red&#x27;, blue&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// [&#x27;red&#x27;, blue&#x27;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test.<span class=\"title function_\">split</span>(<span class=\"regexp\">/[^,]+/</span>)); <span class=\"comment\">// [&#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a><strong>boolean</strong></h5><p>boolean只有两个值true和fasle</p>\n<p>JavaScript中的任何值都可以转换成布尔值，其中只有六个转换为false，他们分别是 “0、NaN、null、undefined、空字符串” ，其余的都是true</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213172416788.png\" alt=\"image-20221213172416788\"></p>\n<p>tostring(),把布尔值转为字符串，并返回结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"number\">1</span>) <span class=\"comment\">// Boolean &#123;true&#125;</span></span><br><span class=\"line\">a.<span class=\"title function_\">toString</span>() <span class=\"comment\">//‘true’</span></span><br></pre></td></tr></table></figure>\n\n<p>valueOf()返回Boolean对象的原始值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"number\">1</span>) <span class=\"comment\">// Boolean &#123;true&#125;</span></span><br><span class=\"line\">a.<span class=\"title function_\">valueOf</span>() <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>null/undefined</strong></p>\n<ol>\n<li>undefined不是关键字，而null是关键字</li>\n<li>undefined和null被转换为布尔值的时候，两者都为false;</li>\n<li>undefined在和null进行==比较时两者相等，全等于比较时两者不等</li>\n<li>使用Number()对undefined和null进行类型转换,undefined为NaN，null为0</li>\n<li>undefined本质上是window的一个属性，而null是一个对象；</li>\n<li>null表示没有对象，即不应该有值，经常作用函数的参数，或作为原型链的重点。undefined表示缺少值，即应该有值，但是还没有赋予（变量提升时会默认赋值为undefined，函数参数为提供默认为undefined，函数的返回值默认为undefined）</li>\n</ol>\n<p><strong>symbol</strong></p>\n<p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值，最大的用法就是用来定义对象的唯一属性名</p>\n<p>基本用法</p>\n<p>Symbol函数不能用new命令，因为Symbol是原始数据类型，不是对象。可以接受一个字符串作为参数，为新建的Symbol提供描述，用来描述在控制台或者作为字符串的时候使用，便于区分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sy = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;yy&#x27;</span>) <span class=\"comment\">// Symbol(kk)</span></span><br><span class=\"line\"><span class=\"title function_\">typeof</span>(sy)  <span class=\"comment\">//&quot;symbol&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//相同的参数Symbol（）放回的值不相等</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sy1 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;kk&#x27;</span>)</span><br><span class=\"line\">sy === sy1 <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>使用场景</p>\n<p>作为属性名使用，由于每一个Symbol的值都是不相等的，所以Symbol作为对象的属性名，可以保证属性不重名</p>\n<p>Symbol作为对象属性名时不能用.运算符，要用方括号。因为.运算符后面是字符串，所以取到的是字符串sy属性，而不是Symbol值sy属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> syObject = &#123;&#125;;</span><br><span class=\"line\">syObject[sy] = <span class=\"string\">&quot;kk&quot;</span>;</span><br><span class=\"line\">syObject[sy];  <span class=\"comment\">// &quot;kk&quot;</span></span><br><span class=\"line\">syObject.<span class=\"property\">sy</span>;   <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>在定义常量的时候，因为用字符串不能保证常量是独特的，这样会引起一些问题，但是使用Symbol定义常量，这样就可以保证这一组值都不相等，Symbol的值是唯一的，所以不会出现相同值的常量，即可以保证switch按照代码预想的方式执行。</p>\n<p>Symbol.for()</p>\n<p>Symbol.for()类似单例模式，首先会在全局搜索被登记的Symbol中是否有该字符串参数作为名称的Symbol值，如果有即返回该Symbol值，若没有则新建并返回一个以该字符串参数为名的Symbol值，并登记在全局环境中拱搜索</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> yellow = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> yellow1 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">yellow === yellow1;      <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> yellow2 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">yellow1 === yellow2;     <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>Symbol.ketFor()</p>\n<p>Symbol.keyFor()返回一个已经登记的Symbol类型值的key，用来检测该字符作为名称的Symbol值是否已被登记</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> yellow1 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\"><span class=\"title class_\">Symbol</span>.<span class=\"title function_\">keyFor</span>(yellow1);    <span class=\"comment\">// &quot;Yellow&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JSON-API\"><a href=\"#JSON-API\" class=\"headerlink\" title=\"JSON API\"></a>JSON API</h3><h4 id=\"JSON-stringify\"><a href=\"#JSON-stringify\" class=\"headerlink\" title=\"JSON.stringify()\"></a>JSON.stringify()</h4><p>使用方法 JSON.stringify(value,replacer?,space?)</p>\n<p>可选参数replacer用于转换参数value</p>\n<p>节点访问函数，会在值被转为字符串之前转换树节点的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//序列化时，碰到数值，则乘以2</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">replacer</span>(<span class=\"params\">key, value</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> value === <span class=\"string\">&#x27;number&#x27;</span>)&#123;</span><br><span class=\"line\">value = <span class=\"number\">2</span> * value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">5</span>, <span class=\"attr\">b</span>: [<span class=\"number\">2</span>, <span class=\"number\">3</span>] &#125;, replacer)</span><br><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\"><span class=\"string\">&quot;&#123;&quot;</span>a<span class=\"string\">&quot;:10,&quot;</span>b<span class=\"string\">&quot;:[4,6]&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>属性白名单，用于隐藏那些非数组对象内属性不在这个列表中的所有属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">foo</span>: <span class=\"number\">1</span>, <span class=\"attr\">bar</span>: &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>, <span class=\"attr\">bar</span>: <span class=\"number\">1</span>&#125; &#125;, [<span class=\"string\">&#x27;bar&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\"><span class=\"string\">&quot;&#123;&quot;</span>bar<span class=\"string\">&quot;:&#123;&quot;</span>bar<span class=\"string\">&quot;:1&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>可选参数space会影响输出格式，可以插入新行并通过数组和对象的嵌套增加缩进</p>\n<p>如果是数字，则在字符串化时每一级别缩进这个数字值的空格，小于0解释成0，大于10解释成10</p>\n<p>如果是一个字符串，则每一个级别会比上一个级别用该字符串形成的缩进（或该字符串的前十个字符）</p>\n<p>被JSON.stringify忽略的数据，只考虑自身枚举属性，忽略不被支持的值，即除了对象、数组、字符串、布尔值和null以外的任何值。如函数，Symbol值，undefined等，将返回undefined。如果属性值是这些值，该属性直接被忽略，在数组中被解析成null</p>\n<h4 id=\"toJSON-key-方法\"><a href=\"#toJSON-key-方法\" class=\"headerlink\" title=\"toJSON(key)方法\"></a>toJSON(key)方法</h4><p>如果一个被序列化的对象拥有toJSON方法，那么该toJSON方法就会覆盖该对象默认的序列化行为：不是那个对象被序列化，而是调用toJSON方法后的返回值会被序列化</p>\n<h4 id=\"JSON-parse\"><a href=\"#JSON-parse\" class=\"headerlink\" title=\"JSON.parse()\"></a>JSON.parse()</h4><p>使用方法JSON.parse(text,reviver?)</p>\n<p>“”string””是不被js支持的，尽管虽然是标准的JSON字符串。你可以使用’”string”‘代替。如果确实需要这样的行hi，可以使用JSON.stringify(“”)</p>\n<p>revier参数是一个节点访问函数。它可以用来转换解析后的数据</p>\n<h3 id=\"Math-API\"><a href=\"#Math-API\" class=\"headerlink\" title=\"Math API\"></a>Math API</h3><p>Math.abs() 返回参数的绝对值</p>\n<p>Math.ceil() 向上取整，接受一个参数，返回大于该参数的最小整数</p>\n<p>Math.floor() 向下取整</p>\n<p>Math.max(n,m1…) 可接受多个参数，返回最大值</p>\n<p>Math.min(n,n1…) 可接受多个参数，返回最小值</p>\n<p>Math.pow(n,e) 指数运算，返回第一个参数为底数、第二个参数为幂的指数值</p>\n<p>Math.sqrt() 返回参数值的平方根。如果参数是一个负值，则返回NaN</p>\n<p>Math.log() 返回以e为底的自然对数值</p>\n<p>Math.exp() 返回e的指数，也就是常数e的参数次方</p>\n<p>Math.round() 四舍五入</p>\n<p>Math.random() 返回0-1之间的一个伪随机数，可能等于0，但是一定小于1</p>\n<h3 id=\"ES标准\"><a href=\"#ES标准\" class=\"headerlink\" title=\"ES标准\"></a>ES标准</h3><h4 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h4><p><strong>类</strong></p>\n<p>对于熟悉Java，object-c，c#等纯面向对象语言的开发者来说，都会对class有一种特殊的情怀。ES6引入了class，让JavaScript的面向对象编程更加简单和易于理解。</p>\n<p>通过生成实例对象的传统方法是通过构造函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Point</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Point</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;(&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> + <span class=\"string\">&#x27;, &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> + <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>实际上，ES6的class可以看作是一个语法糖，它的绝大部分功能，ES5都能做到，新的calss写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已，上面的代码用ES6的class改写如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;(&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> + <span class=\"string\">&#x27;, &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> + <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ES6的类，完全可以看作构造函数的另一种写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">Point</span> <span class=\"comment\">// &quot;function&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Point</span> === <span class=\"title class_\">Point</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码表明，类的数据类型就是函数，类本身就是指向构造函数</p>\n<p>使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">doStuff</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;stuff&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"keyword\">new</span> <span class=\"title class_\">Bar</span>();</span><br><span class=\"line\">b.<span class=\"title function_\">doStuff</span>() <span class=\"comment\">// &quot;stuff&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>构造函数的prototype属性，在ES6的类上面继续存在。事实上，类的所有方法定义在类的prototype属性上面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">toValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Point</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">  <span class=\"title function_\">toValue</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>constructor()方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor()方法，如果没有显式定义，一个空的constructor()方法会被默认添加</p>\n<p>类的实例</p>\n<p>使用new命令生成类的实例，如果忘记加上new，像函数那样调用Class，将会报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> point = <span class=\"title class_\">Point</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> point = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h4><p>模块的功能主要由export和import组成。每一个模块都有自己单独的作用域，模块之间的相互调用关系是通过export来规定模块对外暴露的接口，通过import来引用其他模块提供的接口。同时还为模块创造了命名空间，防止函数的命名冲突</p>\n<p>ES6允许在一个模块中使用export来导出多个变量或函数</p>\n<p>ES6将一个文件视为一个模块，上面的模块通过export向外输出了一个变量。一个模块也可以同时往外面输出多个变量。</p>\n<p>一条import语句可以同时导入默认函数和其他变量</p>\n<p>import defaultMethod，{otherMethod} from ‘xxx.js’</p>\n<h4 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><p>箭头函数的箭头=&gt;之前是一个空括号、单个的参数名、或用括号包括起的参数名额，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">()=&gt;<span class=\"number\">1</span></span><br><span class=\"line\">v=&gt;v+<span class=\"number\">1</span></span><br><span class=\"line\">(a,b)=&gt;a+b</span><br><span class=\"line\">()=&gt;&#123;<span class=\"title function_\">alert</span>(<span class=\"string\">&quot;foo&quot;</span>)&#125;</span><br><span class=\"line\">e=&gt;&#123;<span class=\"keyword\">if</span>(e===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">1000</span>/e</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不论是箭头函数还是bind，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（臂如卸载监听器），那么你必须自己保存这个引用。</p>\n<h4 id=\"函数参数默认值\"><a href=\"#函数参数默认值\" class=\"headerlink\" title=\"函数参数默认值\"></a>函数参数默认值</h4><p>ES6支持在定义函数的时候为其设置默认值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">height = <span class=\"number\">50</span>,color = <span class=\"string\">&#x27;red&#x27;</span></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><p>ES6支持模板字符串，使得字符串的拼接更加的简洁、直观</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不使用模板字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Your name is&#x27;</span> + first + <span class=\"string\">&#x27;&#x27;</span> + last + <span class=\"string\">&#x27;.&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//使用模板字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">`Your name is <span class=\"subst\">$&#123;first&#125;</span> <span class=\"subst\">$&#123;last&#125;</span>.`</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h4><p>结构赋值语法是JavaScript的一种表达式，可以方便的从数组或者对象中快速提取值赋给定义的变量</p>\n<p>从数组中获取值并赋值到变量中，变量的顺序与数组中对象顺序对应</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo [<span class=\"string\">&quot;one&quot;</span>,<span class=\"string\">&quot;two&quot;</span>,<span class=\"string\">&quot;three&quot;</span>,<span class=\"string\">&quot;four&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> [one,two,three] = foo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果需要忽略某些值，可以按照下面的写法获取想要的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [fisrt, , , last] = foo</span><br></pre></td></tr></table></figure>\n\n<p>如果从数组中没有取到值，你可以为变量设置一个默认值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a,b</span><br><span class=\"line\">[a=<span class=\"number\">5</span>,b=<span class=\"number\">7</span>] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>通过解构赋值可以方便的交换两个变量的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">3</span></span><br><span class=\"line\">[a,b] = [b,a]</span><br></pre></td></tr></table></figure>\n\n<p>获取对象中的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Ming&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"string\">&#x27;18&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">city</span>:<span class=\"string\">&#x27;Shanghai&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name.<span class=\"property\">age</span>,city&#125; = student</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"延展操作符\"><a href=\"#延展操作符\" class=\"headerlink\" title=\"延展操作符\"></a>延展操作符</h4><p>延展操作符…可以在函数调用/数组构造时，将数组表达式或者string在语法层面展开；还可以在构造对象时，将对象表达式按key-value的方式展开</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数调用</span></span><br><span class=\"line\"><span class=\"title function_\">myFunction</span>(...iterableObj)</span><br><span class=\"line\"><span class=\"comment\">//数组构造或字符串</span></span><br><span class=\"line\">[...iterableObj,<span class=\"string\">&#x27;4&#x27;</span>,...<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"comment\">//构造对象时，进行克隆或者属性拷贝（ECMAScript2018规范新特性）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> objClone = &#123;...obj&#125;</span><br></pre></td></tr></table></figure>\n\n<p>应用场景</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在函数调用时候使用延展操作符</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">x,y,z</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y+z</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>,numbers))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(...numbers))</span><br><span class=\"line\"><span class=\"comment\">//构造数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> students = [<span class=\"string\">&#x27;jine&#x27;</span>,<span class=\"string\">&#x27;Tom&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> persons = [<span class=\"string\">&#x27;Tony&#x27;</span>,...students,<span class=\"string\">&#x27;Aaron&#x27;</span>,<span class=\"string\">&#x27;Anna&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">//数组拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [...arr]</span><br><span class=\"line\">arr2.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">//连接多个数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [...arr1,...arr2]</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4 = arr1.<span class=\"title function_\">concat</span>(arr2)</span><br><span class=\"line\"><span class=\"comment\">//在ECMAScript 2018中延展操作符增加了对对象的支持</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">foo</span>:<span class=\"string\">&#x27;bar&#x27;</span>,<span class=\"attr\">x</span>:<span class=\"number\">42</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;<span class=\"attr\">foo</span>:<span class=\"string\">&#x27;bar&#x27;</span>,<span class=\"attr\">y</span>:<span class=\"number\">13</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> cloneObj = &#123;...obj1&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mergeObj = &#123;..<span class=\"property\">obj1</span>,...obj2&#125;</span><br><span class=\"line\">&lt;<span class=\"title class_\">CustomComponent</span> <span class=\"attr\">name</span>:<span class=\"string\">&#x27;jine&#x27;</span>,age=&#123;<span class=\"number\">21</span>&#125; /&gt;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> params = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;jine&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">21</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"title class_\">CustomComponent</span> ...params /&gt;</span><br><span class=\"line\"><span class=\"comment\">//配合解构赋值避免传入一些不需要的参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> params = &#123;</span><br><span class=\"line\">    name：<span class=\"string\">&#x27;123&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">title</span>:<span class=\"string\">&#x27;456&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;type,...other&#125; = params</span><br><span class=\"line\">&lt;<span class=\"title class_\">CustomComponent</span> type=<span class=\"string\">&#x27;normal&#x27;</span> number=&#123;<span class=\"number\">2</span>&#125;,&#123;...ohter&#125; /&gt;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">CustomComponent</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;normal&#x27;</span> <span class=\"attr\">number</span>=<span class=\"string\">&#123;2&#125;</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;123&#x27;</span>,<span class=\"attr\">title</span>=<span class=\"string\">&#x27;456&#x27;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象属性简写\"><a href=\"#对象属性简写\" class=\"headerlink\" title=\"对象属性简写\"></a>对象属性简写</h4><p>在ES6中允许我们在设置一个对象的属性的时候不指定属性名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不使用ES6</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name=<span class=\"string\">&#x27;Ming&#x27;</span>,age=<span class=\"string\">&#x27;18&#x27;</span>,city=<span class=\"string\">&#x27;Shanghai&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:name,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:age,</span><br><span class=\"line\">    <span class=\"attr\">city</span>:city</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用ES6</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name=<span class=\"string\">&#x27;Ming&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;18&#x27;</span>,city=<span class=\"string\">&#x27;Shanghai&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    city</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><p>Promise是异步编程的一种解决方案，比传统的解决方案callback更加的优雅。它最早由社区提出和实现的，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不适用ES6，嵌套两个setTimeout</span></span><br><span class=\"line\"><span class=\"title function_\">settimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hi&#x27;</span>)        </span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)    </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\"><span class=\"comment\">//使用ES6</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> waitSecond = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(resolve,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">waisecond</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> waitSecond    </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hi&quot;</span>)    </span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Let与Const\"><a href=\"#Let与Const\" class=\"headerlink\" title=\"Let与Const\"></a>Let与Const</h4><p>在之前JS是没有块级作用域的，const与let填补了这方面的空白，const与let都是块级作用域</p>\n<h3 id=\"Qs-API\"><a href=\"#Qs-API\" class=\"headerlink\" title=\"Qs API\"></a>Qs API</h3><p>Qs是一个流行的查询参数序列化和解析库。可以将一个普通的object序列化成一个查询字符串，或者反过来将一个查询字符串解析成一个object，而且支持复杂的嵌套</p>\n<p>Qs.parse(‘x[]=1’) //{x:[‘1’]}</p>\n<p>QS.stringify({x:[1]}) //x%5B0%5D=1</p>\n<p>ignoreQueryPrefix和addQueryPrefix</p>\n<p>ignoreQueryPrefix这个参数可以自动帮我们过滤掉location.search前面的？，然后再解析，addQueryPrefix设为true可以在序列化的时候给我们加上？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ 解析</span><br><span class=\"line\"><span class=\"title class_\">Qs</span>.<span class=\"title function_\">parse</span>(<span class=\"string\">&#x27;?x=1&#x27;</span>) <span class=\"comment\">// &#123;?x: &quot;1&quot;&#125;</span></span><br><span class=\"line\"><span class=\"title class_\">Qs</span>.<span class=\"title function_\">parse</span>(<span class=\"string\">&#x27;?x=1&#x27;</span>, &#123;<span class=\"attr\">ignoreQueryPrefix</span>: <span class=\"literal\">true</span>&#125;) <span class=\"comment\">//  &#123;x: &quot;1&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 序列化</span></span><br><span class=\"line\"><span class=\"title class_\">Qs</span>.<span class=\"title function_\">stringify</span>(&#123;<span class=\"attr\">x</span>: <span class=\"string\">&quot;1&quot;</span>&#125;) <span class=\"comment\">//  x=1</span></span><br><span class=\"line\"><span class=\"title class_\">Qs</span>.<span class=\"title function_\">parse</span>(&#123;<span class=\"attr\">x</span>: <span class=\"string\">&quot;1&quot;</span>&#125;, &#123;<span class=\"attr\">addQueryPrefix</span>: <span class=\"literal\">true</span>&#125;) <span class=\"comment\">//  ?x=1</span></span><br></pre></td></tr></table></figure>\n\n<p>数组解析和序列化</p>\n<p>数组序列化有几种方式：indices，brackets，repeat，comma，用来控制字符串的生成格式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;indices&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// &#x27;a[0]=b&amp;a[1]=c&#x27;</span></span><br><span class=\"line\">qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;brackets&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// &#x27;a[]=b&amp;a[]=c&#x27;</span></span><br><span class=\"line\">qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;repeat&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// &#x27;a=b&amp;a=c&#x27;</span></span><br><span class=\"line\">qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;comma&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// &#x27;a=b,c&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上四种方式，序列化得到的结果越来越来精简，但是当面对嵌套数组时，却会导致不同程序的信息丢失，而且丢失的越来月严重</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qs.<span class=\"title function_\">parse</span>(qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [[<span class=\"string\">&#x27;b&#x27;</span>], <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;indices&#x27;</span> &#125;)) <span class=\"comment\">// &#123; a: [[&#x27;b&#x27;], &#x27;c&#x27;] &#125;</span></span><br><span class=\"line\">qs.<span class=\"title function_\">parse</span>(qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [[<span class=\"string\">&#x27;b&#x27;</span>], <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;brackets&#x27;</span> &#125;)) <span class=\"comment\">// &#123;a: [&quot;b&quot;, &quot;c&quot;]&#125;</span></span><br><span class=\"line\">qs.<span class=\"title function_\">parse</span>(qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [[<span class=\"string\">&#x27;b&#x27;</span>], <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;repeat&#x27;</span> &#125;)) <span class=\"comment\">// &#123;a: [&quot;b&quot;, &quot;c&quot;]&#125;</span></span><br><span class=\"line\">qs.<span class=\"title function_\">parse</span>(qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [[<span class=\"string\">&#x27;b&#x27;</span>], <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;comma&#x27;</span> &#125;)) <span class=\"comment\">// &#123;a: &quot;b,c&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>delimiter可以控制哪种字符作为分隔符，由于cookie的格式是使用，一个使用的例子是用来解析cookie</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span> <span class=\"comment\">// &quot;_ga=GA1.2.806176131.1570244607; _jsuid=1335121594; _gid=GA1.2.1453554609.1575990858&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Qs</span>.<span class=\"title function_\">parse</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span>, &#123;<span class=\"attr\">delimiter</span>:<span class=\"string\">&#x27;; &#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h3><h4 id=\"八进制\"><a href=\"#八进制\" class=\"headerlink\" title=\"八进制\"></a>八进制</h4><p>八进制字面值的第一位必须是0，然后是八进制数字序列（0-7）.如果字面值中的数值超出了范围，那么前导0将被忽略，后面的数值被当作十进制数解析</p>\n<p>注意由于某些JavaScript的实现不支持八进制字面量，且八进制数字面量在严格模式下是无效，会导致JavaScript抛出错误</p>\n<h4 id=\"十六进制\"><a href=\"#十六进制\" class=\"headerlink\" title=\"十六进制\"></a>十六进制</h4><p>十六进制字面量的前两位必须是0X，后跟十六进制数字序列（0-9，a-f），字母可大可小。果十六进制中的数值超出范围，如出现g、h等会报错</p>\n<h4 id=\"二进制\"><a href=\"#二进制\" class=\"headerlink\" title=\"二进制\"></a>二进制</h4><p>二进制字面值的前两位必须0b，如果出现除0、1以外的数字会报错</p>\n<h3 id=\"JS模块化\"><a href=\"#JS模块化\" class=\"headerlink\" title=\"JS模块化\"></a>JS模块化</h3><h4 id=\"commomJS\"><a href=\"#commomJS\" class=\"headerlink\" title=\"commomJS\"></a>commomJS</h4><p><strong>特点</strong></p>\n<p>获取依赖模块用同步加载方式，适合服务端，在浏览器使用会出现浏览器假死的情况，因为在服务端，所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间</p>\n<p>模块可以多次加载（多次使用require加载），但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果</p>\n<p><strong>使用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*定义模块*/</span></span><br><span class=\"line\"><span class=\"comment\">//example.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\"> name </span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = name || <span class=\"string\">&quot;Tom&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello~&quot;</span>+name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addFn</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = val.<span class=\"property\">x</span>+val.<span class=\"property\">y</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*使用module.exports的方法*/</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> =&#123;</span><br><span class=\"line\">    <span class=\"attr\">n</span>:n,</span><br><span class=\"line\">    <span class=\"attr\">sayHello</span>:sayHello,</span><br><span class=\"line\">    <span class=\"attr\">addFn</span>:addFn</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    使用exports的方法</span></span><br><span class=\"line\"><span class=\"comment\">    exports.n=n;</span></span><br><span class=\"line\"><span class=\"comment\">    exports.sayHello=sayHello</span></span><br><span class=\"line\"><span class=\"comment\">    exports.addFn=addFn</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    两种输出方式是等价的</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*使用模块*/</span></span><br><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> example = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./example.js&#x27;</span>);<span class=\"comment\">/*同步执行*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addNum = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;x&quot;</span>:<span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;y&quot;</span>:<span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( example )<span class=\"comment\">//查看example输出的对外模块接口；</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( example.<span class=\"property\">n</span> )<span class=\"comment\">//1;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( example.<span class=\"title function_\">sayHello</span>(<span class=\"string\">&quot;Jack&quot;</span>) )<span class=\"comment\">// &quot;Hello~ Jack&quot;;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( example.<span class=\"title function_\">addFn</span>(addNum) ) <span class=\"comment\">//15;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h4><p><strong>特点</strong></p>\n<p>获取依赖模块异步加载方式，适合浏览器端</p>\n<p><strong>使用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*定义模块*/</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    define(id?, dependencies?, factory)</span></span><br><span class=\"line\"><span class=\"comment\">    id:字符串，模块名称(可选)</span></span><br><span class=\"line\"><span class=\"comment\">    dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式</span></span><br><span class=\"line\"><span class=\"comment\">    factory: 工厂方法，返回一个模块函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">//example.js</span></span><br><span class=\"line\"><span class=\"comment\">/*在定义模块时，也使用了其他依赖模块*/</span></span><br><span class=\"line\"><span class=\"title function_\">define</span>([<span class=\"string\">&#x27;Lib&#x27;</span>], <span class=\"keyword\">function</span>(<span class=\"params\">Lib</span>)&#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　　　　　<span class=\"title class_\">Lib</span>.<span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">　　　　　　foo : foo</span><br><span class=\"line\">　　　　&#125;;</span><br><span class=\"line\">　　&#125;);</span><br><span class=\"line\">　　</span><br><span class=\"line\"><span class=\"comment\">/*使用模块*/</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">require( dependencies, factory)</span></span><br><span class=\"line\"><span class=\"comment\">    dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式</span></span><br><span class=\"line\"><span class=\"comment\">    factory: 在这里使用模块完成业务</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    将依赖的模块全部加载执行以后执行回调</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">&#x27;./a&#x27;</span>, <span class=\"string\">&#x27;./b&#x27;</span>], <span class=\"keyword\">function</span> (<span class=\"params\">m1,m2</span>) &#123;</span><br><span class=\"line\">　m1.<span class=\"title function_\">add</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">  m2.<span class=\"title function_\">add</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h4><p><strong>特点</strong></p>\n<p>延迟加载执行</p>\n<p><strong>使用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>, <span class=\"built_in\">exports</span>, <span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 模块代码</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a&#x27;</span>);</span><br><span class=\"line\">  <span class=\"comment\">//require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口。</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//异步加载一个模块，在加载完成时，执行回调</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>.<span class=\"title function_\">async</span>(<span class=\"string\">&#x27;./b&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">b</span>) &#123;</span><br><span class=\"line\">        b.<span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//异步加载多个模块，在加载完成时，执行回调</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>.<span class=\"title function_\">async</span>([<span class=\"string\">&#x27;./c&#x27;</span>, <span class=\"string\">&#x27;./d&#x27;</span>], <span class=\"keyword\">function</span>(<span class=\"params\">c, d</span>) &#123;</span><br><span class=\"line\">        c.<span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">        d.<span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//模块输出</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">doSomething</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 对外提供 foo 属性</span></span><br><span class=\"line\">    <span class=\"built_in\">exports</span>.<span class=\"property\">foo</span> = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对外提供 doSomething 方法</span></span><br><span class=\"line\">    <span class=\"built_in\">exports</span>.<span class=\"property\">doSomething</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 错误用法！！!</span></span><br><span class=\"line\">      <span class=\"built_in\">exports</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">doSomething</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 正确写法</span></span><br><span class=\"line\">      <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">doSomething</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    exports 仅仅是 module.exports 的一个引用。在 factory 内部给 exports 重新赋值时，并不会改变 module.exports 的值。因此给 exports 赋值是无效的，不能用来更改模块接口。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ES6-Moubule\"><a href=\"#ES6-Moubule\" class=\"headerlink\" title=\"ES6 Moubule\"></a>ES6 Moubule</h4><p><strong>特点</strong></p>\n<p>export指令导出接口，以import引入模块</p>\n<p>import的语法和require不同，而且import必须放在文件的最开始，且前面不允许有其他逻辑代码，这和其他所有的编程语言风格一致</p>\n<p><strong>使用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; m &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Megan&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"string\">&#x27;lalala&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; obj &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sun</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; sum &#125;;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> xxxx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 等效于：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;a <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>  xxx  <span class=\"keyword\">from</span> xxxx <span class=\"comment\">//可以省去花括号&#123;&#125;。</span></span><br><span class=\"line\"><span class=\"comment\">// 等效于，或者说就是下面这种写法的简写，是同一个意思</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> xxx &#125; <span class=\"keyword\">from</span> xxxx;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个文件即模块中只能存在一个export default语句，导出一个当前模块的默认对外接口</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//使用默认式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> variable <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./exportDemo&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//同时使用命名式和默认式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> variable, &#123; sum, boy &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./exportDemo&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入一个模块，但不进行任何绑定：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;my-module&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在同一个模块可以同时使用两种导出方式</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sun</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  install,</span><br><span class=\"line\">  <span class=\"title class_\">DottedTitle</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"区分基本类型和对象类型\"><a href=\"#区分基本类型和对象类型\" class=\"headerlink\" title=\"区分基本类型和对象类型\"></a>区分基本类型和对象类型</h3><h4 id=\"基本类型不可变性\"><a href=\"#基本类型不可变性\" class=\"headerlink\" title=\"基本类型不可变性\"></a>基本类型不可变性</h4><p>在ECMAScript标准中，它们被定义为primitive value，即原始值，代表值本身是不可被改变的。</p>\n<p>在JavaScript中，每一个变量在内存中都需要一个空间来存储</p>","more":"<p>内存空间被分为两种，栈内存和堆内存</p>\n<p>栈内存的特点：</p>\n<ul>\n<li><p>存储的值大小固定</p>\n</li>\n<li><p>空间较小</p>\n</li>\n<li><p>可以直接操作其保存的变量，运行效率高</p>\n</li>\n<li><p>由系统自动分配存储空间</p>\n</li>\n</ul>\n<p>由于栈中的内存空间的大小是固定的，那么注定了存储栈中的变量就是不可变的</p>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><ul>\n<li><p>存储的值大小不定，可动态调整</p>\n</li>\n<li><p>空间较大，运行效率低</p>\n</li>\n<li><p>无法直接操作其内部存储，使用引用地址读取</p>\n</li>\n<li><p>通过代码进行分配空间</p>\n</li>\n</ul>\n<p>相对于上面具有不可变性的原始类型，我习惯把对象成为引用类型，引用类型的值实际存储在堆内存中，它在栈中值存储了一个固定长度的地址，这个地址指向堆内存中的值</p>\n<h4 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h4><p>当我们把一个变量的值复制到另一个变量上时，原始类型和引用类型的表现是不一样的</p>\n<p><strong>原始类型</strong></p>\n<p>内存中有一个变量name，值为ConardLi。我们从变量name复制出一个变量name2，此时在内存中创建了一块新的空间用于存储ConardLi，虽然两者值都是相同的，但是两者指向的内存空间完全不同，这两个量参与任何操作都互不影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;fsang&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name2 = name;</span><br><span class=\"line\">name2 = <span class=\"string\">&#x27;code秘密花园&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name); <span class=\"comment\">// fsang;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213164248277.png\" alt=\"image-20221213164248277\"></p>\n<p><strong>引用类型</strong></p>\n<p>当我们复制引用类型的变量时，实际上复制的是栈中存储的地址，所以复制出来的obj2实际上和obj指向的堆中同一个对象。因此，我们改变其中任何一个变量的值，另一个变量都会收到影响，这也是为什么会有深拷贝和浅拷贝的原因</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;ConardLi&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = obj;</span><br><span class=\"line\">obj2.<span class=\"property\">name</span> = <span class=\"string\">&#x27;code秘密花园&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>); <span class=\"comment\">// code秘密花园</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213164404630.png\" alt=\"image-20221213164404630\"></p>\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><p>对于原始类型，比较时会直接比较他们的值，如果值相等，即返回true</p>\n<p>对于引用类型，比较时会比较他们的引用地址，虽然两个变量在堆中存储的对象具有的属性都是相等的，但是它们被存储在了不同的存储空间，因此比较值为false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;ConardLi&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> name2 = <span class=\"string\">&#x27;ConardLi&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name === name2); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;ConardLi&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;ConardLi&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj === obj2); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213164453686.png\" alt=\"image-20221213164453686\"></p>\n<h4 id=\"值传递和引用传递\"><a href=\"#值传递和引用传递\" class=\"headerlink\" title=\"值传递和引用传递\"></a>值传递和引用传递</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;ConardLi&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeValue</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">  name = <span class=\"string\">&#x27;code秘密花园&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">changeValue</span>(name);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);</span><br></pre></td></tr></table></figure>\n\n<p>执行上面的代码，如果最终打印出来的name是’ConarLi’，没有改变，说明函数参数传递的是变量的值，即值传递。如果最终打印的是’code秘密花园’，内书内部的操作可以改变传入的变量，那么说明函数参数传递的是引用，即引用传递。</p>\n<p>很明显，上面的执行结果是’ConarLi’，即函数参数仅仅是被传入变量复制的一个局部变量，改变这个局部变量不会对外部变量产生影响。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;ConardLi&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeValue</span>(<span class=\"params\">obj</span>)&#123;</span><br><span class=\"line\">  obj.<span class=\"property\">name</span> = <span class=\"string\">&#x27;code秘密花园&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">changeValue</span>(obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>); <span class=\"comment\">// code秘密花园</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码可能会产生疑惑，是不是参数是引用类型就是引用传递呢</p>\n<p>首先明确一点，ECMAScript中所有的函数的参数都是按值传递的</p>\n<p>当函数参数是引用类型时，同样将参数复制了一个副本到局部变量，只不过复制的这个副本是指向堆内存中的地址，我们在函数内部对对象的属性进行操作，实际上和外部变量指向堆内存中的值相同，但是这并不代表着引用传递</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeValue</span>(<span class=\"params\">obj</span>)&#123;</span><br><span class=\"line\">  obj.<span class=\"property\">name</span> = <span class=\"string\">&#x27;ConardLi&#x27;</span>;</span><br><span class=\"line\">  obj = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;code秘密花园&#x27;</span>&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">changeValue</span>(obj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj.<span class=\"property\">name</span>); <span class=\"comment\">// ConardLi</span></span><br></pre></td></tr></table></figure>\n\n<p>函数参数传递的并不是变量的引用，而是变量拷贝的副本，当变量是原始类型时，这个副本就是值本身，当变量是引用类型时，这个副本是指向堆内存的地址。</p>\n<p>最后注意：函数参数都是按照值传递的</p>\n<h3 id=\"引用数据类型-对象类型\"><a href=\"#引用数据类型-对象类型\" class=\"headerlink\" title=\"引用数据类型(对象类型)\"></a>引用数据类型(对象类型)</h3><h4 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h4><p><strong>创建数组的方法</strong></p>\n<p>const arr = [1,2,3]// 数组字面量</p>\n<p>const arr = [,,,]// 三元素空位数组（hole array）</p>\n<p>const arr = new Array(4)// [,,,,]</p>\n<p>const arr = new Array(4,2)// [4,2]</p>\n<p>const arr = Array.of(1,2,3)// [1,2,3]</p>\n<p>const arr = Array.of(4)// [4]</p>\n<p><strong>操作数组的方法</strong></p>\n<p>concat() 连接两个或多个数组，并返回已连接数组的副本</p>\n<p>copyWithin() 将数组中的数组元素复制到指定位置或从指定位置复制</p>\n<p>entries() 返回键 / 值对数组迭代对象</p>\n<p>every() 检查数组中的每一个元素是否通过测试</p>\n<p>fill() 用静态值填充数组中的元素</p>\n<p>filter() 使用数组中通过测试的每个元素创建新数组</p>\n<p>find() 返回数组中第一个通过测试的元素的值</p>\n<p>findIndex() 返回数组中通过测试的第一个元素的索引</p>\n<p>forEach() 为每个数组调用函数</p>\n<p>Array.from() 方法用于通过拥有 length 属性的对象或可迭代的对象来返回一个数组</p>\n<p>includes() 检查数组是否包含指定的元素</p>\n<p>indexOf() 在数组中搜索元素并返回其位置</p>\n<p>join() 将数组的所有元素连接成一个字符串</p>\n<p>keys() 返回Array Iteration对象，包含原始数组的键</p>\n<p>lastindexOf() 在数组中搜索元素，从末尾开始，并返回其位置</p>\n<p>map() 使用为每个数组元素调用函数的结果创建新数组</p>\n<p>pop() 删除数组的最后一个元素，并返回该元素</p>\n<p>push() 将新元素添加到数组的末尾，并返回新的长度</p>\n<p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。数组的值减为单个值</p>\n<p>reduceRight() 方法接收一个函数作为累加器，数组中的每个值（从右到左）开始缩减，最终计算为一个值。数组的值减为单个值</p>\n<p>reverse() 反转数组中元素的顺序</p>\n<p>shift() 删除数组的第一个元素，并返回该元素</p>\n<p>slice() 选择数组的一部分，并返回该元素</p>\n<p>some() 检查数组中的任意元素是否通过测试</p>\n<p>sort() 对数组的元素进行排序</p>\n<p>splice() 用于添加或删除数组中的元素</p>\n<p>toString() 将数组转为字符串，并返回结果</p>\n<p>unshift() 将新元素添加到开头，并返回新的长度</p>\n<p>valueOf() 返回数组的元素值</p>\n<p>flat() 将嵌套数组转成一维数组</p>\n<h4 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h4><p>JavaScript对象的原生方法分成两类：Object本身的方法和Object的实例方法</p>\n<p>Object本身的方法就是直接定义在Object的方法。如Object.print = function (o) =&gt; {onsole.log(o)}</p>\n<p>Object的实例方法就是Object原型对象Object.prototype上的方法，可以直接被Object实例直接使用。如Object.prototype.print = function () =&gt;{console.log(this)}   var obj = new Object(); obj.ptrint()</p>\n<p>Object.keys() 参数是一个对象，返回该对象自身的所有属性名</p>\n<p>Object.balues() 返回一个数组，成员是参数对象自身的所有可遍历属性的键值。与Object.keys相对接</p>\n<p>Object.entries() 返回一个数组，成员是参数对象自身的所有可遍历属性的键值对数组</p>\n<p>Object.getOwnPropertyDescriptor() 获取某个属性的描述对象</p>\n<p>Object.defineProperty()通过描述对象，定义某个属性</p>\n<p>Object.defineProperties() 通过描述对象，定义多个属性</p>\n<p>Object.preventExtensions() 防止对象扩展</p>\n<p>Object.isExtensible() 判断对象是否可扩展</p>\n<p>Object.seal() 禁止对象配置</p>\n<p>Object.isSealed() 判断一个对象是否可配置</p>\n<p>Object.freeze() 冻结一个对象</p>\n<p>Object.isFrozen() 判断一个对象是否被冻结</p>\n<p>Object.create() 该方法可以指定对象和属性，返回一个新的对象</p>\n<p>Object.gerPrototypeOf() 获取对象的Prototype对象</p>\n<p>Object.prototype.valueOf() 返回当前对象对应的值</p>\n<p>Object.prototype.toString() 返回当前对象对应的字符串形式</p>\n<p>Object.prototype.toLoacaleString() 返回当前对象对应的本地字符串形式</p>\n<p>Object.prototype.hasOwnProperty() 判断某个属性是否为当前对象的属性，还是继承当前原型对象的属性</p>\n<p>Object.prototype.isPrototypeOf() 判断当前对象是否为另一个对象的原型</p>\n<p>Object.prototype.propertyIsEnumerable() 判断某个属性是否可枚举</p>\n<h4 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h4><p>Function普通函数</p>\n<p>Arrow Function 箭头函数适用于需要匿名哈数的地方</p>\n<p>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象</p>\n<p>不可以当作构造函数，也就是不可以使用new命令，否则会抛出一个错误</p>\n<p>不可以使用argument对象，该对象在函数体内不存在，如果要用可以用rest参数代替</p>\n<p>Generator函数用来返回generator对象，并且它符合可迭代协议和迭代器协议，是一个协程函数，它通过yield命令来暂停某个进程，执行其他线程，通过Generator函数实现异步避免回调地狱，但是因为切换下个状态都要用next方法，所以不常用，一般用es6中async函数解决。</p>\n<p>Async Function用来处理异步操作，避免了回调地狱，让异步代码看起来更友好。</p>\n<p>Async函数调用async的时候会异步执行</p>\n<p>在async函数中使用await的时候，会执行当前代码才会往下继续执行其他代码，实现按照指定顺序执行异步操作</p>\n<p>async函数会返回一个Promise</p>\n<p>apply和call都是函数对象的方法，两者都可以改变函数运行时的this，这个是apply和call的主要使用的功能</p>\n<p>apply和call不同在于，提供的参数格式不一样：apply需要的是一个参数数组，call需要的是参数列表</p>\n<p>bind与apply和call不同的是，apply和call是在每次调用的时候动态指定被调用函数的this和实参，apply与call自动帮我们对目标函数进行调用，而bind是创建一个新的绑定函数固定了目标函数的this值和部分实参</p>\n<p>立即执行函数表达式，是一个在定义时就会立即执行的JS函数(function(){})()</p>\n<p>第一部分是包围在圆括号运算符（）里的一个匿名函数，这个匿名函数拥有独立的词法作用域。这不仅避免了外界访问IIFE中的变量，而且也不会污染全局作用域。</p>\n<p>第二部分再一次使用（）创建了立即执行函数表达式，javaScript引擎到此直接执行函数</p>\n<p>符合以下两点的函数就是纯函数</p>\n<p>相同输入总是会返回相同的输出。返回的结果只依赖于输入的参数且于外部系统状态无关</p>\n<p>没有副作用。不会影响该函数作用域以外的外部状态（比如全局变量、参数）</p>\n<p>柯里化就是把接受多个参数的函数变成接受一个单一参数（最初函数的第一个参数）的函数，并且返回一个新的函数的技术，新函数接受余下参数并返回运算结果</p>\n<h4 id=\"Date\"><a href=\"#Date\" class=\"headerlink\" title=\"Date\"></a>Date</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//-8小时</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cur=<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2018</span>,<span class=\"number\">2</span>,<span class=\"number\">25</span>,<span class=\"number\">14</span>,<span class=\"number\">6</span>,<span class=\"number\">38</span>); <span class=\"comment\">//0~11代表1月~12月</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> year=cur.<span class=\"title function_\">getUTCFullYear</span>(); </span><br><span class=\"line\"><span class=\"keyword\">var</span> month=cur.<span class=\"title function_\">getUTCMonth</span>();  </span><br><span class=\"line\"><span class=\"keyword\">var</span> day=cur.<span class=\"title function_\">getUTCDate</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> hour=cur.<span class=\"title function_\">getUTCHours</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> minutes=cur.<span class=\"title function_\">getUTCMinutes</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> seconds=cur.<span class=\"title function_\">getUTCSeconds</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> mseconds=cur.<span class=\"title function_\">getUTCMilliseconds</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;时间为：&quot;</span>+year+<span class=\"string\">&quot;-&quot;</span>+(month+<span class=\"number\">1</span>)+<span class=\"string\">&quot;-&quot;</span>+day+<span class=\"string\">&quot; &quot;</span>+hour+<span class=\"string\">&quot;:&quot;</span>+minutes+<span class=\"string\">&quot;:&quot;</span>+seconds+<span class=\"string\">&quot;:&quot;</span>+mseconds);</span><br><span class=\"line\"><span class=\"comment\">//打印结果</span></span><br><span class=\"line\">时间为：<span class=\"number\">2018</span>-<span class=\"number\">3</span>-<span class=\"number\">25</span> <span class=\"number\">6</span>:<span class=\"number\">6</span>:<span class=\"number\">38</span>:<span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cur=<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2018</span>,<span class=\"number\">2</span>,<span class=\"number\">25</span>,<span class=\"number\">14</span>,<span class=\"number\">6</span>,<span class=\"number\">38</span>); <span class=\"comment\">//0~11代表1月~12月</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> week=cur.<span class=\"title function_\">getDay</span>();</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr=[<span class=\"string\">&quot;星期一&quot;</span>,<span class=\"string\">&quot;星期二&quot;</span>,<span class=\"string\">&quot;星期三&quot;</span>,<span class=\"string\">&quot;星期四&quot;</span>,<span class=\"string\">&quot;星期五&quot;</span>,<span class=\"string\">&quot;星期六&quot;</span>,<span class=\"string\">&quot;星期天&quot;</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;本地时间是：&quot;</span>+arr[week]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> weekUTC=cur.<span class=\"title function_\">getUTCDay</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;格林威治时间是：&quot;</span>+arr[weekUTC]);</span><br><span class=\"line\"><span class=\"comment\">//打印结果</span></span><br><span class=\"line\">本地时间是：星期一</span><br><span class=\"line\">格林威治时间是：星期一</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Regex\"><a href=\"#Regex\" class=\"headerlink\" title=\"Regex\"></a>Regex</h4><p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213170250905.png\" alt=\"image-20221213170250905\"></p>\n<p>g:global–全文搜索，不添加，搜索到第一个匹配为止</p>\n<p>i:ignore case–忽略小写写，默认大小写敏感</p>\n<p>m:multiplelines–多行搜索</p>\n<h4 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h4><p>SyntaxError 语法错误。多半是哪里的符号写错了</p>\n<p>ReFerenceError 引用错误。根本没有创建过就去使用</p>\n<p>TypeError 类型错误。不是你的方法你去调用了</p>\n<p>RangeError 范围错误</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//可能出错的代码;</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>()&#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err);<span class=\"comment\">//可以提示用户错误的原因是什么</span></span><br><span class=\"line\">&#125;<span class=\"comment\">//后续代码正常执行</span></span><br><span class=\"line\"><span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;抛出一个自定义的错误&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"值类型（基本类型）\"><a href=\"#值类型（基本类型）\" class=\"headerlink\" title=\"值类型（基本类型）\"></a>值类型（基本类型）</h3><h4 id=\"number\"><a href=\"#number\" class=\"headerlink\" title=\"number\"></a>number</h4><p><strong>浮点数</strong></p>\n<p>数值包含小数点，而且小数点后面必须至少有一个数字。</p>\n<p>经典问题：0.1+0.2 ==0.3吗？答案是不等于</p>\n<p>因为在浮点数运算过程中存在舍入误差，之所以存在这种舍入错误，是因为使用了IEEE754，这种错误并非ECMAScript独有，只要是使用这种格式的语言都有这个问题</p>\n<p><strong>值的范围</strong></p>\n<p>正数，负数，0，Infinity</p>\n<p>最小值：Number.MIN_VALUE = 5e-324</p>\n<p>最大值：Number.MAX_VALUE = 1.797693134862315 7e+308</p>\n<p>数值超出JavaScript表示的范围：Infinity（正无穷大）-Infinity（负无穷大）</p>\n<p>确定数值是否为有限数：isFinite()函数</p>\n<p><strong>NaN</strong></p>\n<ul>\n<li>意思：不是数值</li>\n<li>表示本来要返回数值的操作失败了（而不是抛出错误）</li>\n<li>如何涉及NaN的操作始终返回NaN</li>\n<li>NaN不等于包括NaN在内的任何值</li>\n<li>isNaN()函数，判断传入其中的参数是否不是数值</li>\n<li>isNaN()会尝试转换成数值</li>\n</ul>\n<p><strong>数值转换</strong></p>\n<p>Number()函数，可用于任何数据类型</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213171131994.png\" alt=\"image-20221213171131994\"></p>\n<p>pareInt()函数会忽略字符串最前面的空格，第一个非空格字符开始转换，如果第一个字符不是数值字符、加号或减号，parseInt()立即返回NaN</p>\n<p>parseInt()函数可以接受第二个参数，用于指定底数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;AF&quot;</span>, <span class=\"number\">16</span>); <span class=\"comment\">// 175 提供了16进制参数，可以省略0x</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;AF&quot;</span>); <span class=\"comment\">// NaN , 没有提供第二个参数，就不可以</span></span><br></pre></td></tr></table></figure>\n\n<p>parseFloat()和pareInt()函数类似。区别在于parseFloat()识别有效的小数点（也就是第一次出现的小数点，在后面的小数点就都忽略了），还有就是忽略字符串开头的零；parseFloat()只解析十进制值，不能指定底数，十六进制数值始终返回0</p>\n<p>toFixed()保留小数点后N位（最后的结果是字符串）</p>\n<p>valueOf()方法返回对象的数字字面量</p>\n<p>toString()方法将数字转换为字符串</p>\n<p>toLocalString()方法将数字转换为本地惯例格式数字的字符串</p>\n<p>toExponential()方法返回数值四舍五入后的指数表示法(e表示法)的字符串表示，参数表示转换后的小数位数</p>\n<p>oPrecision()方法接收一个参数，即表示数值的所有数字的位数(不包括指数部分)，自动调用toFixed()或toExponential()</p>\n<p><strong>string</strong></p>\n<p>Javascript采用UTF-16编码的Unicode字符集，Javascript中的字符串是由一组无符号的16位值组成的序列，最常用的Unicode字符都是通过16位的内码来表示的，并代表字符串的单个字符</p>\n<p>只要引用了字符传的属性，JavaScript就会将字符串通过new String()的方式转换为对象，这个对象继承了字符串的方法，一旦引用结束，这个新创建的对象就会被销毁。这个临时对象称之为包装对象，字符串（还有数字和布尔值）的属性都是只读的，并不能赋值，有别于其他的对象字符串是存放再堆内存里面的，一旦创建就不可更改，如果想改变某个变量保存的字符串，就必须销毁原来的字符串，再用一个新的来填充该变量</p>\n<p>String类型是字符串的包装类型，可以用String构造函数来创建</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stringObject = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;hello world&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringText = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>String([value])</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">111</span></span><br><span class=\"line\"><span class=\"title class_\">String</span>(a) <span class=\"comment\">// &#x27;111&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>[value].toString()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">转换数字的进制（<span class=\"number\">2</span>-<span class=\"number\">36</span>进制）</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">10</span></span><br><span class=\"line\">a.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>) <span class=\"comment\">//&quot;1010&quot;</span></span><br><span class=\"line\">a.<span class=\"title function_\">toString</span>(<span class=\"number\">8</span>) <span class=\"comment\">//&quot;12&quot;</span></span><br><span class=\"line\">a.<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>) <span class=\"comment\">// &quot;a&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>().<span class=\"title function_\">toString</span>(<span class=\"number\">36</span>).<span class=\"title function_\">subString</span>(<span class=\"number\">3</span>,<span class=\"number\">7</span>) <span class=\"comment\">// 生成四位数的随机验证码</span></span><br><span class=\"line\">判断数据</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"title class_\">Array</span>) <span class=\"comment\">// &quot;[object Function]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([]) <span class=\"comment\">// &quot;[object Array]&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>charAt()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以单字符字符串的形式返回给定位置的那个字符</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">charAt</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// &#x27;e&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>charCodeAt</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回给定位置的字符所对应的字符编码</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">charCodeAt</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// &#x27;101&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>concat()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将一个或者多个字符串拼接起来，返回拼接得到的字符串，可接受任意多个参数</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">charCodeAt</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// &#x27;101&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//实际情况中使用+拼接的情况更多</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>slice(start,end)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">截取字符串，返回一个新的字符串（当传入负值时，会默认加上原数组的长度）</span><br><span class=\"line\">start：指定子字符串的起始位置（可不传，不传返回原字符串）</span><br><span class=\"line\">end：指定字符串到哪个位置结束（可不传，不传默认到原字符最后一个字符结束）</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">slice</span>()); <span class=\"comment\">// &#x27;hello world&#x27;;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>)); <span class=\"comment\">// &#x27;llo world&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// &#x27;llo &#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">slice</span>(-<span class=\"number\">9</span>)); <span class=\"comment\">// &#x27;llo world&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>, -<span class=\"number\">5</span>)); <span class=\"comment\">// &#x27;llo &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>suubstr(start,length)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">截取字符串，返回一个新的子字符串（当第一个参数为负值时，会默认加上原数组的长度，第二个参数为负值时，会默认转为<span class=\"number\">0</span>）</span><br><span class=\"line\">start：指定子字符串的起始位置（可不传，不传则返回原字符串）</span><br><span class=\"line\">length：指定子字符串的长度（可不传，不传默认原字符串最后一个字符结束）</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substr</span>()); <span class=\"comment\">// &#x27;hello world&#x27;;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substr</span>(<span class=\"number\">2</span>)); <span class=\"comment\">// &#x27;llo world&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substr</span>(<span class=\"number\">2</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// &#x27;llo wo&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substr</span>(-<span class=\"number\">2</span>)); <span class=\"comment\">// &#x27;ld&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substr</span>(<span class=\"number\">2</span>, -<span class=\"number\">6</span>)); <span class=\"comment\">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>substring(start,end)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">截取字符串，返回一个新的子字符串（当传入负值时，会将所有负值转为<span class=\"number\">0</span>。如果start大于end,两个值会互相调换，保持start&lt;end）</span><br><span class=\"line\">start：指定子字符串的起始位置（可不传，不传返回原字符串）</span><br><span class=\"line\">end：指定字符串到哪里结束（可不传，不传默认到原字符串最后一个字符结束）</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substring</span>()); <span class=\"comment\">// &#x27;hello world&#x27;;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substring</span>(<span class=\"number\">2</span>)); <span class=\"comment\">// &#x27;llo world&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substring</span>(<span class=\"number\">2</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// &#x27;llo &#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substring</span>(-<span class=\"number\">3</span>)); <span class=\"comment\">// &#x27;hello world&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">substring</span>(<span class=\"number\">2</span>, -<span class=\"number\">6</span>)); <span class=\"comment\">// &#x27;he&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>indexOf(char,start)和lastIndexOf(char, start)</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">indexOf从字符串的开头向后搜索子字符串，返回第一个子字符串的位置（未找到返回-<span class=\"number\">1</span>）</span><br><span class=\"line\">lastIndexOf从字符串的末尾向前搜索子字符串，返回子字符串的位置（没找到则返回-<span class=\"number\">1</span>）</span><br><span class=\"line\">char：需要查找的字符串</span><br><span class=\"line\">start：从哪个位置开始向后查找，可不传</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;o&#x27;</span>)); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;o&#x27;</span>)); <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;o&#x27;</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;o&#x27;</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>trim()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">去除原始字符串中的前置及后缀空格，返回一个新的字符串</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;  hello world  &#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">trim</span>()); <span class=\"comment\">// &#x27;hello world&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue); <span class=\"comment\">// &#x27;  hello world  &#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>toLowerCase()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将字符串转为小写</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;HELLO WORLD&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">toLowerCase</span>()); <span class=\"comment\">// &#x27;hello world&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">toLocaleLowerCase</span>()); <span class=\"comment\">// &#x27;hello world&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>toUpperCase()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将字符串转为大写</span><br><span class=\"line\"><span class=\"keyword\">var</span> stringValue = <span class=\"string\">&#x27;hello world&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">toUpperCase</span>()); <span class=\"comment\">// &#x27;HELLO WORLD&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(stringValue.<span class=\"title function_\">toLocalUpperCase</span>()); <span class=\"comment\">// &#x27;HELLO WORLD&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>match()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">match只接受一个参数，要么是一个正则表达式，要么是一个<span class=\"title class_\">RegExp</span>对象，返回一个数组</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"string\">&#x27;cat, bat, sat, fat&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/.at/</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> matches = test.<span class=\"title function_\">match</span>(pattern);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(matches); <span class=\"comment\">// 输出匹配到的东西</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>search()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">search</span>()只接受一个参数，要么是一个正则表达式，要么是一个<span class=\"title class_\">RegExp</span>对象</span><br><span class=\"line\">返回字符串中第一个匹配的索引，如果没有，则返回-<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"string\">&#x27;cat, bat, sat, fat&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = test.<span class=\"title function_\">search</span>(<span class=\"regexp\">/at/</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index);</span><br></pre></td></tr></table></figure>\n\n<p><strong>replace()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">replace</span>()接受两个参数，第一个参数可以是一个<span class=\"title class_\">RegExp</span>对象或一个字符串（这个字符串不会被转换成正则表达式），第二个参数可以是简化替换子字符串的操作</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"string\">&#x27;cat, bat, sat, fat&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;at&#x27;</span>, <span class=\"string\">&#x27;ond&#x27;</span>)); <span class=\"comment\">// &#x27;cond, bat, sat, fat&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/at/g</span>, <span class=\"string\">&#x27;ond&#x27;</span>)); <span class=\"comment\">// &#x27;cond, bond, sond, fond&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>split()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以基于指定的分隔符将一个字符串分割成多个字符串，返回一个数组</span><br><span class=\"line\">第一个参数可以是一个字符串或一个<span class=\"title class_\">RexExp</span>对象</span><br><span class=\"line\">第二个参数用于指定数组的大小，可不传</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"string\">&#x27;red, blue, green, yellow&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>)); <span class=\"comment\">// &#x27;[&#x27;red&#x27;, blue&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;,&#x27;</span>, <span class=\"number\">2</span>)); <span class=\"comment\">// [&#x27;red&#x27;, blue&#x27;]</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(test.<span class=\"title function_\">split</span>(<span class=\"regexp\">/[^,]+/</span>)); <span class=\"comment\">// [&#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a><strong>boolean</strong></h5><p>boolean只有两个值true和fasle</p>\n<p>JavaScript中的任何值都可以转换成布尔值，其中只有六个转换为false，他们分别是 “0、NaN、null、undefined、空字符串” ，其余的都是true</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213172416788.png\" alt=\"image-20221213172416788\"></p>\n<p>tostring(),把布尔值转为字符串，并返回结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"number\">1</span>) <span class=\"comment\">// Boolean &#123;true&#125;</span></span><br><span class=\"line\">a.<span class=\"title function_\">toString</span>() <span class=\"comment\">//‘true’</span></span><br></pre></td></tr></table></figure>\n\n<p>valueOf()返回Boolean对象的原始值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"number\">1</span>) <span class=\"comment\">// Boolean &#123;true&#125;</span></span><br><span class=\"line\">a.<span class=\"title function_\">valueOf</span>() <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>null/undefined</strong></p>\n<ol>\n<li>undefined不是关键字，而null是关键字</li>\n<li>undefined和null被转换为布尔值的时候，两者都为false;</li>\n<li>undefined在和null进行==比较时两者相等，全等于比较时两者不等</li>\n<li>使用Number()对undefined和null进行类型转换,undefined为NaN，null为0</li>\n<li>undefined本质上是window的一个属性，而null是一个对象；</li>\n<li>null表示没有对象，即不应该有值，经常作用函数的参数，或作为原型链的重点。undefined表示缺少值，即应该有值，但是还没有赋予（变量提升时会默认赋值为undefined，函数参数为提供默认为undefined，函数的返回值默认为undefined）</li>\n</ol>\n<p><strong>symbol</strong></p>\n<p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值，最大的用法就是用来定义对象的唯一属性名</p>\n<p>基本用法</p>\n<p>Symbol函数不能用new命令，因为Symbol是原始数据类型，不是对象。可以接受一个字符串作为参数，为新建的Symbol提供描述，用来描述在控制台或者作为字符串的时候使用，便于区分</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sy = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;yy&#x27;</span>) <span class=\"comment\">// Symbol(kk)</span></span><br><span class=\"line\"><span class=\"title function_\">typeof</span>(sy)  <span class=\"comment\">//&quot;symbol&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//相同的参数Symbol（）放回的值不相等</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sy1 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;kk&#x27;</span>)</span><br><span class=\"line\">sy === sy1 <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n\n<p>使用场景</p>\n<p>作为属性名使用，由于每一个Symbol的值都是不相等的，所以Symbol作为对象的属性名，可以保证属性不重名</p>\n<p>Symbol作为对象属性名时不能用.运算符，要用方括号。因为.运算符后面是字符串，所以取到的是字符串sy属性，而不是Symbol值sy属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> syObject = &#123;&#125;;</span><br><span class=\"line\">syObject[sy] = <span class=\"string\">&quot;kk&quot;</span>;</span><br><span class=\"line\">syObject[sy];  <span class=\"comment\">// &quot;kk&quot;</span></span><br><span class=\"line\">syObject.<span class=\"property\">sy</span>;   <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>在定义常量的时候，因为用字符串不能保证常量是独特的，这样会引起一些问题，但是使用Symbol定义常量，这样就可以保证这一组值都不相等，Symbol的值是唯一的，所以不会出现相同值的常量，即可以保证switch按照代码预想的方式执行。</p>\n<p>Symbol.for()</p>\n<p>Symbol.for()类似单例模式，首先会在全局搜索被登记的Symbol中是否有该字符串参数作为名称的Symbol值，如果有即返回该Symbol值，若没有则新建并返回一个以该字符串参数为名的Symbol值，并登记在全局环境中拱搜索</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> yellow = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> yellow1 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">yellow === yellow1;      <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> yellow2 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\">yellow1 === yellow2;     <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>Symbol.ketFor()</p>\n<p>Symbol.keyFor()返回一个已经登记的Symbol类型值的key，用来检测该字符作为名称的Symbol值是否已被登记</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> yellow1 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&quot;Yellow&quot;</span>);</span><br><span class=\"line\"><span class=\"title class_\">Symbol</span>.<span class=\"title function_\">keyFor</span>(yellow1);    <span class=\"comment\">// &quot;Yellow&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JSON-API\"><a href=\"#JSON-API\" class=\"headerlink\" title=\"JSON API\"></a>JSON API</h3><h4 id=\"JSON-stringify\"><a href=\"#JSON-stringify\" class=\"headerlink\" title=\"JSON.stringify()\"></a>JSON.stringify()</h4><p>使用方法 JSON.stringify(value,replacer?,space?)</p>\n<p>可选参数replacer用于转换参数value</p>\n<p>节点访问函数，会在值被转为字符串之前转换树节点的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//序列化时，碰到数值，则乘以2</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">replacer</span>(<span class=\"params\">key, value</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> value === <span class=\"string\">&#x27;number&#x27;</span>)&#123;</span><br><span class=\"line\">value = <span class=\"number\">2</span> * value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//调用</span></span><br><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: <span class=\"number\">5</span>, <span class=\"attr\">b</span>: [<span class=\"number\">2</span>, <span class=\"number\">3</span>] &#125;, replacer)</span><br><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\"><span class=\"string\">&quot;&#123;&quot;</span>a<span class=\"string\">&quot;:10,&quot;</span>b<span class=\"string\">&quot;:[4,6]&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>属性白名单，用于隐藏那些非数组对象内属性不在这个列表中的所有属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">foo</span>: <span class=\"number\">1</span>, <span class=\"attr\">bar</span>: &#123;<span class=\"attr\">foo</span>: <span class=\"number\">1</span>, <span class=\"attr\">bar</span>: <span class=\"number\">1</span>&#125; &#125;, [<span class=\"string\">&#x27;bar&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\"><span class=\"string\">&quot;&#123;&quot;</span>bar<span class=\"string\">&quot;:&#123;&quot;</span>bar<span class=\"string\">&quot;:1&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>可选参数space会影响输出格式，可以插入新行并通过数组和对象的嵌套增加缩进</p>\n<p>如果是数字，则在字符串化时每一级别缩进这个数字值的空格，小于0解释成0，大于10解释成10</p>\n<p>如果是一个字符串，则每一个级别会比上一个级别用该字符串形成的缩进（或该字符串的前十个字符）</p>\n<p>被JSON.stringify忽略的数据，只考虑自身枚举属性，忽略不被支持的值，即除了对象、数组、字符串、布尔值和null以外的任何值。如函数，Symbol值，undefined等，将返回undefined。如果属性值是这些值，该属性直接被忽略，在数组中被解析成null</p>\n<h4 id=\"toJSON-key-方法\"><a href=\"#toJSON-key-方法\" class=\"headerlink\" title=\"toJSON(key)方法\"></a>toJSON(key)方法</h4><p>如果一个被序列化的对象拥有toJSON方法，那么该toJSON方法就会覆盖该对象默认的序列化行为：不是那个对象被序列化，而是调用toJSON方法后的返回值会被序列化</p>\n<h4 id=\"JSON-parse\"><a href=\"#JSON-parse\" class=\"headerlink\" title=\"JSON.parse()\"></a>JSON.parse()</h4><p>使用方法JSON.parse(text,reviver?)</p>\n<p>“”string””是不被js支持的，尽管虽然是标准的JSON字符串。你可以使用’”string”‘代替。如果确实需要这样的行hi，可以使用JSON.stringify(“”)</p>\n<p>revier参数是一个节点访问函数。它可以用来转换解析后的数据</p>\n<h3 id=\"Math-API\"><a href=\"#Math-API\" class=\"headerlink\" title=\"Math API\"></a>Math API</h3><p>Math.abs() 返回参数的绝对值</p>\n<p>Math.ceil() 向上取整，接受一个参数，返回大于该参数的最小整数</p>\n<p>Math.floor() 向下取整</p>\n<p>Math.max(n,m1…) 可接受多个参数，返回最大值</p>\n<p>Math.min(n,n1…) 可接受多个参数，返回最小值</p>\n<p>Math.pow(n,e) 指数运算，返回第一个参数为底数、第二个参数为幂的指数值</p>\n<p>Math.sqrt() 返回参数值的平方根。如果参数是一个负值，则返回NaN</p>\n<p>Math.log() 返回以e为底的自然对数值</p>\n<p>Math.exp() 返回e的指数，也就是常数e的参数次方</p>\n<p>Math.round() 四舍五入</p>\n<p>Math.random() 返回0-1之间的一个伪随机数，可能等于0，但是一定小于1</p>\n<h3 id=\"ES标准\"><a href=\"#ES标准\" class=\"headerlink\" title=\"ES标准\"></a>ES标准</h3><h4 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h4><p><strong>类</strong></p>\n<p>对于熟悉Java，object-c，c#等纯面向对象语言的开发者来说，都会对class有一种特殊的情怀。ES6引入了class，让JavaScript的面向对象编程更加简单和易于理解。</p>\n<p>通过生成实例对象的传统方法是通过构造函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Point</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Point</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;(&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> + <span class=\"string\">&#x27;, &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> + <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>实际上，ES6的class可以看作是一个语法糖，它的绝大部分功能，ES5都能做到，新的calss写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已，上面的代码用ES6的class改写如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">x, y</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;(&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> + <span class=\"string\">&#x27;, &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> + <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ES6的类，完全可以看作构造函数的另一种写法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"title class_\">Point</span> <span class=\"comment\">// &quot;function&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Point</span> === <span class=\"title class_\">Point</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码表明，类的数据类型就是函数，类本身就是指向构造函数</p>\n<p>使用的时候，也是直接对类使用new命令，跟构造函数的用法完全一致</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bar</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">doStuff</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;stuff&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"keyword\">new</span> <span class=\"title class_\">Bar</span>();</span><br><span class=\"line\">b.<span class=\"title function_\">doStuff</span>() <span class=\"comment\">// &quot;stuff&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>构造函数的prototype属性，在ES6的类上面继续存在。事实上，类的所有方法定义在类的prototype属性上面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">toValue</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Point</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">  <span class=\"title function_\">toString</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">  <span class=\"title function_\">toValue</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>constructor()方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor()方法，如果没有显式定义，一个空的constructor()方法会被默认添加</p>\n<p>类的实例</p>\n<p>使用new命令生成类的实例，如果忘记加上new，像函数那样调用Class，将会报错</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> point = <span class=\"title class_\">Point</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> point = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模块化\"><a href=\"#模块化\" class=\"headerlink\" title=\"模块化\"></a>模块化</h4><p>模块的功能主要由export和import组成。每一个模块都有自己单独的作用域，模块之间的相互调用关系是通过export来规定模块对外暴露的接口，通过import来引用其他模块提供的接口。同时还为模块创造了命名空间，防止函数的命名冲突</p>\n<p>ES6允许在一个模块中使用export来导出多个变量或函数</p>\n<p>ES6将一个文件视为一个模块，上面的模块通过export向外输出了一个变量。一个模块也可以同时往外面输出多个变量。</p>\n<p>一条import语句可以同时导入默认函数和其他变量</p>\n<p>import defaultMethod，{otherMethod} from ‘xxx.js’</p>\n<h4 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h4><p>箭头函数的箭头=&gt;之前是一个空括号、单个的参数名、或用括号包括起的参数名额，而箭头之后可以是一个表达式（作为函数的返回值），或者是用花括号括起的函数体（需要自行通过return来返回值，否则返回的是undefined）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">()=&gt;<span class=\"number\">1</span></span><br><span class=\"line\">v=&gt;v+<span class=\"number\">1</span></span><br><span class=\"line\">(a,b)=&gt;a+b</span><br><span class=\"line\">()=&gt;&#123;<span class=\"title function_\">alert</span>(<span class=\"string\">&quot;foo&quot;</span>)&#125;</span><br><span class=\"line\">e=&gt;&#123;<span class=\"keyword\">if</span>(e===<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">1000</span>/e</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不论是箭头函数还是bind，每次被执行都返回的是一个新的函数引用，因此如果你还需要函数的引用去做一些别的事情（臂如卸载监听器），那么你必须自己保存这个引用。</p>\n<h4 id=\"函数参数默认值\"><a href=\"#函数参数默认值\" class=\"headerlink\" title=\"函数参数默认值\"></a>函数参数默认值</h4><p>ES6支持在定义函数的时候为其设置默认值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">height = <span class=\"number\">50</span>,color = <span class=\"string\">&#x27;red&#x27;</span></span>)&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h4><p>ES6支持模板字符串，使得字符串的拼接更加的简洁、直观</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不使用模板字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;Your name is&#x27;</span> + first + <span class=\"string\">&#x27;&#x27;</span> + last + <span class=\"string\">&#x27;.&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//使用模板字符串</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">`Your name is <span class=\"subst\">$&#123;first&#125;</span> <span class=\"subst\">$&#123;last&#125;</span>.`</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h4><p>结构赋值语法是JavaScript的一种表达式，可以方便的从数组或者对象中快速提取值赋给定义的变量</p>\n<p>从数组中获取值并赋值到变量中，变量的顺序与数组中对象顺序对应</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo [<span class=\"string\">&quot;one&quot;</span>,<span class=\"string\">&quot;two&quot;</span>,<span class=\"string\">&quot;three&quot;</span>,<span class=\"string\">&quot;four&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> [one,two,three] = foo</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果需要忽略某些值，可以按照下面的写法获取想要的值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> [fisrt, , , last] = foo</span><br></pre></td></tr></table></figure>\n\n<p>如果从数组中没有取到值，你可以为变量设置一个默认值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a,b</span><br><span class=\"line\">[a=<span class=\"number\">5</span>,b=<span class=\"number\">7</span>] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>通过解构赋值可以方便的交换两个变量的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">3</span></span><br><span class=\"line\">[a,b] = [b,a]</span><br></pre></td></tr></table></figure>\n\n<p>获取对象中的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Ming&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"string\">&#x27;18&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">city</span>:<span class=\"string\">&#x27;Shanghai&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name.<span class=\"property\">age</span>,city&#125; = student</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"延展操作符\"><a href=\"#延展操作符\" class=\"headerlink\" title=\"延展操作符\"></a>延展操作符</h4><p>延展操作符…可以在函数调用/数组构造时，将数组表达式或者string在语法层面展开；还可以在构造对象时，将对象表达式按key-value的方式展开</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数调用</span></span><br><span class=\"line\"><span class=\"title function_\">myFunction</span>(...iterableObj)</span><br><span class=\"line\"><span class=\"comment\">//数组构造或字符串</span></span><br><span class=\"line\">[...iterableObj,<span class=\"string\">&#x27;4&#x27;</span>,...<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"comment\">//构造对象时，进行克隆或者属性拷贝（ECMAScript2018规范新特性）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> objClone = &#123;...obj&#125;</span><br></pre></td></tr></table></figure>\n\n<p>应用场景</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在函数调用时候使用延展操作符</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">x,y,z</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y+z</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> numbers = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>,numbers))</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(...numbers))</span><br><span class=\"line\"><span class=\"comment\">//构造数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> students = [<span class=\"string\">&#x27;jine&#x27;</span>,<span class=\"string\">&#x27;Tom&#x27;</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> persons = [<span class=\"string\">&#x27;Tony&#x27;</span>,...students,<span class=\"string\">&#x27;Aaron&#x27;</span>,<span class=\"string\">&#x27;Anna&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">//数组拷贝</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [...arr]</span><br><span class=\"line\">arr2.<span class=\"title function_\">push</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">//连接多个数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [...arr1,...arr2]</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr4 = arr1.<span class=\"title function_\">concat</span>(arr2)</span><br><span class=\"line\"><span class=\"comment\">//在ECMAScript 2018中延展操作符增加了对对象的支持</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">foo</span>:<span class=\"string\">&#x27;bar&#x27;</span>,<span class=\"attr\">x</span>:<span class=\"number\">42</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;<span class=\"attr\">foo</span>:<span class=\"string\">&#x27;bar&#x27;</span>,<span class=\"attr\">y</span>:<span class=\"number\">13</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> cloneObj = &#123;...obj1&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mergeObj = &#123;..<span class=\"property\">obj1</span>,...obj2&#125;</span><br><span class=\"line\">&lt;<span class=\"title class_\">CustomComponent</span> <span class=\"attr\">name</span>:<span class=\"string\">&#x27;jine&#x27;</span>,age=&#123;<span class=\"number\">21</span>&#125; /&gt;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> params = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;jine&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">21</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"title class_\">CustomComponent</span> ...params /&gt;</span><br><span class=\"line\"><span class=\"comment\">//配合解构赋值避免传入一些不需要的参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> params = &#123;</span><br><span class=\"line\">    name：<span class=\"string\">&#x27;123&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">title</span>:<span class=\"string\">&#x27;456&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;aaa&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123;type,...other&#125; = params</span><br><span class=\"line\">&lt;<span class=\"title class_\">CustomComponent</span> type=<span class=\"string\">&#x27;normal&#x27;</span> number=&#123;<span class=\"number\">2</span>&#125;,&#123;...ohter&#125; /&gt;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">CustomComponent</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;normal&#x27;</span> <span class=\"attr\">number</span>=<span class=\"string\">&#123;2&#125;</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;123&#x27;</span>,<span class=\"attr\">title</span>=<span class=\"string\">&#x27;456&#x27;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"对象属性简写\"><a href=\"#对象属性简写\" class=\"headerlink\" title=\"对象属性简写\"></a>对象属性简写</h4><p>在ES6中允许我们在设置一个对象的属性的时候不指定属性名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不使用ES6</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name=<span class=\"string\">&#x27;Ming&#x27;</span>,age=<span class=\"string\">&#x27;18&#x27;</span>,city=<span class=\"string\">&#x27;Shanghai&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:name,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:age,</span><br><span class=\"line\">    <span class=\"attr\">city</span>:city</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用ES6</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name=<span class=\"string\">&#x27;Ming&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;18&#x27;</span>,city=<span class=\"string\">&#x27;Shanghai&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    city</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h4><p>Promise是异步编程的一种解决方案，比传统的解决方案callback更加的优雅。它最早由社区提出和实现的，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//不适用ES6，嵌套两个setTimeout</span></span><br><span class=\"line\"><span class=\"title function_\">settimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hi&#x27;</span>)        </span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)    </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\"><span class=\"comment\">//使用ES6</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> waitSecond = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(resolve,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">waisecond</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> waitSecond    </span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Hi&quot;</span>)    </span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Let与Const\"><a href=\"#Let与Const\" class=\"headerlink\" title=\"Let与Const\"></a>Let与Const</h4><p>在之前JS是没有块级作用域的，const与let填补了这方面的空白，const与let都是块级作用域</p>\n<h3 id=\"Qs-API\"><a href=\"#Qs-API\" class=\"headerlink\" title=\"Qs API\"></a>Qs API</h3><p>Qs是一个流行的查询参数序列化和解析库。可以将一个普通的object序列化成一个查询字符串，或者反过来将一个查询字符串解析成一个object，而且支持复杂的嵌套</p>\n<p>Qs.parse(‘x[]=1’) //{x:[‘1’]}</p>\n<p>QS.stringify({x:[1]}) //x%5B0%5D=1</p>\n<p>ignoreQueryPrefix和addQueryPrefix</p>\n<p>ignoreQueryPrefix这个参数可以自动帮我们过滤掉location.search前面的？，然后再解析，addQueryPrefix设为true可以在序列化的时候给我们加上？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ 解析</span><br><span class=\"line\"><span class=\"title class_\">Qs</span>.<span class=\"title function_\">parse</span>(<span class=\"string\">&#x27;?x=1&#x27;</span>) <span class=\"comment\">// &#123;?x: &quot;1&quot;&#125;</span></span><br><span class=\"line\"><span class=\"title class_\">Qs</span>.<span class=\"title function_\">parse</span>(<span class=\"string\">&#x27;?x=1&#x27;</span>, &#123;<span class=\"attr\">ignoreQueryPrefix</span>: <span class=\"literal\">true</span>&#125;) <span class=\"comment\">//  &#123;x: &quot;1&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 序列化</span></span><br><span class=\"line\"><span class=\"title class_\">Qs</span>.<span class=\"title function_\">stringify</span>(&#123;<span class=\"attr\">x</span>: <span class=\"string\">&quot;1&quot;</span>&#125;) <span class=\"comment\">//  x=1</span></span><br><span class=\"line\"><span class=\"title class_\">Qs</span>.<span class=\"title function_\">parse</span>(&#123;<span class=\"attr\">x</span>: <span class=\"string\">&quot;1&quot;</span>&#125;, &#123;<span class=\"attr\">addQueryPrefix</span>: <span class=\"literal\">true</span>&#125;) <span class=\"comment\">//  ?x=1</span></span><br></pre></td></tr></table></figure>\n\n<p>数组解析和序列化</p>\n<p>数组序列化有几种方式：indices，brackets，repeat，comma，用来控制字符串的生成格式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;indices&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// &#x27;a[0]=b&amp;a[1]=c&#x27;</span></span><br><span class=\"line\">qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;brackets&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// &#x27;a[]=b&amp;a[]=c&#x27;</span></span><br><span class=\"line\">qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;repeat&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// &#x27;a=b&amp;a=c&#x27;</span></span><br><span class=\"line\">qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [<span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;comma&#x27;</span> &#125;)</span><br><span class=\"line\"><span class=\"comment\">// &#x27;a=b,c&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上四种方式，序列化得到的结果越来越来精简，但是当面对嵌套数组时，却会导致不同程序的信息丢失，而且丢失的越来月严重</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qs.<span class=\"title function_\">parse</span>(qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [[<span class=\"string\">&#x27;b&#x27;</span>], <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;indices&#x27;</span> &#125;)) <span class=\"comment\">// &#123; a: [[&#x27;b&#x27;], &#x27;c&#x27;] &#125;</span></span><br><span class=\"line\">qs.<span class=\"title function_\">parse</span>(qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [[<span class=\"string\">&#x27;b&#x27;</span>], <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;brackets&#x27;</span> &#125;)) <span class=\"comment\">// &#123;a: [&quot;b&quot;, &quot;c&quot;]&#125;</span></span><br><span class=\"line\">qs.<span class=\"title function_\">parse</span>(qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [[<span class=\"string\">&#x27;b&#x27;</span>], <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;repeat&#x27;</span> &#125;)) <span class=\"comment\">// &#123;a: [&quot;b&quot;, &quot;c&quot;]&#125;</span></span><br><span class=\"line\">qs.<span class=\"title function_\">parse</span>(qs.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">a</span>: [[<span class=\"string\">&#x27;b&#x27;</span>], <span class=\"string\">&#x27;c&#x27;</span>] &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;comma&#x27;</span> &#125;)) <span class=\"comment\">// &#123;a: &quot;b,c&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>delimiter可以控制哪种字符作为分隔符，由于cookie的格式是使用，一个使用的例子是用来解析cookie</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span> <span class=\"comment\">// &quot;_ga=GA1.2.806176131.1570244607; _jsuid=1335121594; _gid=GA1.2.1453554609.1575990858&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Qs</span>.<span class=\"title function_\">parse</span>(<span class=\"variable language_\">document</span>.<span class=\"property\">cookie</span>, &#123;<span class=\"attr\">delimiter</span>:<span class=\"string\">&#x27;; &#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h3><h4 id=\"八进制\"><a href=\"#八进制\" class=\"headerlink\" title=\"八进制\"></a>八进制</h4><p>八进制字面值的第一位必须是0，然后是八进制数字序列（0-7）.如果字面值中的数值超出了范围，那么前导0将被忽略，后面的数值被当作十进制数解析</p>\n<p>注意由于某些JavaScript的实现不支持八进制字面量，且八进制数字面量在严格模式下是无效，会导致JavaScript抛出错误</p>\n<h4 id=\"十六进制\"><a href=\"#十六进制\" class=\"headerlink\" title=\"十六进制\"></a>十六进制</h4><p>十六进制字面量的前两位必须是0X，后跟十六进制数字序列（0-9，a-f），字母可大可小。果十六进制中的数值超出范围，如出现g、h等会报错</p>\n<h4 id=\"二进制\"><a href=\"#二进制\" class=\"headerlink\" title=\"二进制\"></a>二进制</h4><p>二进制字面值的前两位必须0b，如果出现除0、1以外的数字会报错</p>\n<h3 id=\"JS模块化\"><a href=\"#JS模块化\" class=\"headerlink\" title=\"JS模块化\"></a>JS模块化</h3><h4 id=\"commomJS\"><a href=\"#commomJS\" class=\"headerlink\" title=\"commomJS\"></a>commomJS</h4><p><strong>特点</strong></p>\n<p>获取依赖模块用同步加载方式，适合服务端，在浏览器使用会出现浏览器假死的情况，因为在服务端，所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间</p>\n<p>模块可以多次加载（多次使用require加载），但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果</p>\n<p><strong>使用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*定义模块*/</span></span><br><span class=\"line\"><span class=\"comment\">//example.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\"> name </span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = name || <span class=\"string\">&quot;Tom&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello~&quot;</span>+name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addFn</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = val.<span class=\"property\">x</span>+val.<span class=\"property\">y</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*使用module.exports的方法*/</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> =&#123;</span><br><span class=\"line\">    <span class=\"attr\">n</span>:n,</span><br><span class=\"line\">    <span class=\"attr\">sayHello</span>:sayHello,</span><br><span class=\"line\">    <span class=\"attr\">addFn</span>:addFn</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    使用exports的方法</span></span><br><span class=\"line\"><span class=\"comment\">    exports.n=n;</span></span><br><span class=\"line\"><span class=\"comment\">    exports.sayHello=sayHello</span></span><br><span class=\"line\"><span class=\"comment\">    exports.addFn=addFn</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    两种输出方式是等价的</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*使用模块*/</span></span><br><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> example = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./example.js&#x27;</span>);<span class=\"comment\">/*同步执行*/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addNum = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;x&quot;</span>:<span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;y&quot;</span>:<span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( example )<span class=\"comment\">//查看example输出的对外模块接口；</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( example.<span class=\"property\">n</span> )<span class=\"comment\">//1;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( example.<span class=\"title function_\">sayHello</span>(<span class=\"string\">&quot;Jack&quot;</span>) )<span class=\"comment\">// &quot;Hello~ Jack&quot;;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>( example.<span class=\"title function_\">addFn</span>(addNum) ) <span class=\"comment\">//15;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h4><p><strong>特点</strong></p>\n<p>获取依赖模块异步加载方式，适合浏览器端</p>\n<p><strong>使用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*定义模块*/</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    define(id?, dependencies?, factory)</span></span><br><span class=\"line\"><span class=\"comment\">    id:字符串，模块名称(可选)</span></span><br><span class=\"line\"><span class=\"comment\">    dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式</span></span><br><span class=\"line\"><span class=\"comment\">    factory: 工厂方法，返回一个模块函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">//example.js</span></span><br><span class=\"line\"><span class=\"comment\">/*在定义模块时，也使用了其他依赖模块*/</span></span><br><span class=\"line\"><span class=\"title function_\">define</span>([<span class=\"string\">&#x27;Lib&#x27;</span>], <span class=\"keyword\">function</span>(<span class=\"params\">Lib</span>)&#123;</span><br><span class=\"line\">　　　　<span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">　　　　　　<span class=\"title class_\">Lib</span>.<span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">　　　　　　foo : foo</span><br><span class=\"line\">　　　　&#125;;</span><br><span class=\"line\">　　&#125;);</span><br><span class=\"line\">　　</span><br><span class=\"line\"><span class=\"comment\">/*使用模块*/</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">require( dependencies, factory)</span></span><br><span class=\"line\"><span class=\"comment\">    dependencies: 是我们要载入的依赖模块(可选)，使用相对路径。,注意是数组格式</span></span><br><span class=\"line\"><span class=\"comment\">    factory: 在这里使用模块完成业务</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    将依赖的模块全部加载执行以后执行回调</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">&#x27;./a&#x27;</span>, <span class=\"string\">&#x27;./b&#x27;</span>], <span class=\"keyword\">function</span> (<span class=\"params\">m1,m2</span>) &#123;</span><br><span class=\"line\">　m1.<span class=\"title function_\">add</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">  m2.<span class=\"title function_\">add</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h4><p><strong>特点</strong></p>\n<p>延迟加载执行</p>\n<p><strong>使用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>, <span class=\"built_in\">exports</span>, <span class=\"variable language_\">module</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 模块代码</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a&#x27;</span>);</span><br><span class=\"line\">  <span class=\"comment\">//require 是一个方法，接受 模块标识 作为唯一参数，用来获取其他模块提供的接口。</span></span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">//异步加载一个模块，在加载完成时，执行回调</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>.<span class=\"title function_\">async</span>(<span class=\"string\">&#x27;./b&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">b</span>) &#123;</span><br><span class=\"line\">        b.<span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//异步加载多个模块，在加载完成时，执行回调</span></span><br><span class=\"line\">    <span class=\"built_in\">require</span>.<span class=\"title function_\">async</span>([<span class=\"string\">&#x27;./c&#x27;</span>, <span class=\"string\">&#x27;./d&#x27;</span>], <span class=\"keyword\">function</span>(<span class=\"params\">c, d</span>) &#123;</span><br><span class=\"line\">        c.<span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">        d.<span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//模块输出</span></span><br><span class=\"line\">     <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">doSomething</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">     &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 对外提供 foo 属性</span></span><br><span class=\"line\">    <span class=\"built_in\">exports</span>.<span class=\"property\">foo</span> = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对外提供 doSomething 方法</span></span><br><span class=\"line\">    <span class=\"built_in\">exports</span>.<span class=\"property\">doSomething</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 错误用法！！!</span></span><br><span class=\"line\">      <span class=\"built_in\">exports</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">doSomething</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 正确写法</span></span><br><span class=\"line\">      <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">foo</span>: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">doSomething</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    exports 仅仅是 module.exports 的一个引用。在 factory 内部给 exports 重新赋值时，并不会改变 module.exports 的值。因此给 exports 赋值是无效的，不能用来更改模块接口。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ES6-Moubule\"><a href=\"#ES6-Moubule\" class=\"headerlink\" title=\"ES6 Moubule\"></a>ES6 Moubule</h4><p><strong>特点</strong></p>\n<p>export指令导出接口，以import引入模块</p>\n<p>import的语法和require不同，而且import必须放在文件的最开始，且前面不允许有其他逻辑代码，这和其他所有的编程语言风格一致</p>\n<p><strong>使用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; m &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> student = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Megan&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">value</span>: <span class=\"string\">&#x27;lalala&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; obj &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sun</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">a, b</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; sum &#125;;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> xxxx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 等效于：</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">a</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;a <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>  xxx  <span class=\"keyword\">from</span> xxxx <span class=\"comment\">//可以省去花括号&#123;&#125;。</span></span><br><span class=\"line\"><span class=\"comment\">// 等效于，或者说就是下面这种写法的简写，是同一个意思</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> xxx &#125; <span class=\"keyword\">from</span> xxxx;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个文件即模块中只能存在一个export default语句，导出一个当前模块的默认对外接口</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//使用默认式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> variable <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./exportDemo&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//同时使用命名式和默认式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> variable, &#123; sum, boy &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./exportDemo&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//导入一个模块，但不进行任何绑定：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;my-module&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在同一个模块可以同时使用两种导出方式</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sun</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  install,</span><br><span class=\"line\">  <span class=\"title class_\">DottedTitle</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"HTTP知识系列","date":"2022-12-04T02:36:15.000Z","top":998,"typora-copy-images-to":"upload","_content":"\n### HTTP报文结构\n\n***\n\nHTTP报文结构：起始行+头部+空行+实体\n\n<!--more-->\n\n#### 请求报文\n\n起始行：方法 + 路径 + http版本，GET /home HTTP/1.1\n\n头部\n\n空行：区分头部和实体\n\n实体：请求体（一般POST方法才有）\n\n#### 相应报文\n\n起始行：http版本+状态码+原因，HTTP/1.1 200 ok\n\n头部\n\n空行：区分头部和实体\n\n实体：响应体（服务端返回的数据）\n\n### HTTP的请求方法\n\n***\n\n**方法**\n\nGET：通常用来回去资源\n\nHEAD：获取资源的元信息\n\nPOST：上传信息\n\nPUT：修改数据\n\nDELETE：删除资源\n\nCONNECT：建立连接隧道，用于代理服务器\n\nOPTIONS：列出可对资源实行的请求方法，用来跨域请求\n\nTRACE：追踪请求-相应的传输路径\n\n**GET和POST的区别**\n\n- 缓存：GET请求会被浏览器主动缓存下来，留下历史记录，而POST默认不会\n- 编码：GET只能进行URL编码，只能接受ASCII字符，而POST没有限制\n- 参数：GET一般放在URL中，不安全，POST放在请求体中，更适合传输敏感信息\n- 冥等性：GET是冥等的，而POST不是（冥等表示执行相同的操作，结果也是相同的）\n- TCP：GET会把请求报文一次性发出去，而POST会分为两个TCP数据包，先发header部分，如果服务器响应再发body部分\n\n### URL\n\n#### URL结构\n\n协议类型+域名类型+端口号+路径+查询参数+锚点\n\n协议类型：HTTP和HTTPS，HTTPS在HTTP的前提上加上了一个安全保护，在数据给tcp之前对数据先进行加密然后再给到tcp连接传输\n\n域名和IP：域名是IP的别称，方便人去记忆。浏览器跨域通过DNS去解析域名获得对应的IP\n\n端口号：一台机器可以提供多种服务，一个服务对应一个端口号port\n\n路径：具体去哪个页面\n\n查询参数：同一页面看到不同的内容\n\n锚点：同一页面同一内容查看某一位置内容\n\n**URL编码**\n\nURL只能使用ASCII，ASCII之外的字符是不支持显示的，而且还有一部分符号是界定符，如果不处理的会导致解析出错。因此URL引入了编码机制，把非ASCII码字符和界定符转为十六进制字节值，然后再签名加个%。如空格转义成%20\n\n### HTTP状态码\n\n#### 1XX\n\n表示目前是协议处理的中间状态，还需要后续的操作\n\n101 Swithing Protocols。再http升级为websocket的时候，如果服务器同意变更，就会发送状态码101\n\n#### 2XX\n\n表示成功状态\n\n200 OK是最常见的成果状态码，通常在响应体中放有数据\n\n204 NO Content含义与200相同，但响应头后面没有数据\n\n206 Partial Content顾名思义，表示部分内容，它的使用场景为HTTP分块下载和断点连续传，当然同时也会带上相应的响应头字段Content-Range\n\n#### 3XX\n\n表示重定向状态，资源位置发生变动，需要重新请求\n\n301 Moved Permanently即永久重定向，对应着302 Found，即临时重定向\n\n304 Not Modified当协商缓存命中时会返回这个状态码\n\n#### 4XX\n\n请求报文有误\n\n400 Bad Request客户端请求的语法错误，服务端无法理解\n\n401 Unauthorized请求需要用户的身份认证\n\n403 Forbidden服务器理解客户端的请求，但拒接执行此请求\n\n404 Not Found资源未找到，表示没有服务器上找到相应的资源\n\n405 Method Not Allowed请求方法不被服务端允许\n\n406 Not Acceptable资源无法满足客户端的条件\n\n408 Request Timeout服务器等待了太长时间\n\n409 Conflict多个请求发生了冲突\n\n413 Request Entity Took Large请求体积的数据过大\n\n414 Request-URL Too Long请求行里的URL太大\n\n429Too Many Request客户端发送的请求过多\n\n431 Request HeaderFields Too Large请求头的字段内容太大\n\n#### 5XX\n\n服务端发送错误\n\n500 Internal Server Error服务器出错\n\n501 Not Gateway服务器自身是正常的，但是访问的时候出错了\n\n503 Service Unavailable表示服务器当前很忙，暂时无法相应服务\n\n### HTTP特点和缺点\n\n#### HTTP特点\n\n灵活可拓展：一个是语义上自由，只规定了基本格式，还有就是传输形式的多样性\n\n可靠传输：因为HTTP使用的TCP传输协议，所以继承了TCP的可靠传输\n\n请求-应答，也就是一发一收、有来有回\n\n无状态，这里的状态是指的通信过程的上下文信息，而每次http请求都说独立、无关的，默认不需要保留状态信息\n\n#### HTTP缺点\n\n无状态在需要长连接的情况下，需要保存大量的上下文信息，以避免传输重复的信息，这个时候无状态就是缺点；但是如果一些应用仅仅只是为了获取一些数据，不需要保存连接上下文信息，无状态减少了网络开销，此时为优点\n\n明文传输，协议里的报文不适用二进制数据，直接使用文本形式\n\n队头阻塞问题，当http开启长连接时，共用同一个TCP连接，同一时刻只能处理一个请求，那么当前请求耗时过长的情况下，其他的请求只能处理阻塞状态\n\n### Accept\n\n对应Accept系列字段的介绍分为四个部分：数据格式、压缩方式、支持语言和字符集\n\n#### 数据格式\n\n对于发送端利用Content-Type字段限制数据类型，接受到利用Accept字段限制接受的数据类型。以下是具体的取值\n\ntext：text/html，text/plain，text/css等\n\nimage：image/gif，image/jpeg，image/png等\n\napplication：application/json, application/javascript, application/pdf, application/octet-stream\n\n#### 压缩方式\n\n发送端使用Conten-Encoding表明压缩方式，接受端使用Accept-Encoding限制压缩方式。以下是具体的取值\n\ngzip：目前比较流行的压缩格式\n\ndeflate：另外一种有名的压缩格式\n\nbr：一种专门为HTTP发明的压缩格式\n\n#### 支持语言\n\n发送端使用Content-Language字段表明语言，接收端使用Accept-Language字段表明语言\n\n#### 字符集\n\n发送端直接放在Content-Type中以charset指定字符集，接受端使用Accept-Charset指定可以接受的字符集\n\n// 发送端\n\nContent-Type: text/html; charset=utf-8\n\n// 接收端\n\nAccept-Charset: charset=utf-8\n\n### HTTP传输定长和不定长的数据\n\n#### 定长包体\n\n对于定长包体来说，发送端在传输的时候一般会带上Conten-Length字段指明包体的长度\n\n#### 不定长包体\n\n对于不定长包体，需要配置Transfer-Encoding：chunked，设置了这个字段后会自动产生两个效果，第一个是会忽略Content-Length，第二个就是基于长连接持续推送动态内容\n\n### HTTP处理大文件\n\n对于一些大文件来说，想要一下传输完是不现实的，所以HTTP采取了范围请求的解决方案允许客户端仅仅请求一个资源的一部分\n\n#### 如何支持\n\n前提是服务器支持范围请求，要支持这个功能，响应头上就需要加上Accept-Ranges:none来告诉客户端这边是支持范围请求\n\n#### Range字段拆解\n\n对于客户端，通过Range字段来指定请求那一部分，格式为bytes=x-y\n\n0-499表示从开始到第499个字节\n\n500-表示从第500字节到文件终点\n\n-100表示文件的最后一个100个字节\n\n服务器收到请求之后，首先验证范围是否合法，如果越界了那么返回416错误码，否则读取相应片段，返回206状态码\n\n#### 对于单段数据和多端数据，服务器的响应数据是不一样的\n\n单段数据 Range：bytes=0-9\n\n多段数据 Range：bytes=0-9，30-39\n\n**单段数据**\n\nContent-Range字段，0-9表示请求的返回，100表示资源的总大小\n\n```javascript\nHTTP/1.1 206 Partial Content\nContent-Length: 10\nAccept-Ranges: bytes\nContent-Range: bytes 0-9/10\ni am xxxxx\n```\n\n**多段数据**\n\nContent0Type：multiparty/byteranges；boundary=00000010101表示请求一定是多段数据请求，响应体中的分隔符是00000010101\n\n```javascript\nHTTP/1.1 206 Partial Content\nContent-Type: multipart/byteranges; boundary=00000010101\nContent-Length: 189\nConnection: keep-alive\nAccept-Ranges: bytes\n--00000010101\nContent-Type: text/plain\nContent-Range: bytes 0-9/96\ni am xxxxx\n--00000010101\nContent-Type: text/plain\nContent-Range: bytes 20-29/96\neex jspy \ne--00000010101--\n```\n\n### HTTP处理表单数据\n\n在HTTP中，有两种主要的表单提交的方式，体现在两种不同的Content-Type取值，application/x-www-form-urlencoded和multiparty/form-data\n\n#### application/x-www-form-urlencoded\n\n对于application/x-www-form-urlencoded格式的表单内容，有以下特点：数据会被编码成以&分隔的键值对，字符以URL编码方法编码\n\n#### multipart/form-data\n\n请求头中的Content-Type字段会包含boundary。且boundary的值有浏览器默认指定。例：Content-Type：multipart=- - - WebkitFormBoundaryRRJKeWfHPGrS4LKe\n\n数据会分为多个部分，每两个部分之间通过分隔符来分隔，每部分表示均有HTTP头部描述子包体\n\n### HTTP处理队头阻塞\n\nHTTP传输是基于请求-应答的模式进行的，报文必须是一发一收，但值得注意的是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理\n\n#### 并发连接\n\n对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其他所有任务。在RFC2616规定过客户端最多并发2个连接，不过事实上在现在的浏览器标准中，这个上限要多很多，Chrome是6个\n\n#### 域名分片\n\n一个域名表示可以并发6个长连接，那就多分一些二级域名，在一个baidu.com域名下可以分出很多二级域名，如content.baidu.com,text.baidu.com等二级域名。这样一台服务器能并发的连接数就更多了\n\n### Cookie\n\n#### 生存周期\n\nCookie的有效期可以通过Expires和Max-Age两个属性，也就是HTTP的强缓存。Expires表示资源过期时间，Max-Age用的是一段时间间隔，单位是秒，从浏览器收到报文开始计算\n\n#### 作用域\n\n关于作用域有两个属性Domain和path，给Cookie绑定了域名和路径，在发送请求之前，发现域名或则路径不匹配的话，就不会带上该Cookie。对于路径来说，/表示域名下的任何路径都允许使用Cookie\n\n#### 安全相关\n\n如果带上Secure，说明只能通过HTTPS传输cookie\n\n如果带上HttpOnly，那么说明只能通过HTTP协议传输，不能通过JS访问，这也是预防XSS攻击的重要的手段\n\n如果带上SameSite属性则可以预防CSRF攻击，SameSite有三个值可以选择：\n\n- 在Strict模式下，浏览器完全禁止第三方请求携带Cookie\n- 在Lax模式，只能在get方法提交表单或则a标签发送get请求的情况下可以携带Cookie\n- 在None模式下，也就是默认模式，请求都会自动带上Cookie\n\n#### 缺点\n\n容量缺陷：Cookie的体积上限只有4KB。\n\n性能缺陷：Cookie紧跟域名，不管域名下面的某一个地址需不需要这个Cookie，请求都会带上完整的Cookie，这样随着请求数的增多，会造成巨大的性能浪费。但可以通过Domain和Path指定作用域来解决\n\n安全缺陷：由于Cookie以纯文本的形式在浏览器和服务端中传递，这样很容易被非法用户截获，然后进行一系列的篡改。重新发送给服务器。在Http为fasle的情况下，Cookie信息能直接通过JS脚本来读取\n\n### HTTP代理\n\n代理服务器是介于客户端和服务端的一个中间角色，对于客户端来说，表现为服务器进行响应，对于服务器来说，表现为客户端发起请求。具有双重身份\n\n#### 功能\n\n负载均衡：客户端发送的请求会先到达代理服务器，后面有多少源服务器，IP地址客户端都是不知道的\n\n保障安全：利用心跳机制监控后台的服务器，一旦发现故障机就将其踏出集群。并且对上下行的数据进行过滤，对非法IP限流\n\n缓存代理：将内容缓存到代理服务器，使得客户端可以直接从代理服务器获得缓存\n\n#### 相关头部字段\n\nVia，代理服务器需要表明自己的身份，可以通过Via字段来记录。Via中代理的顺序就是HTTP传输中报文传达的顺序\n\nX-Forwarded-For，记录请求方的IP地址\n\nX-Real-IP，获取真实用户的IP地址，X-Forwarded-Host记录客户端的域名，X-Forwarded-Proto记录客户端的协议名\n\n### HTTP缓存\n\n#### 缓存的好处\n\n减少网络带宽的消耗，对网站运营者来说，可以减少网络流量，降低运营成本\n\n降低服务器压力，对于服务器来说，重复使用浏览器本地的缓存数据，可以减少对服务器的请求，降低对服务器的压力\n\n减少网络延迟，加快网络渲染，对客户端来说，使用浏览器本地的缓存比请求服务器的数据更快，提高页面的渲染效率\n\n#### 强缓存（不需要发送http请求。注意：当Expires和Cache-Control同时存在时，Cache-Control会被优先考虑）\n\n**HTTP/1.0版本中使用的Cache-Control**\n\nExpires代表缓存过期时间，存在于服务端返回的响应头中，用来告诉浏览器在这个时间之前都可以直接从缓存中获取数据。如 Expires: Wed, 22 Nov 2019 08:41:00 GMT\n\n**HTTP/1.1版本中使用的Cache-Contral**\n\nCache-Control采用的是过期时长来控制缓存，对应的字段是max-age。如 Cache-Control：max-age=3600（代表该资源在3600秒内可以直接使用缓存）\n\nCache-Control还有一些其他的属性，如下：\n\nPublic：客户端和代理端都可以对数据进行缓存\n\nprivate：只能客户端缓存，中间的代理服务器不能缓存\n\nno-cache：不能进行任何形式的缓存\n\ns-naxage：代理服务器的缓存过期时间\n\n#### 协商缓存（强缓存失效后，浏览器在请求头上携带相应的缓存tag香服务器发送请求，由服务器根据tag决定是否使用缓存）\n\n**Last-Modified**\n\nLast-Modified表示最后修改时间。在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段，浏览器接收到后，再第二次请求中会携带If-Modified-Since字段，\n\n这个字段的值是服务器传来的最后修改时间。服务器拿到请求头中的If-Modified-Since字段后，会和服务器中该资源的最后时间修改时间对比，如果请求头中的值小于最后修改时间，\n\n返回新资源。反之则返回304，告诉浏览器直接用缓存\n\n**Etag**\n\nETag是服务器根据当前文件的内容，给文件生成的唯一标识，只要内容有改动，这个值就会变化。服务器通过响应头把这个值给浏览器。浏览器收到这个值会在\n\n下次请求的时候把这个值作为If-None-Match这个字段的内容，放入请求头中给服务器，服务器收到后与Etag对比，不一致返回新资源，一致则返回403，告诉浏览器直接使用缓存\n\n**对比**\n\n在精度上，ETag由于Last-Modified\n\n在性能上，Last-Modified由于ETag，运维ETag在对每个文件生成唯一标识会损耗性能\n\n#### 缓存位置\n\n浏览器其中的缓存位置按照优先级从高到低排列分别是：Service Worker；Memory Cache；Disk Cache；Push Cache。（比较大的文件会直接丢进磁盘中，反之进入内存 ，当内存使用率很高的时候，也会优先储存在磁盘中）\n\nService Worker借鉴了Web Worker的思路，既让JS运行在主线程之外，由于它脱离了浏览器的窗体，因此无法访问DOM。它可以实现离线缓存，消息推送和网络代理等功能\n\nMemory Cache指的是内存缓存，从效率上讲它是最快的。但是存活时间也是最短的，当渲染进程结束后，内存缓存也就在不存在了\n\nDisk Cache是储存在磁盘中的缓存，存取效率比内存缓存低，但是存储容量和存储时长都很不错\n\nPush Cache是推送缓存，这是浏览器缓存的最后一道防线，是HTTP/2中的内容\n\n#### 刷新对于强缓存和协商缓存的影响\n\n当ctrl+f5强制刷新网页时，直接重服务器加载，跳过强缓存和协商缓存\n\n当f5刷新网页时，跳过强缓存，但是会检查协商缓存\n\n浏览器地址栏中写入URL，回车 浏览器先去找缓存\n\n### 缓存代理\n\n对于源服务器来说也是有缓存的，但是对于HTTP缓存来说，如果每次客户端缓存失效都要到源服务器获取，那样服务器的压力会也别大，所以让代理服务器接管一部分服务端的HTTP缓存，客户端缓存过期就去最近的代理服务器获取，代理服务端过期了的话就去最近原服务器获取\n\n#### 源服务器的缓存控制\n\nprivate和public，在源服务器的响应头中，会加上Cache-Control这个字段进行缓存控制字段，那么它的值当中可以加入private或则public表示是否允许代理服务器缓存\n\nproxy-revalidate，must-revalidate的意思s 客户端缓存过期就去源服务器获取，而proxy-revalidate则表示代理服务器的缓存过期后到源服务器获取\n\ns-maxage，s是share的意思，限定了缓存代理服务器中可以放多久，和限制客户端缓存时间max-age并不冲突\n\n#### 客户端的缓存控制\n\nmax-stale和min-fresh，在客户端的请求头上，可以加入这两个字段，对代理服务器上的缓存进行宽容和限制操作，max-stale：5表示过期时间在5秒之内可以从代理中获取，min-fresh：5表示等缓存时间过期之前5秒拿代理中的缓存\n\nonly-if-cached，这个字段加上后表示客户端只会接受代理缓存，而不会接受源服务器的响应，如果代理缓存无效，则返回504\n\n### 跨域\n\n#### 什么是跨域\n\n浏览器遵循同源政策（协议、IP地址和端口都相同则为永源），非同源站点有以下限制：\n\n- 不能读取和修改对方的DOM\n\n- 不读访问对方的Cookie、IndexDB和LocalStorage\n\n- 限制XMLHttpRequest请求\n\n当浏览器香目标URL发Ajax请求时，只要当前URL和目标URL不同源，则产生跨域，被称为跨域请求，跨域请求的响应一般会被浏览器拦截。在服务端处理完数据后，将响应返回，主进程检查到跨域，且没有cors响应头，将响应体全部丢掉，并不会发送给渲染进程\n\n#### CORS\n\nCORS是W3C的一个标准，全称是跨域资源共享。它需要浏览器和服务器的共同支持，具体来说，非IE和IE1.0以上支持CORS，服务器需要附加特定的响应头\n\n浏览器根据请求方法和请求头的特定字段，将请求做了一下分类，具体来说规则是这样，凡是满足下面条件的属于简单请求：\n\n- 请求方法为GET、POST或则HEAD\n- 请求去头的取值范围：Accept、Accept-Language、Content-Language、Content-Type（只限于三个值application/x-form-urlencoded、multipart/form-data、text/plain）\n\n**简单请求**\n\n请求发出去之前，浏览器会在请求头中添加一个Origin字段，用来说明请求来自哪个源。服务器拿到请求之后，在回应时添加Access-Content-Allow-Origin字段，如果Origin不在这个字段的范围中，那么浏览器就会将相应拦截，因此Access-Content-Allow-Origin字段是服务器用来决定浏览器是否拦截这个响应，是必须的一个字段\n\nAccess-Control-Allow-Credentials字段是一个布尔值，表示允许发送Cookie，对于跨域请求，浏览器对这个字段默认值为false，而如果需要拿到浏览器的Cookie，需要添加这个响应头并设为true，并且在前端也需要设置withCredentials属性\n\n```javascript\nlet xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n```\n\nAccess-Control-Expose-Headers字段是给XMLHttpRequest对象赋能让它不仅可以拿到基本的6个响应头字段（Cache-Control、Content-Language、Content-Type、Expires、Last-Modified和Pragma）, 还能拿到这个字段声明的响应头字段\n\n```javascript\nAccess-Control-Expose-Headers: aaa\nXMLHttpRequest.getResponseHeader('aaa')\n```\n\n**非简单请求**\n\n非简单请求相对而言会有些不同，主要有以下两个方面：预检请求和响应字段\n\n以PUT方法为例\n\n```javascript\nvar url = 'http://xxx.com';\nvar xhr = new XMLHttpRequest();\nxhr.open('PUT', url, true);\nxhr.setRequestHeader('X-Custom-Header', 'xxx');\nxhr.send();\n```\n\n当这段代码执行后，会发送预检请求，预检请求的请求行和请求体是下面的格式\n\n```javascript\nOPTIONS / HTTP/1.1\nOrigin: 当前地址\nHost: xxx.com\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: X-Custom-Header\n```\n\n预检请求的方法是OPTIONS，同时会加上Origin源地址和Host目标地址。同时加上以下两个字段\n\nAccess-Control-Request-Method，列出CORS请求用到哪个HTTP方法\n\nAccesss-Control-Request-Headers,指定CORS请求将要加上什么请求头\n\n同时响应字段也会分为两部分，一部分是对于预检请求的响应，一部分是对于CORS请求的响应\n\n预检请求的响应\n\n```javascript\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nAccess-Control-Allow-Credentials: true\nAccess-Control-Max-Age: 1728000\nContent-Type: text/html; charset=utf-8\nContent-Encoding: gzip\nContent-Length: 0\n```\n\n在预检响应字段中有几个关键的字段\n\nAccess-Control-Allow-Origin：表示跨域允许请求的源，可以填具体的源名，也可以填*表示任意源\n\nAccess-Control-Allow-Methods：表示允许的请求方法列表\n\nAccess-Control-Allow-Headers：简单请求中已经介绍\n\nAccess-Control-Allow-Credentials：表示允许发送的请求字段\n\nAccess-Control-Max-Age：表示预检请求的有效期，在此期间，不用发出另一条预检请求\n\n在预检请求的响应返回后，如果请求不满足响应头的条件，则触发XMLHttpRequest的onerror方法，当然后面真正的CORS请求也不会发出来了\n\n#### JSONP\n\n虽然XMLHttpRequest对象遵循同源政策，但是script标签不一样，它可以通过src填上目标地址从而发出GET请求，实现跨域请求并拿到响应。\n\n和CORS相比，JSONP最大的优势在于兼容性好，IE低版本不能使用CORS但可以使用JSONP，缺点也很明显，请求方法单一，只支持GET请求。\n\n以下是封装的一个JSONP\n\n```javascript\nconst jsonp = ({ url, params, callbackName }) => {\n  const generateURL = () => {\n    let dataStr = '';\n for(let key in params) {\n      dataStr += `${key}=${params[key]}&`;\n    }\n dataStr += `callback=${callbackName}`;\n    return `${url}?${dataStr}`;\n  };\n return new Promise((resolve, reject) => {\n    // 初始化回调函数名称\n    callbackName = callbackName || Math.random().toString.replace(',', ''); \n// 创建 script 元素并加入到当前文档中\n    let scriptEle = document.createElement('script');\nscriptEle.src = generateURL();\n    document.body.appendChild(scriptEle);\n  // 绑定到 window 上，为了后面调用\n    window[callbackName] = (data) => {\nresolve(data);\n      // script 执行完了，成为无用元素，需要清除\n      document.body.removeChild(scriptEle);\n     }\n   });\n}\n```\n\n#### Nginx\n\nNginx是一个高性能的反向代理服务器，可以用来轻松解决跨域问题\n\n正向代理帮助客户端访问客户端自己访问不到的服务器，然后将结果返回客户端\n\n反向代理拿到客户端的请求，将请求转发给其他的服务器，主要场景是维持服务器集群的负载均衡，换句话说，反向代理帮其他的服务器拿到请求，然后选择一个合适的服务器，将请求转交给它\n\n因此，正向代理服务器是帮客户端做事情，反向代理服务器是帮其他的服务器做事情\n\nNginx相当于一个跳板机，这个跳板机的域名也是client.com，让客户端访问client.com/api，这当然没有跨域，然后Nginx服务器作为反向代理，将请求转发给server.com，当响应应返回时又将响应给到客户端\n\n### TLs1.2握手过程\n\n前面我们已经知道HTTPS = HTTP + SSL/TLS来保证数据的安全\n\nSSL是安全套接层，在OSI七层模型中处于会话层。之前SSL出过三个大版本，当它发展到第三个大版本的时候才被标准化，成为TLS（传输层安全），并被当做TLS1.0。也就是说TLS1.0 = SSL3.0\n\n现在主流的版本是TLS/1.2，之前的TLS1.0、TLS1.0和TLS1.1都被认为是不安全的，在不久的将来会被完全淘汰。因此我们接下来主要讨论的是TLS1.2，当然在2018年推出了更加优秀的TLS1.3，大大优化了TLS握手过程\n\n#### TLs1.2握手过程\n\n**Client Hello**\n\n首先，浏览器发送client_random、TLS版本、加密套件列表\n\nclient_random是用来最终确定secret的一个参数\n\n在TLS握手过程中，使用ECDHE算法生成pre_random,128位的AES算法进行对称加密，在对称加密的过程中使用主流的GCM分组模式，因为对称加密中很重要的一个问题就是如何分组。最后一个是哈希摘要算法，采用SHA256算法\n\n哈希摘要算法解释实例\n\n服务端给客户端发信息，客户端并不知道此时的信息是服务端发的还是中间伪造的信息，这个时候就要引入哈希摘要算法，将服务端的证书信息通过这个算法生成一个摘要，用来标识这个服务端的身份，用私钥加密后把加密后的标识和自己的公钥传给客户端。客户端拿到这个公钥来解密，生成零一分摘要。两个摘要进行对比，如果相同则能确认服务端的身份\n\n**Server Hello**\n\n服务器给客户端回复非常多的内容\n\nserver_random也是最后生成secret的一个参数，同时确认TLS版本、需要使用的加密套件和自己的证书\n\n**Client验证证书，生成secret**\n\n客户端验证服务端传来的证书和签名是否通过，如果验证通过，则传递client_params这个参数给服务器\n\n客户端通过EECDHE算法计算出pre_random,其中传入两个参数：server_params和slient_params\n\n客户端现在拥有了client_random、server_random和pre_random，接下来这三个数通过一个伪随机数函数来计算最终的secret\n\n**Server生成secret**\n\n接收到客户端传的client_params，服务端使用ECDHE算法生成pre_random，接着用和客户端的伪随机数函数生成最后的secret\n\n#### RAS和ECDHE握手过程的区别\n\nECDHE握手，也就是主流的TLS1.2握手中，使用ECDHE实现pre_random的加密解密，没有用到RSA\n\n使用ECDHE还有一个特点，就是客户端发完首位信息后跨域提前抢跑，直接发送HTTP报文，节省了一个RTT，不必等到收尾信息到达服务器，然后等服务器返回收尾消息给自己，直接开始发请求\n\n### TLS1.3改进\n\nTLS1.3对TLS1.2做了一系列的改进，主要分为着几个部分：强化安全、提高性能\n\n#### 强化安全\n\n在TLS1.3中废除了非常多的加密算法，最后只保留五个加密套件。同时叶删除了非对称加密算法\n\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_128_GCM_8_SHA256\n\n#### 提高性能\n\n**握手改进**\n\n大体的方式和TLS1.2差不多，不过和TLS1.2相比少了一个RTT，服务器不必等待对方验证证书之后才拿到client_params，而是直接在第一次握手的时候就能够拿到，拿到之后立即计算secret，节省了之前不必要的等待时间。同时，这也以为这在第一次握手的时候客户端需要传送更多的信息，一口气传完\n\n**会话复用**\n\n会话复用有两种方式：Sessio ID和Session Ticket\n\nSession ID是在客户端和服务端首次连接后各自保存会话的ID，并存储会话密钥，当再次连接时，客户端发送ID过来，服务器查找这个ID是否存在，如果找到了就直接复用之前的会话状态，会话密钥不用重新生成，直接用来的那份。当客户端特别的多的时候，服务器的压力会特别大。\n\nSession Ticket 当服务端的压力大的时候，就把压力分摊给客户端。双方连接成功后，服务器加密会话信息，用Session Ticket消息发给客户端，让客户端保存下来。下次重连的时候，就把这个Ticket进行解密，验证没过期那就直接恢复之前的会话状态。这种方式减少了服务端的压力，但是带来了安全问题，即每次用一个固定的密钥来解密Ticket数据，一旦黑客拿到了这个密钥，之前的所有的历史记录也被破解了。因此密钥需要定期进行更换\n\n**PSK**\n\n前面说的都是1-RTT情况下的优化，PSK就是使用0-RTT在Session Ticket的同时带上应用数据，不用等到服务端确认。这样会方服务器被攻击的风险很大\n\n### HTTP/2改进\n\n由于HTTPS在安全方面已经做的非常好了，HTTP改进的关注点放在了性能方面。头部压缩和多路复用，还有颠覆性的功能实现设置请求优先级和服务器推送\n\n#### 头部压缩\n\nHPACK算法是专门为HTTP/2服务的，它有以下两个优点：\n\n- 在服务器和客户端之间建立哈希表，将用到的字段存放在这张表中，那么在传输的时候对于之前出现过的值，只需要把索引传给对方即可，对方拿到索引查表就好了\n- 对于整数和字符串进行哈夫曼编码，哈夫曼编码的原理就是先将所有出现的字符建立一张索引表，然后让出现次数多的字符对应的索引尽可能短，传输的时候也是传输这样的索引序列，可以达到非常高的压缩率\n\n#### 多路复用\n\nTCP的对头阻塞是在数据包层面，单位是数据包，前一个报文密钥收到便不会将后面收到的报文上传给HTTP，而HTTP队头阻塞是在HTTP的队头阻塞在HTTP请求-响应层面，前一个请求密钥请求完，后面的请求就要阻塞住\n\nHTTP/2认为明文传给机器而言太麻烦了，不方便计算机的解析，因为对于文本而言会有多义性的字符，比如回车换行到底是内容还是分隔符，在内部需要用到状态机去识别。于是HTTP/2干脆把报文全部换成二进制格式，全部01传输，方便了机器的解析\n\n通信双方都可以给对方发送二进制帧，这种二进制帧的双向传输的序列也叫做流。HTTP/2用流来在一个TCP连接上进行多个数据帧的通信，这就是多路复用的概念\n\n#### 服务器推送\n\n在HTTP/2中，服务器已经不再完全的被动的接受请求，响应请求，它也能新建stream来给客户端发送消息，当TCP连接建立之后，比如浏览器请求一个HTML文件，服务器就可以在返回HTML的基础上，将HTML中引用到的其他资源文件一起返回给客户端，减少客户端的等待\n\n### HTTP/2中的二进制\n\nHTTP/2中传输的帧结构如下图所示：\n\n![image-20221214143815969](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221214143815969.png)\n\n每个帧分为帧头和帧体。先是三个字节的帧长度，这个长度表示的是帧体的长度然后是帧类型，大概可以分为数据帧和控制帧两种。数据帧用来存放HTTP报文，控制帧用来管理流的传输。\n\n接下来的一个字节是帧标志，黎曼一共8个标志位，常用的有END_HEADERS表示数据结束，END_STRAEAM表示单方向数据发送结束\n\n后四个字节是Stream ID，也就是流标识符，有了它接收方就能从乱序的二进制帧中选择出ID相同的帧，按顺序组装成请求/响应报文\n\n#### 流的状态变化\n\n![image-20221214143852729](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221214143852729.png)\n\n最开始两者都是空闲状态，当客户端发送Headers帧后，开始分配Stream ID，此时客户端的流打开，服务端接受之后服务端的流也打开，两端的流都打开之后，就可以互相传递数据帧和控制帧\n\n当客户端要关闭时，向服务端发送END_SITREAM帧，进入半关闭状态，不过此时服务端的情况是只能发送数据，而不能接受数据。随后服务端也想客户端发送END_STREAM帧，表示数据发送完毕，双方进入关闭状态\n\n如果下次需要开启新的流，流ID需要自增，直到上限为止，到达上限后开一个新的TCP连接重头开始计数。由于流ID字段长度为四个字节，最高位又被保留，因此范围是0~2的31次方，大约21亿个\n\n#### 流的特性\n\n- 并发性，一个HTTP/2连接上可以同时发多个帧，这一点和HTTP/1不同\n- 自增性，流ID是不可重用的，而是会按顺序递增，达到上限后又新开TCP连接从头开始\n- 双向性，客户端和服务端都可以创建流，互不干扰，双方都可以作为发送发或接收方\n- 可设置优先级，可以设置数据帧的优先级，让服务器优先处理重要资源，优化用户体验\n","source":"_posts/http.md","raw":"---\ntitle: HTTP知识系列\ndate: 2022-12-4 10:36:15\ntags: 学习\ncategories: 前端\ntop: 998\ntypora-copy-images-to: upload\n---\n\n### HTTP报文结构\n\n***\n\nHTTP报文结构：起始行+头部+空行+实体\n\n<!--more-->\n\n#### 请求报文\n\n起始行：方法 + 路径 + http版本，GET /home HTTP/1.1\n\n头部\n\n空行：区分头部和实体\n\n实体：请求体（一般POST方法才有）\n\n#### 相应报文\n\n起始行：http版本+状态码+原因，HTTP/1.1 200 ok\n\n头部\n\n空行：区分头部和实体\n\n实体：响应体（服务端返回的数据）\n\n### HTTP的请求方法\n\n***\n\n**方法**\n\nGET：通常用来回去资源\n\nHEAD：获取资源的元信息\n\nPOST：上传信息\n\nPUT：修改数据\n\nDELETE：删除资源\n\nCONNECT：建立连接隧道，用于代理服务器\n\nOPTIONS：列出可对资源实行的请求方法，用来跨域请求\n\nTRACE：追踪请求-相应的传输路径\n\n**GET和POST的区别**\n\n- 缓存：GET请求会被浏览器主动缓存下来，留下历史记录，而POST默认不会\n- 编码：GET只能进行URL编码，只能接受ASCII字符，而POST没有限制\n- 参数：GET一般放在URL中，不安全，POST放在请求体中，更适合传输敏感信息\n- 冥等性：GET是冥等的，而POST不是（冥等表示执行相同的操作，结果也是相同的）\n- TCP：GET会把请求报文一次性发出去，而POST会分为两个TCP数据包，先发header部分，如果服务器响应再发body部分\n\n### URL\n\n#### URL结构\n\n协议类型+域名类型+端口号+路径+查询参数+锚点\n\n协议类型：HTTP和HTTPS，HTTPS在HTTP的前提上加上了一个安全保护，在数据给tcp之前对数据先进行加密然后再给到tcp连接传输\n\n域名和IP：域名是IP的别称，方便人去记忆。浏览器跨域通过DNS去解析域名获得对应的IP\n\n端口号：一台机器可以提供多种服务，一个服务对应一个端口号port\n\n路径：具体去哪个页面\n\n查询参数：同一页面看到不同的内容\n\n锚点：同一页面同一内容查看某一位置内容\n\n**URL编码**\n\nURL只能使用ASCII，ASCII之外的字符是不支持显示的，而且还有一部分符号是界定符，如果不处理的会导致解析出错。因此URL引入了编码机制，把非ASCII码字符和界定符转为十六进制字节值，然后再签名加个%。如空格转义成%20\n\n### HTTP状态码\n\n#### 1XX\n\n表示目前是协议处理的中间状态，还需要后续的操作\n\n101 Swithing Protocols。再http升级为websocket的时候，如果服务器同意变更，就会发送状态码101\n\n#### 2XX\n\n表示成功状态\n\n200 OK是最常见的成果状态码，通常在响应体中放有数据\n\n204 NO Content含义与200相同，但响应头后面没有数据\n\n206 Partial Content顾名思义，表示部分内容，它的使用场景为HTTP分块下载和断点连续传，当然同时也会带上相应的响应头字段Content-Range\n\n#### 3XX\n\n表示重定向状态，资源位置发生变动，需要重新请求\n\n301 Moved Permanently即永久重定向，对应着302 Found，即临时重定向\n\n304 Not Modified当协商缓存命中时会返回这个状态码\n\n#### 4XX\n\n请求报文有误\n\n400 Bad Request客户端请求的语法错误，服务端无法理解\n\n401 Unauthorized请求需要用户的身份认证\n\n403 Forbidden服务器理解客户端的请求，但拒接执行此请求\n\n404 Not Found资源未找到，表示没有服务器上找到相应的资源\n\n405 Method Not Allowed请求方法不被服务端允许\n\n406 Not Acceptable资源无法满足客户端的条件\n\n408 Request Timeout服务器等待了太长时间\n\n409 Conflict多个请求发生了冲突\n\n413 Request Entity Took Large请求体积的数据过大\n\n414 Request-URL Too Long请求行里的URL太大\n\n429Too Many Request客户端发送的请求过多\n\n431 Request HeaderFields Too Large请求头的字段内容太大\n\n#### 5XX\n\n服务端发送错误\n\n500 Internal Server Error服务器出错\n\n501 Not Gateway服务器自身是正常的，但是访问的时候出错了\n\n503 Service Unavailable表示服务器当前很忙，暂时无法相应服务\n\n### HTTP特点和缺点\n\n#### HTTP特点\n\n灵活可拓展：一个是语义上自由，只规定了基本格式，还有就是传输形式的多样性\n\n可靠传输：因为HTTP使用的TCP传输协议，所以继承了TCP的可靠传输\n\n请求-应答，也就是一发一收、有来有回\n\n无状态，这里的状态是指的通信过程的上下文信息，而每次http请求都说独立、无关的，默认不需要保留状态信息\n\n#### HTTP缺点\n\n无状态在需要长连接的情况下，需要保存大量的上下文信息，以避免传输重复的信息，这个时候无状态就是缺点；但是如果一些应用仅仅只是为了获取一些数据，不需要保存连接上下文信息，无状态减少了网络开销，此时为优点\n\n明文传输，协议里的报文不适用二进制数据，直接使用文本形式\n\n队头阻塞问题，当http开启长连接时，共用同一个TCP连接，同一时刻只能处理一个请求，那么当前请求耗时过长的情况下，其他的请求只能处理阻塞状态\n\n### Accept\n\n对应Accept系列字段的介绍分为四个部分：数据格式、压缩方式、支持语言和字符集\n\n#### 数据格式\n\n对于发送端利用Content-Type字段限制数据类型，接受到利用Accept字段限制接受的数据类型。以下是具体的取值\n\ntext：text/html，text/plain，text/css等\n\nimage：image/gif，image/jpeg，image/png等\n\napplication：application/json, application/javascript, application/pdf, application/octet-stream\n\n#### 压缩方式\n\n发送端使用Conten-Encoding表明压缩方式，接受端使用Accept-Encoding限制压缩方式。以下是具体的取值\n\ngzip：目前比较流行的压缩格式\n\ndeflate：另外一种有名的压缩格式\n\nbr：一种专门为HTTP发明的压缩格式\n\n#### 支持语言\n\n发送端使用Content-Language字段表明语言，接收端使用Accept-Language字段表明语言\n\n#### 字符集\n\n发送端直接放在Content-Type中以charset指定字符集，接受端使用Accept-Charset指定可以接受的字符集\n\n// 发送端\n\nContent-Type: text/html; charset=utf-8\n\n// 接收端\n\nAccept-Charset: charset=utf-8\n\n### HTTP传输定长和不定长的数据\n\n#### 定长包体\n\n对于定长包体来说，发送端在传输的时候一般会带上Conten-Length字段指明包体的长度\n\n#### 不定长包体\n\n对于不定长包体，需要配置Transfer-Encoding：chunked，设置了这个字段后会自动产生两个效果，第一个是会忽略Content-Length，第二个就是基于长连接持续推送动态内容\n\n### HTTP处理大文件\n\n对于一些大文件来说，想要一下传输完是不现实的，所以HTTP采取了范围请求的解决方案允许客户端仅仅请求一个资源的一部分\n\n#### 如何支持\n\n前提是服务器支持范围请求，要支持这个功能，响应头上就需要加上Accept-Ranges:none来告诉客户端这边是支持范围请求\n\n#### Range字段拆解\n\n对于客户端，通过Range字段来指定请求那一部分，格式为bytes=x-y\n\n0-499表示从开始到第499个字节\n\n500-表示从第500字节到文件终点\n\n-100表示文件的最后一个100个字节\n\n服务器收到请求之后，首先验证范围是否合法，如果越界了那么返回416错误码，否则读取相应片段，返回206状态码\n\n#### 对于单段数据和多端数据，服务器的响应数据是不一样的\n\n单段数据 Range：bytes=0-9\n\n多段数据 Range：bytes=0-9，30-39\n\n**单段数据**\n\nContent-Range字段，0-9表示请求的返回，100表示资源的总大小\n\n```javascript\nHTTP/1.1 206 Partial Content\nContent-Length: 10\nAccept-Ranges: bytes\nContent-Range: bytes 0-9/10\ni am xxxxx\n```\n\n**多段数据**\n\nContent0Type：multiparty/byteranges；boundary=00000010101表示请求一定是多段数据请求，响应体中的分隔符是00000010101\n\n```javascript\nHTTP/1.1 206 Partial Content\nContent-Type: multipart/byteranges; boundary=00000010101\nContent-Length: 189\nConnection: keep-alive\nAccept-Ranges: bytes\n--00000010101\nContent-Type: text/plain\nContent-Range: bytes 0-9/96\ni am xxxxx\n--00000010101\nContent-Type: text/plain\nContent-Range: bytes 20-29/96\neex jspy \ne--00000010101--\n```\n\n### HTTP处理表单数据\n\n在HTTP中，有两种主要的表单提交的方式，体现在两种不同的Content-Type取值，application/x-www-form-urlencoded和multiparty/form-data\n\n#### application/x-www-form-urlencoded\n\n对于application/x-www-form-urlencoded格式的表单内容，有以下特点：数据会被编码成以&分隔的键值对，字符以URL编码方法编码\n\n#### multipart/form-data\n\n请求头中的Content-Type字段会包含boundary。且boundary的值有浏览器默认指定。例：Content-Type：multipart=- - - WebkitFormBoundaryRRJKeWfHPGrS4LKe\n\n数据会分为多个部分，每两个部分之间通过分隔符来分隔，每部分表示均有HTTP头部描述子包体\n\n### HTTP处理队头阻塞\n\nHTTP传输是基于请求-应答的模式进行的，报文必须是一发一收，但值得注意的是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理\n\n#### 并发连接\n\n对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其他所有任务。在RFC2616规定过客户端最多并发2个连接，不过事实上在现在的浏览器标准中，这个上限要多很多，Chrome是6个\n\n#### 域名分片\n\n一个域名表示可以并发6个长连接，那就多分一些二级域名，在一个baidu.com域名下可以分出很多二级域名，如content.baidu.com,text.baidu.com等二级域名。这样一台服务器能并发的连接数就更多了\n\n### Cookie\n\n#### 生存周期\n\nCookie的有效期可以通过Expires和Max-Age两个属性，也就是HTTP的强缓存。Expires表示资源过期时间，Max-Age用的是一段时间间隔，单位是秒，从浏览器收到报文开始计算\n\n#### 作用域\n\n关于作用域有两个属性Domain和path，给Cookie绑定了域名和路径，在发送请求之前，发现域名或则路径不匹配的话，就不会带上该Cookie。对于路径来说，/表示域名下的任何路径都允许使用Cookie\n\n#### 安全相关\n\n如果带上Secure，说明只能通过HTTPS传输cookie\n\n如果带上HttpOnly，那么说明只能通过HTTP协议传输，不能通过JS访问，这也是预防XSS攻击的重要的手段\n\n如果带上SameSite属性则可以预防CSRF攻击，SameSite有三个值可以选择：\n\n- 在Strict模式下，浏览器完全禁止第三方请求携带Cookie\n- 在Lax模式，只能在get方法提交表单或则a标签发送get请求的情况下可以携带Cookie\n- 在None模式下，也就是默认模式，请求都会自动带上Cookie\n\n#### 缺点\n\n容量缺陷：Cookie的体积上限只有4KB。\n\n性能缺陷：Cookie紧跟域名，不管域名下面的某一个地址需不需要这个Cookie，请求都会带上完整的Cookie，这样随着请求数的增多，会造成巨大的性能浪费。但可以通过Domain和Path指定作用域来解决\n\n安全缺陷：由于Cookie以纯文本的形式在浏览器和服务端中传递，这样很容易被非法用户截获，然后进行一系列的篡改。重新发送给服务器。在Http为fasle的情况下，Cookie信息能直接通过JS脚本来读取\n\n### HTTP代理\n\n代理服务器是介于客户端和服务端的一个中间角色，对于客户端来说，表现为服务器进行响应，对于服务器来说，表现为客户端发起请求。具有双重身份\n\n#### 功能\n\n负载均衡：客户端发送的请求会先到达代理服务器，后面有多少源服务器，IP地址客户端都是不知道的\n\n保障安全：利用心跳机制监控后台的服务器，一旦发现故障机就将其踏出集群。并且对上下行的数据进行过滤，对非法IP限流\n\n缓存代理：将内容缓存到代理服务器，使得客户端可以直接从代理服务器获得缓存\n\n#### 相关头部字段\n\nVia，代理服务器需要表明自己的身份，可以通过Via字段来记录。Via中代理的顺序就是HTTP传输中报文传达的顺序\n\nX-Forwarded-For，记录请求方的IP地址\n\nX-Real-IP，获取真实用户的IP地址，X-Forwarded-Host记录客户端的域名，X-Forwarded-Proto记录客户端的协议名\n\n### HTTP缓存\n\n#### 缓存的好处\n\n减少网络带宽的消耗，对网站运营者来说，可以减少网络流量，降低运营成本\n\n降低服务器压力，对于服务器来说，重复使用浏览器本地的缓存数据，可以减少对服务器的请求，降低对服务器的压力\n\n减少网络延迟，加快网络渲染，对客户端来说，使用浏览器本地的缓存比请求服务器的数据更快，提高页面的渲染效率\n\n#### 强缓存（不需要发送http请求。注意：当Expires和Cache-Control同时存在时，Cache-Control会被优先考虑）\n\n**HTTP/1.0版本中使用的Cache-Control**\n\nExpires代表缓存过期时间，存在于服务端返回的响应头中，用来告诉浏览器在这个时间之前都可以直接从缓存中获取数据。如 Expires: Wed, 22 Nov 2019 08:41:00 GMT\n\n**HTTP/1.1版本中使用的Cache-Contral**\n\nCache-Control采用的是过期时长来控制缓存，对应的字段是max-age。如 Cache-Control：max-age=3600（代表该资源在3600秒内可以直接使用缓存）\n\nCache-Control还有一些其他的属性，如下：\n\nPublic：客户端和代理端都可以对数据进行缓存\n\nprivate：只能客户端缓存，中间的代理服务器不能缓存\n\nno-cache：不能进行任何形式的缓存\n\ns-naxage：代理服务器的缓存过期时间\n\n#### 协商缓存（强缓存失效后，浏览器在请求头上携带相应的缓存tag香服务器发送请求，由服务器根据tag决定是否使用缓存）\n\n**Last-Modified**\n\nLast-Modified表示最后修改时间。在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段，浏览器接收到后，再第二次请求中会携带If-Modified-Since字段，\n\n这个字段的值是服务器传来的最后修改时间。服务器拿到请求头中的If-Modified-Since字段后，会和服务器中该资源的最后时间修改时间对比，如果请求头中的值小于最后修改时间，\n\n返回新资源。反之则返回304，告诉浏览器直接用缓存\n\n**Etag**\n\nETag是服务器根据当前文件的内容，给文件生成的唯一标识，只要内容有改动，这个值就会变化。服务器通过响应头把这个值给浏览器。浏览器收到这个值会在\n\n下次请求的时候把这个值作为If-None-Match这个字段的内容，放入请求头中给服务器，服务器收到后与Etag对比，不一致返回新资源，一致则返回403，告诉浏览器直接使用缓存\n\n**对比**\n\n在精度上，ETag由于Last-Modified\n\n在性能上，Last-Modified由于ETag，运维ETag在对每个文件生成唯一标识会损耗性能\n\n#### 缓存位置\n\n浏览器其中的缓存位置按照优先级从高到低排列分别是：Service Worker；Memory Cache；Disk Cache；Push Cache。（比较大的文件会直接丢进磁盘中，反之进入内存 ，当内存使用率很高的时候，也会优先储存在磁盘中）\n\nService Worker借鉴了Web Worker的思路，既让JS运行在主线程之外，由于它脱离了浏览器的窗体，因此无法访问DOM。它可以实现离线缓存，消息推送和网络代理等功能\n\nMemory Cache指的是内存缓存，从效率上讲它是最快的。但是存活时间也是最短的，当渲染进程结束后，内存缓存也就在不存在了\n\nDisk Cache是储存在磁盘中的缓存，存取效率比内存缓存低，但是存储容量和存储时长都很不错\n\nPush Cache是推送缓存，这是浏览器缓存的最后一道防线，是HTTP/2中的内容\n\n#### 刷新对于强缓存和协商缓存的影响\n\n当ctrl+f5强制刷新网页时，直接重服务器加载，跳过强缓存和协商缓存\n\n当f5刷新网页时，跳过强缓存，但是会检查协商缓存\n\n浏览器地址栏中写入URL，回车 浏览器先去找缓存\n\n### 缓存代理\n\n对于源服务器来说也是有缓存的，但是对于HTTP缓存来说，如果每次客户端缓存失效都要到源服务器获取，那样服务器的压力会也别大，所以让代理服务器接管一部分服务端的HTTP缓存，客户端缓存过期就去最近的代理服务器获取，代理服务端过期了的话就去最近原服务器获取\n\n#### 源服务器的缓存控制\n\nprivate和public，在源服务器的响应头中，会加上Cache-Control这个字段进行缓存控制字段，那么它的值当中可以加入private或则public表示是否允许代理服务器缓存\n\nproxy-revalidate，must-revalidate的意思s 客户端缓存过期就去源服务器获取，而proxy-revalidate则表示代理服务器的缓存过期后到源服务器获取\n\ns-maxage，s是share的意思，限定了缓存代理服务器中可以放多久，和限制客户端缓存时间max-age并不冲突\n\n#### 客户端的缓存控制\n\nmax-stale和min-fresh，在客户端的请求头上，可以加入这两个字段，对代理服务器上的缓存进行宽容和限制操作，max-stale：5表示过期时间在5秒之内可以从代理中获取，min-fresh：5表示等缓存时间过期之前5秒拿代理中的缓存\n\nonly-if-cached，这个字段加上后表示客户端只会接受代理缓存，而不会接受源服务器的响应，如果代理缓存无效，则返回504\n\n### 跨域\n\n#### 什么是跨域\n\n浏览器遵循同源政策（协议、IP地址和端口都相同则为永源），非同源站点有以下限制：\n\n- 不能读取和修改对方的DOM\n\n- 不读访问对方的Cookie、IndexDB和LocalStorage\n\n- 限制XMLHttpRequest请求\n\n当浏览器香目标URL发Ajax请求时，只要当前URL和目标URL不同源，则产生跨域，被称为跨域请求，跨域请求的响应一般会被浏览器拦截。在服务端处理完数据后，将响应返回，主进程检查到跨域，且没有cors响应头，将响应体全部丢掉，并不会发送给渲染进程\n\n#### CORS\n\nCORS是W3C的一个标准，全称是跨域资源共享。它需要浏览器和服务器的共同支持，具体来说，非IE和IE1.0以上支持CORS，服务器需要附加特定的响应头\n\n浏览器根据请求方法和请求头的特定字段，将请求做了一下分类，具体来说规则是这样，凡是满足下面条件的属于简单请求：\n\n- 请求方法为GET、POST或则HEAD\n- 请求去头的取值范围：Accept、Accept-Language、Content-Language、Content-Type（只限于三个值application/x-form-urlencoded、multipart/form-data、text/plain）\n\n**简单请求**\n\n请求发出去之前，浏览器会在请求头中添加一个Origin字段，用来说明请求来自哪个源。服务器拿到请求之后，在回应时添加Access-Content-Allow-Origin字段，如果Origin不在这个字段的范围中，那么浏览器就会将相应拦截，因此Access-Content-Allow-Origin字段是服务器用来决定浏览器是否拦截这个响应，是必须的一个字段\n\nAccess-Control-Allow-Credentials字段是一个布尔值，表示允许发送Cookie，对于跨域请求，浏览器对这个字段默认值为false，而如果需要拿到浏览器的Cookie，需要添加这个响应头并设为true，并且在前端也需要设置withCredentials属性\n\n```javascript\nlet xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n```\n\nAccess-Control-Expose-Headers字段是给XMLHttpRequest对象赋能让它不仅可以拿到基本的6个响应头字段（Cache-Control、Content-Language、Content-Type、Expires、Last-Modified和Pragma）, 还能拿到这个字段声明的响应头字段\n\n```javascript\nAccess-Control-Expose-Headers: aaa\nXMLHttpRequest.getResponseHeader('aaa')\n```\n\n**非简单请求**\n\n非简单请求相对而言会有些不同，主要有以下两个方面：预检请求和响应字段\n\n以PUT方法为例\n\n```javascript\nvar url = 'http://xxx.com';\nvar xhr = new XMLHttpRequest();\nxhr.open('PUT', url, true);\nxhr.setRequestHeader('X-Custom-Header', 'xxx');\nxhr.send();\n```\n\n当这段代码执行后，会发送预检请求，预检请求的请求行和请求体是下面的格式\n\n```javascript\nOPTIONS / HTTP/1.1\nOrigin: 当前地址\nHost: xxx.com\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: X-Custom-Header\n```\n\n预检请求的方法是OPTIONS，同时会加上Origin源地址和Host目标地址。同时加上以下两个字段\n\nAccess-Control-Request-Method，列出CORS请求用到哪个HTTP方法\n\nAccesss-Control-Request-Headers,指定CORS请求将要加上什么请求头\n\n同时响应字段也会分为两部分，一部分是对于预检请求的响应，一部分是对于CORS请求的响应\n\n预检请求的响应\n\n```javascript\nHTTP/1.1 200 OK\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nAccess-Control-Allow-Credentials: true\nAccess-Control-Max-Age: 1728000\nContent-Type: text/html; charset=utf-8\nContent-Encoding: gzip\nContent-Length: 0\n```\n\n在预检响应字段中有几个关键的字段\n\nAccess-Control-Allow-Origin：表示跨域允许请求的源，可以填具体的源名，也可以填*表示任意源\n\nAccess-Control-Allow-Methods：表示允许的请求方法列表\n\nAccess-Control-Allow-Headers：简单请求中已经介绍\n\nAccess-Control-Allow-Credentials：表示允许发送的请求字段\n\nAccess-Control-Max-Age：表示预检请求的有效期，在此期间，不用发出另一条预检请求\n\n在预检请求的响应返回后，如果请求不满足响应头的条件，则触发XMLHttpRequest的onerror方法，当然后面真正的CORS请求也不会发出来了\n\n#### JSONP\n\n虽然XMLHttpRequest对象遵循同源政策，但是script标签不一样，它可以通过src填上目标地址从而发出GET请求，实现跨域请求并拿到响应。\n\n和CORS相比，JSONP最大的优势在于兼容性好，IE低版本不能使用CORS但可以使用JSONP，缺点也很明显，请求方法单一，只支持GET请求。\n\n以下是封装的一个JSONP\n\n```javascript\nconst jsonp = ({ url, params, callbackName }) => {\n  const generateURL = () => {\n    let dataStr = '';\n for(let key in params) {\n      dataStr += `${key}=${params[key]}&`;\n    }\n dataStr += `callback=${callbackName}`;\n    return `${url}?${dataStr}`;\n  };\n return new Promise((resolve, reject) => {\n    // 初始化回调函数名称\n    callbackName = callbackName || Math.random().toString.replace(',', ''); \n// 创建 script 元素并加入到当前文档中\n    let scriptEle = document.createElement('script');\nscriptEle.src = generateURL();\n    document.body.appendChild(scriptEle);\n  // 绑定到 window 上，为了后面调用\n    window[callbackName] = (data) => {\nresolve(data);\n      // script 执行完了，成为无用元素，需要清除\n      document.body.removeChild(scriptEle);\n     }\n   });\n}\n```\n\n#### Nginx\n\nNginx是一个高性能的反向代理服务器，可以用来轻松解决跨域问题\n\n正向代理帮助客户端访问客户端自己访问不到的服务器，然后将结果返回客户端\n\n反向代理拿到客户端的请求，将请求转发给其他的服务器，主要场景是维持服务器集群的负载均衡，换句话说，反向代理帮其他的服务器拿到请求，然后选择一个合适的服务器，将请求转交给它\n\n因此，正向代理服务器是帮客户端做事情，反向代理服务器是帮其他的服务器做事情\n\nNginx相当于一个跳板机，这个跳板机的域名也是client.com，让客户端访问client.com/api，这当然没有跨域，然后Nginx服务器作为反向代理，将请求转发给server.com，当响应应返回时又将响应给到客户端\n\n### TLs1.2握手过程\n\n前面我们已经知道HTTPS = HTTP + SSL/TLS来保证数据的安全\n\nSSL是安全套接层，在OSI七层模型中处于会话层。之前SSL出过三个大版本，当它发展到第三个大版本的时候才被标准化，成为TLS（传输层安全），并被当做TLS1.0。也就是说TLS1.0 = SSL3.0\n\n现在主流的版本是TLS/1.2，之前的TLS1.0、TLS1.0和TLS1.1都被认为是不安全的，在不久的将来会被完全淘汰。因此我们接下来主要讨论的是TLS1.2，当然在2018年推出了更加优秀的TLS1.3，大大优化了TLS握手过程\n\n#### TLs1.2握手过程\n\n**Client Hello**\n\n首先，浏览器发送client_random、TLS版本、加密套件列表\n\nclient_random是用来最终确定secret的一个参数\n\n在TLS握手过程中，使用ECDHE算法生成pre_random,128位的AES算法进行对称加密，在对称加密的过程中使用主流的GCM分组模式，因为对称加密中很重要的一个问题就是如何分组。最后一个是哈希摘要算法，采用SHA256算法\n\n哈希摘要算法解释实例\n\n服务端给客户端发信息，客户端并不知道此时的信息是服务端发的还是中间伪造的信息，这个时候就要引入哈希摘要算法，将服务端的证书信息通过这个算法生成一个摘要，用来标识这个服务端的身份，用私钥加密后把加密后的标识和自己的公钥传给客户端。客户端拿到这个公钥来解密，生成零一分摘要。两个摘要进行对比，如果相同则能确认服务端的身份\n\n**Server Hello**\n\n服务器给客户端回复非常多的内容\n\nserver_random也是最后生成secret的一个参数，同时确认TLS版本、需要使用的加密套件和自己的证书\n\n**Client验证证书，生成secret**\n\n客户端验证服务端传来的证书和签名是否通过，如果验证通过，则传递client_params这个参数给服务器\n\n客户端通过EECDHE算法计算出pre_random,其中传入两个参数：server_params和slient_params\n\n客户端现在拥有了client_random、server_random和pre_random，接下来这三个数通过一个伪随机数函数来计算最终的secret\n\n**Server生成secret**\n\n接收到客户端传的client_params，服务端使用ECDHE算法生成pre_random，接着用和客户端的伪随机数函数生成最后的secret\n\n#### RAS和ECDHE握手过程的区别\n\nECDHE握手，也就是主流的TLS1.2握手中，使用ECDHE实现pre_random的加密解密，没有用到RSA\n\n使用ECDHE还有一个特点，就是客户端发完首位信息后跨域提前抢跑，直接发送HTTP报文，节省了一个RTT，不必等到收尾信息到达服务器，然后等服务器返回收尾消息给自己，直接开始发请求\n\n### TLS1.3改进\n\nTLS1.3对TLS1.2做了一系列的改进，主要分为着几个部分：强化安全、提高性能\n\n#### 强化安全\n\n在TLS1.3中废除了非常多的加密算法，最后只保留五个加密套件。同时叶删除了非对称加密算法\n\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_256_GCM_SHA384\n- TLS_CHACHA20_POLY1305_SHA256\n- TLS_AES_128_GCM_SHA256\n- TLS_AES_128_GCM_8_SHA256\n\n#### 提高性能\n\n**握手改进**\n\n大体的方式和TLS1.2差不多，不过和TLS1.2相比少了一个RTT，服务器不必等待对方验证证书之后才拿到client_params，而是直接在第一次握手的时候就能够拿到，拿到之后立即计算secret，节省了之前不必要的等待时间。同时，这也以为这在第一次握手的时候客户端需要传送更多的信息，一口气传完\n\n**会话复用**\n\n会话复用有两种方式：Sessio ID和Session Ticket\n\nSession ID是在客户端和服务端首次连接后各自保存会话的ID，并存储会话密钥，当再次连接时，客户端发送ID过来，服务器查找这个ID是否存在，如果找到了就直接复用之前的会话状态，会话密钥不用重新生成，直接用来的那份。当客户端特别的多的时候，服务器的压力会特别大。\n\nSession Ticket 当服务端的压力大的时候，就把压力分摊给客户端。双方连接成功后，服务器加密会话信息，用Session Ticket消息发给客户端，让客户端保存下来。下次重连的时候，就把这个Ticket进行解密，验证没过期那就直接恢复之前的会话状态。这种方式减少了服务端的压力，但是带来了安全问题，即每次用一个固定的密钥来解密Ticket数据，一旦黑客拿到了这个密钥，之前的所有的历史记录也被破解了。因此密钥需要定期进行更换\n\n**PSK**\n\n前面说的都是1-RTT情况下的优化，PSK就是使用0-RTT在Session Ticket的同时带上应用数据，不用等到服务端确认。这样会方服务器被攻击的风险很大\n\n### HTTP/2改进\n\n由于HTTPS在安全方面已经做的非常好了，HTTP改进的关注点放在了性能方面。头部压缩和多路复用，还有颠覆性的功能实现设置请求优先级和服务器推送\n\n#### 头部压缩\n\nHPACK算法是专门为HTTP/2服务的，它有以下两个优点：\n\n- 在服务器和客户端之间建立哈希表，将用到的字段存放在这张表中，那么在传输的时候对于之前出现过的值，只需要把索引传给对方即可，对方拿到索引查表就好了\n- 对于整数和字符串进行哈夫曼编码，哈夫曼编码的原理就是先将所有出现的字符建立一张索引表，然后让出现次数多的字符对应的索引尽可能短，传输的时候也是传输这样的索引序列，可以达到非常高的压缩率\n\n#### 多路复用\n\nTCP的对头阻塞是在数据包层面，单位是数据包，前一个报文密钥收到便不会将后面收到的报文上传给HTTP，而HTTP队头阻塞是在HTTP的队头阻塞在HTTP请求-响应层面，前一个请求密钥请求完，后面的请求就要阻塞住\n\nHTTP/2认为明文传给机器而言太麻烦了，不方便计算机的解析，因为对于文本而言会有多义性的字符，比如回车换行到底是内容还是分隔符，在内部需要用到状态机去识别。于是HTTP/2干脆把报文全部换成二进制格式，全部01传输，方便了机器的解析\n\n通信双方都可以给对方发送二进制帧，这种二进制帧的双向传输的序列也叫做流。HTTP/2用流来在一个TCP连接上进行多个数据帧的通信，这就是多路复用的概念\n\n#### 服务器推送\n\n在HTTP/2中，服务器已经不再完全的被动的接受请求，响应请求，它也能新建stream来给客户端发送消息，当TCP连接建立之后，比如浏览器请求一个HTML文件，服务器就可以在返回HTML的基础上，将HTML中引用到的其他资源文件一起返回给客户端，减少客户端的等待\n\n### HTTP/2中的二进制\n\nHTTP/2中传输的帧结构如下图所示：\n\n![image-20221214143815969](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221214143815969.png)\n\n每个帧分为帧头和帧体。先是三个字节的帧长度，这个长度表示的是帧体的长度然后是帧类型，大概可以分为数据帧和控制帧两种。数据帧用来存放HTTP报文，控制帧用来管理流的传输。\n\n接下来的一个字节是帧标志，黎曼一共8个标志位，常用的有END_HEADERS表示数据结束，END_STRAEAM表示单方向数据发送结束\n\n后四个字节是Stream ID，也就是流标识符，有了它接收方就能从乱序的二进制帧中选择出ID相同的帧，按顺序组装成请求/响应报文\n\n#### 流的状态变化\n\n![image-20221214143852729](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221214143852729.png)\n\n最开始两者都是空闲状态，当客户端发送Headers帧后，开始分配Stream ID，此时客户端的流打开，服务端接受之后服务端的流也打开，两端的流都打开之后，就可以互相传递数据帧和控制帧\n\n当客户端要关闭时，向服务端发送END_SITREAM帧，进入半关闭状态，不过此时服务端的情况是只能发送数据，而不能接受数据。随后服务端也想客户端发送END_STREAM帧，表示数据发送完毕，双方进入关闭状态\n\n如果下次需要开启新的流，流ID需要自增，直到上限为止，到达上限后开一个新的TCP连接重头开始计数。由于流ID字段长度为四个字节，最高位又被保留，因此范围是0~2的31次方，大约21亿个\n\n#### 流的特性\n\n- 并发性，一个HTTP/2连接上可以同时发多个帧，这一点和HTTP/1不同\n- 自增性，流ID是不可重用的，而是会按顺序递增，达到上限后又新开TCP连接从头开始\n- 双向性，客户端和服务端都可以创建流，互不干扰，双方都可以作为发送发或接收方\n- 可设置优先级，可以设置数据帧的优先级，让服务器优先处理重要资源，优化用户体验\n","slug":"http","published":1,"updated":"2022-12-30T03:14:06.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc9yxb8t000750ut5okdbsqs","content":"<h3 id=\"HTTP报文结构\"><a href=\"#HTTP报文结构\" class=\"headerlink\" title=\"HTTP报文结构\"></a>HTTP报文结构</h3><hr>\n<p>HTTP报文结构：起始行+头部+空行+实体</p>\n<span id=\"more\"></span>\n\n<h4 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h4><p>起始行：方法 + 路径 + http版本，GET /home HTTP/1.1</p>\n<p>头部</p>\n<p>空行：区分头部和实体</p>\n<p>实体：请求体（一般POST方法才有）</p>\n<h4 id=\"相应报文\"><a href=\"#相应报文\" class=\"headerlink\" title=\"相应报文\"></a>相应报文</h4><p>起始行：http版本+状态码+原因，HTTP/1.1 200 ok</p>\n<p>头部</p>\n<p>空行：区分头部和实体</p>\n<p>实体：响应体（服务端返回的数据）</p>\n<h3 id=\"HTTP的请求方法\"><a href=\"#HTTP的请求方法\" class=\"headerlink\" title=\"HTTP的请求方法\"></a>HTTP的请求方法</h3><hr>\n<p><strong>方法</strong></p>\n<p>GET：通常用来回去资源</p>\n<p>HEAD：获取资源的元信息</p>\n<p>POST：上传信息</p>\n<p>PUT：修改数据</p>\n<p>DELETE：删除资源</p>\n<p>CONNECT：建立连接隧道，用于代理服务器</p>\n<p>OPTIONS：列出可对资源实行的请求方法，用来跨域请求</p>\n<p>TRACE：追踪请求-相应的传输路径</p>\n<p><strong>GET和POST的区别</strong></p>\n<ul>\n<li>缓存：GET请求会被浏览器主动缓存下来，留下历史记录，而POST默认不会</li>\n<li>编码：GET只能进行URL编码，只能接受ASCII字符，而POST没有限制</li>\n<li>参数：GET一般放在URL中，不安全，POST放在请求体中，更适合传输敏感信息</li>\n<li>冥等性：GET是冥等的，而POST不是（冥等表示执行相同的操作，结果也是相同的）</li>\n<li>TCP：GET会把请求报文一次性发出去，而POST会分为两个TCP数据包，先发header部分，如果服务器响应再发body部分</li>\n</ul>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><h4 id=\"URL结构\"><a href=\"#URL结构\" class=\"headerlink\" title=\"URL结构\"></a>URL结构</h4><p>协议类型+域名类型+端口号+路径+查询参数+锚点</p>\n<p>协议类型：HTTP和HTTPS，HTTPS在HTTP的前提上加上了一个安全保护，在数据给tcp之前对数据先进行加密然后再给到tcp连接传输</p>\n<p>域名和IP：域名是IP的别称，方便人去记忆。浏览器跨域通过DNS去解析域名获得对应的IP</p>\n<p>端口号：一台机器可以提供多种服务，一个服务对应一个端口号port</p>\n<p>路径：具体去哪个页面</p>\n<p>查询参数：同一页面看到不同的内容</p>\n<p>锚点：同一页面同一内容查看某一位置内容</p>\n<p><strong>URL编码</strong></p>\n<p>URL只能使用ASCII，ASCII之外的字符是不支持显示的，而且还有一部分符号是界定符，如果不处理的会导致解析出错。因此URL引入了编码机制，把非ASCII码字符和界定符转为十六进制字节值，然后再签名加个%。如空格转义成%20</p>\n<h3 id=\"HTTP状态码\"><a href=\"#HTTP状态码\" class=\"headerlink\" title=\"HTTP状态码\"></a>HTTP状态码</h3><h4 id=\"1XX\"><a href=\"#1XX\" class=\"headerlink\" title=\"1XX\"></a>1XX</h4><p>表示目前是协议处理的中间状态，还需要后续的操作</p>\n<p>101 Swithing Protocols。再http升级为websocket的时候，如果服务器同意变更，就会发送状态码101</p>\n<h4 id=\"2XX\"><a href=\"#2XX\" class=\"headerlink\" title=\"2XX\"></a>2XX</h4><p>表示成功状态</p>\n<p>200 OK是最常见的成果状态码，通常在响应体中放有数据</p>\n<p>204 NO Content含义与200相同，但响应头后面没有数据</p>\n<p>206 Partial Content顾名思义，表示部分内容，它的使用场景为HTTP分块下载和断点连续传，当然同时也会带上相应的响应头字段Content-Range</p>\n<h4 id=\"3XX\"><a href=\"#3XX\" class=\"headerlink\" title=\"3XX\"></a>3XX</h4><p>表示重定向状态，资源位置发生变动，需要重新请求</p>\n<p>301 Moved Permanently即永久重定向，对应着302 Found，即临时重定向</p>\n<p>304 Not Modified当协商缓存命中时会返回这个状态码</p>\n<h4 id=\"4XX\"><a href=\"#4XX\" class=\"headerlink\" title=\"4XX\"></a>4XX</h4><p>请求报文有误</p>\n<p>400 Bad Request客户端请求的语法错误，服务端无法理解</p>\n<p>401 Unauthorized请求需要用户的身份认证</p>\n<p>403 Forbidden服务器理解客户端的请求，但拒接执行此请求</p>\n<p>404 Not Found资源未找到，表示没有服务器上找到相应的资源</p>\n<p>405 Method Not Allowed请求方法不被服务端允许</p>\n<p>406 Not Acceptable资源无法满足客户端的条件</p>\n<p>408 Request Timeout服务器等待了太长时间</p>\n<p>409 Conflict多个请求发生了冲突</p>\n<p>413 Request Entity Took Large请求体积的数据过大</p>\n<p>414 Request-URL Too Long请求行里的URL太大</p>\n<p>429Too Many Request客户端发送的请求过多</p>\n<p>431 Request HeaderFields Too Large请求头的字段内容太大</p>\n<h4 id=\"5XX\"><a href=\"#5XX\" class=\"headerlink\" title=\"5XX\"></a>5XX</h4><p>服务端发送错误</p>\n<p>500 Internal Server Error服务器出错</p>\n<p>501 Not Gateway服务器自身是正常的，但是访问的时候出错了</p>\n<p>503 Service Unavailable表示服务器当前很忙，暂时无法相应服务</p>\n<h3 id=\"HTTP特点和缺点\"><a href=\"#HTTP特点和缺点\" class=\"headerlink\" title=\"HTTP特点和缺点\"></a>HTTP特点和缺点</h3><h4 id=\"HTTP特点\"><a href=\"#HTTP特点\" class=\"headerlink\" title=\"HTTP特点\"></a>HTTP特点</h4><p>灵活可拓展：一个是语义上自由，只规定了基本格式，还有就是传输形式的多样性</p>\n<p>可靠传输：因为HTTP使用的TCP传输协议，所以继承了TCP的可靠传输</p>\n<p>请求-应答，也就是一发一收、有来有回</p>\n<p>无状态，这里的状态是指的通信过程的上下文信息，而每次http请求都说独立、无关的，默认不需要保留状态信息</p>\n<h4 id=\"HTTP缺点\"><a href=\"#HTTP缺点\" class=\"headerlink\" title=\"HTTP缺点\"></a>HTTP缺点</h4><p>无状态在需要长连接的情况下，需要保存大量的上下文信息，以避免传输重复的信息，这个时候无状态就是缺点；但是如果一些应用仅仅只是为了获取一些数据，不需要保存连接上下文信息，无状态减少了网络开销，此时为优点</p>\n<p>明文传输，协议里的报文不适用二进制数据，直接使用文本形式</p>\n<p>队头阻塞问题，当http开启长连接时，共用同一个TCP连接，同一时刻只能处理一个请求，那么当前请求耗时过长的情况下，其他的请求只能处理阻塞状态</p>\n<h3 id=\"Accept\"><a href=\"#Accept\" class=\"headerlink\" title=\"Accept\"></a>Accept</h3><p>对应Accept系列字段的介绍分为四个部分：数据格式、压缩方式、支持语言和字符集</p>\n<h4 id=\"数据格式\"><a href=\"#数据格式\" class=\"headerlink\" title=\"数据格式\"></a>数据格式</h4><p>对于发送端利用Content-Type字段限制数据类型，接受到利用Accept字段限制接受的数据类型。以下是具体的取值</p>\n<p>text：text/html，text/plain，text/css等</p>\n<p>image：image/gif，image/jpeg，image/png等</p>\n<p>application：application/json, application/javascript, application/pdf, application/octet-stream</p>\n<h4 id=\"压缩方式\"><a href=\"#压缩方式\" class=\"headerlink\" title=\"压缩方式\"></a>压缩方式</h4><p>发送端使用Conten-Encoding表明压缩方式，接受端使用Accept-Encoding限制压缩方式。以下是具体的取值</p>\n<p>gzip：目前比较流行的压缩格式</p>\n<p>deflate：另外一种有名的压缩格式</p>\n<p>br：一种专门为HTTP发明的压缩格式</p>\n<h4 id=\"支持语言\"><a href=\"#支持语言\" class=\"headerlink\" title=\"支持语言\"></a>支持语言</h4><p>发送端使用Content-Language字段表明语言，接收端使用Accept-Language字段表明语言</p>\n<h4 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h4><p>发送端直接放在Content-Type中以charset指定字符集，接受端使用Accept-Charset指定可以接受的字符集</p>\n<p>// 发送端</p>\n<p>Content-Type: text/html; charset=utf-8</p>\n<p>// 接收端</p>\n<p>Accept-Charset: charset=utf-8</p>\n<h3 id=\"HTTP传输定长和不定长的数据\"><a href=\"#HTTP传输定长和不定长的数据\" class=\"headerlink\" title=\"HTTP传输定长和不定长的数据\"></a>HTTP传输定长和不定长的数据</h3><h4 id=\"定长包体\"><a href=\"#定长包体\" class=\"headerlink\" title=\"定长包体\"></a>定长包体</h4><p>对于定长包体来说，发送端在传输的时候一般会带上Conten-Length字段指明包体的长度</p>\n<h4 id=\"不定长包体\"><a href=\"#不定长包体\" class=\"headerlink\" title=\"不定长包体\"></a>不定长包体</h4><p>对于不定长包体，需要配置Transfer-Encoding：chunked，设置了这个字段后会自动产生两个效果，第一个是会忽略Content-Length，第二个就是基于长连接持续推送动态内容</p>\n<h3 id=\"HTTP处理大文件\"><a href=\"#HTTP处理大文件\" class=\"headerlink\" title=\"HTTP处理大文件\"></a>HTTP处理大文件</h3><p>对于一些大文件来说，想要一下传输完是不现实的，所以HTTP采取了范围请求的解决方案允许客户端仅仅请求一个资源的一部分</p>\n<h4 id=\"如何支持\"><a href=\"#如何支持\" class=\"headerlink\" title=\"如何支持\"></a>如何支持</h4><p>前提是服务器支持范围请求，要支持这个功能，响应头上就需要加上Accept-Ranges:none来告诉客户端这边是支持范围请求</p>\n<h4 id=\"Range字段拆解\"><a href=\"#Range字段拆解\" class=\"headerlink\" title=\"Range字段拆解\"></a>Range字段拆解</h4><p>对于客户端，通过Range字段来指定请求那一部分，格式为bytes=x-y</p>\n<p>0-499表示从开始到第499个字节</p>\n<p>500-表示从第500字节到文件终点</p>\n<p>-100表示文件的最后一个100个字节</p>\n<p>服务器收到请求之后，首先验证范围是否合法，如果越界了那么返回416错误码，否则读取相应片段，返回206状态码</p>\n<h4 id=\"对于单段数据和多端数据，服务器的响应数据是不一样的\"><a href=\"#对于单段数据和多端数据，服务器的响应数据是不一样的\" class=\"headerlink\" title=\"对于单段数据和多端数据，服务器的响应数据是不一样的\"></a>对于单段数据和多端数据，服务器的响应数据是不一样的</h4><p>单段数据 Range：bytes=0-9</p>\n<p>多段数据 Range：bytes=0-9，30-39</p>\n<p><strong>单段数据</strong></p>\n<p>Content-Range字段，0-9表示请求的返回，100表示资源的总大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span> <span class=\"number\">206</span> <span class=\"title class_\">Partial</span> <span class=\"title class_\">Content</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Length</span>: <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"title class_\">Accept</span>-<span class=\"title class_\">Ranges</span>: bytes</span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Range</span>: bytes <span class=\"number\">0</span>-<span class=\"number\">9</span>/<span class=\"number\">10</span></span><br><span class=\"line\">i am xxxxx</span><br></pre></td></tr></table></figure>\n\n<p><strong>多段数据</strong></p>\n<p>Content0Type：multiparty/byteranges；boundary=00000010101表示请求一定是多段数据请求，响应体中的分隔符是00000010101</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span> <span class=\"number\">206</span> <span class=\"title class_\">Partial</span> <span class=\"title class_\">Content</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Type</span>: multipart/byteranges; boundary=<span class=\"number\">00000010101</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Length</span>: <span class=\"number\">189</span></span><br><span class=\"line\"><span class=\"title class_\">Connection</span>: keep-alive</span><br><span class=\"line\"><span class=\"title class_\">Accept</span>-<span class=\"title class_\">Ranges</span>: bytes</span><br><span class=\"line\">--<span class=\"number\">00000010101</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Type</span>: text/plain</span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Range</span>: bytes <span class=\"number\">0</span>-<span class=\"number\">9</span>/<span class=\"number\">96</span></span><br><span class=\"line\">i am xxxxx</span><br><span class=\"line\">--<span class=\"number\">00000010101</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Type</span>: text/plain</span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Range</span>: bytes <span class=\"number\">20</span>-<span class=\"number\">29</span>/<span class=\"number\">96</span></span><br><span class=\"line\">eex jspy </span><br><span class=\"line\">e--<span class=\"number\">00000010101</span>--</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HTTP处理表单数据\"><a href=\"#HTTP处理表单数据\" class=\"headerlink\" title=\"HTTP处理表单数据\"></a>HTTP处理表单数据</h3><p>在HTTP中，有两种主要的表单提交的方式，体现在两种不同的Content-Type取值，application/x-www-form-urlencoded和multiparty/form-data</p>\n<h4 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a>application/x-www-form-urlencoded</h4><p>对于application/x-www-form-urlencoded格式的表单内容，有以下特点：数据会被编码成以&amp;分隔的键值对，字符以URL编码方法编码</p>\n<h4 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a>multipart/form-data</h4><p>请求头中的Content-Type字段会包含boundary。且boundary的值有浏览器默认指定。例：Content-Type：multipart=- - - WebkitFormBoundaryRRJKeWfHPGrS4LKe</p>\n<p>数据会分为多个部分，每两个部分之间通过分隔符来分隔，每部分表示均有HTTP头部描述子包体</p>\n<h3 id=\"HTTP处理队头阻塞\"><a href=\"#HTTP处理队头阻塞\" class=\"headerlink\" title=\"HTTP处理队头阻塞\"></a>HTTP处理队头阻塞</h3><p>HTTP传输是基于请求-应答的模式进行的，报文必须是一发一收，但值得注意的是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理</p>\n<h4 id=\"并发连接\"><a href=\"#并发连接\" class=\"headerlink\" title=\"并发连接\"></a>并发连接</h4><p>对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其他所有任务。在RFC2616规定过客户端最多并发2个连接，不过事实上在现在的浏览器标准中，这个上限要多很多，Chrome是6个</p>\n<h4 id=\"域名分片\"><a href=\"#域名分片\" class=\"headerlink\" title=\"域名分片\"></a>域名分片</h4><p>一个域名表示可以并发6个长连接，那就多分一些二级域名，在一个baidu.com域名下可以分出很多二级域名，如content.baidu.com,text.baidu.com等二级域名。这样一台服务器能并发的连接数就更多了</p>\n<h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><h4 id=\"生存周期\"><a href=\"#生存周期\" class=\"headerlink\" title=\"生存周期\"></a>生存周期</h4><p>Cookie的有效期可以通过Expires和Max-Age两个属性，也就是HTTP的强缓存。Expires表示资源过期时间，Max-Age用的是一段时间间隔，单位是秒，从浏览器收到报文开始计算</p>\n<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><p>关于作用域有两个属性Domain和path，给Cookie绑定了域名和路径，在发送请求之前，发现域名或则路径不匹配的话，就不会带上该Cookie。对于路径来说，/表示域名下的任何路径都允许使用Cookie</p>\n<h4 id=\"安全相关\"><a href=\"#安全相关\" class=\"headerlink\" title=\"安全相关\"></a>安全相关</h4><p>如果带上Secure，说明只能通过HTTPS传输cookie</p>\n<p>如果带上HttpOnly，那么说明只能通过HTTP协议传输，不能通过JS访问，这也是预防XSS攻击的重要的手段</p>\n<p>如果带上SameSite属性则可以预防CSRF攻击，SameSite有三个值可以选择：</p>\n<ul>\n<li>在Strict模式下，浏览器完全禁止第三方请求携带Cookie</li>\n<li>在Lax模式，只能在get方法提交表单或则a标签发送get请求的情况下可以携带Cookie</li>\n<li>在None模式下，也就是默认模式，请求都会自动带上Cookie</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>容量缺陷：Cookie的体积上限只有4KB。</p>\n<p>性能缺陷：Cookie紧跟域名，不管域名下面的某一个地址需不需要这个Cookie，请求都会带上完整的Cookie，这样随着请求数的增多，会造成巨大的性能浪费。但可以通过Domain和Path指定作用域来解决</p>\n<p>安全缺陷：由于Cookie以纯文本的形式在浏览器和服务端中传递，这样很容易被非法用户截获，然后进行一系列的篡改。重新发送给服务器。在Http为fasle的情况下，Cookie信息能直接通过JS脚本来读取</p>\n<h3 id=\"HTTP代理\"><a href=\"#HTTP代理\" class=\"headerlink\" title=\"HTTP代理\"></a>HTTP代理</h3><p>代理服务器是介于客户端和服务端的一个中间角色，对于客户端来说，表现为服务器进行响应，对于服务器来说，表现为客户端发起请求。具有双重身份</p>\n<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><p>负载均衡：客户端发送的请求会先到达代理服务器，后面有多少源服务器，IP地址客户端都是不知道的</p>\n<p>保障安全：利用心跳机制监控后台的服务器，一旦发现故障机就将其踏出集群。并且对上下行的数据进行过滤，对非法IP限流</p>\n<p>缓存代理：将内容缓存到代理服务器，使得客户端可以直接从代理服务器获得缓存</p>\n<h4 id=\"相关头部字段\"><a href=\"#相关头部字段\" class=\"headerlink\" title=\"相关头部字段\"></a>相关头部字段</h4><p>Via，代理服务器需要表明自己的身份，可以通过Via字段来记录。Via中代理的顺序就是HTTP传输中报文传达的顺序</p>\n<p>X-Forwarded-For，记录请求方的IP地址</p>\n<p>X-Real-IP，获取真实用户的IP地址，X-Forwarded-Host记录客户端的域名，X-Forwarded-Proto记录客户端的协议名</p>\n<h3 id=\"HTTP缓存\"><a href=\"#HTTP缓存\" class=\"headerlink\" title=\"HTTP缓存\"></a>HTTP缓存</h3><h4 id=\"缓存的好处\"><a href=\"#缓存的好处\" class=\"headerlink\" title=\"缓存的好处\"></a>缓存的好处</h4><p>减少网络带宽的消耗，对网站运营者来说，可以减少网络流量，降低运营成本</p>\n<p>降低服务器压力，对于服务器来说，重复使用浏览器本地的缓存数据，可以减少对服务器的请求，降低对服务器的压力</p>\n<p>减少网络延迟，加快网络渲染，对客户端来说，使用浏览器本地的缓存比请求服务器的数据更快，提高页面的渲染效率</p>\n<h4 id=\"强缓存（不需要发送http请求。注意：当Expires和Cache-Control同时存在时，Cache-Control会被优先考虑）\"><a href=\"#强缓存（不需要发送http请求。注意：当Expires和Cache-Control同时存在时，Cache-Control会被优先考虑）\" class=\"headerlink\" title=\"强缓存（不需要发送http请求。注意：当Expires和Cache-Control同时存在时，Cache-Control会被优先考虑）\"></a>强缓存（不需要发送http请求。注意：当Expires和Cache-Control同时存在时，Cache-Control会被优先考虑）</h4><p><strong>HTTP/1.0版本中使用的Cache-Control</strong></p>\n<p>Expires代表缓存过期时间，存在于服务端返回的响应头中，用来告诉浏览器在这个时间之前都可以直接从缓存中获取数据。如 Expires: Wed, 22 Nov 2019 08:41:00 GMT</p>\n<p><strong>HTTP/1.1版本中使用的Cache-Contral</strong></p>\n<p>Cache-Control采用的是过期时长来控制缓存，对应的字段是max-age。如 Cache-Control：max-age=3600（代表该资源在3600秒内可以直接使用缓存）</p>\n<p>Cache-Control还有一些其他的属性，如下：</p>\n<p>Public：客户端和代理端都可以对数据进行缓存</p>\n<p>private：只能客户端缓存，中间的代理服务器不能缓存</p>\n<p>no-cache：不能进行任何形式的缓存</p>\n<p>s-naxage：代理服务器的缓存过期时间</p>\n<h4 id=\"协商缓存（强缓存失效后，浏览器在请求头上携带相应的缓存tag香服务器发送请求，由服务器根据tag决定是否使用缓存）\"><a href=\"#协商缓存（强缓存失效后，浏览器在请求头上携带相应的缓存tag香服务器发送请求，由服务器根据tag决定是否使用缓存）\" class=\"headerlink\" title=\"协商缓存（强缓存失效后，浏览器在请求头上携带相应的缓存tag香服务器发送请求，由服务器根据tag决定是否使用缓存）\"></a>协商缓存（强缓存失效后，浏览器在请求头上携带相应的缓存tag香服务器发送请求，由服务器根据tag决定是否使用缓存）</h4><p><strong>Last-Modified</strong></p>\n<p>Last-Modified表示最后修改时间。在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段，浏览器接收到后，再第二次请求中会携带If-Modified-Since字段，</p>\n<p>这个字段的值是服务器传来的最后修改时间。服务器拿到请求头中的If-Modified-Since字段后，会和服务器中该资源的最后时间修改时间对比，如果请求头中的值小于最后修改时间，</p>\n<p>返回新资源。反之则返回304，告诉浏览器直接用缓存</p>\n<p><strong>Etag</strong></p>\n<p>ETag是服务器根据当前文件的内容，给文件生成的唯一标识，只要内容有改动，这个值就会变化。服务器通过响应头把这个值给浏览器。浏览器收到这个值会在</p>\n<p>下次请求的时候把这个值作为If-None-Match这个字段的内容，放入请求头中给服务器，服务器收到后与Etag对比，不一致返回新资源，一致则返回403，告诉浏览器直接使用缓存</p>\n<p><strong>对比</strong></p>\n<p>在精度上，ETag由于Last-Modified</p>\n<p>在性能上，Last-Modified由于ETag，运维ETag在对每个文件生成唯一标识会损耗性能</p>\n<h4 id=\"缓存位置\"><a href=\"#缓存位置\" class=\"headerlink\" title=\"缓存位置\"></a>缓存位置</h4><p>浏览器其中的缓存位置按照优先级从高到低排列分别是：Service Worker；Memory Cache；Disk Cache；Push Cache。（比较大的文件会直接丢进磁盘中，反之进入内存 ，当内存使用率很高的时候，也会优先储存在磁盘中）</p>\n<p>Service Worker借鉴了Web Worker的思路，既让JS运行在主线程之外，由于它脱离了浏览器的窗体，因此无法访问DOM。它可以实现离线缓存，消息推送和网络代理等功能</p>\n<p>Memory Cache指的是内存缓存，从效率上讲它是最快的。但是存活时间也是最短的，当渲染进程结束后，内存缓存也就在不存在了</p>\n<p>Disk Cache是储存在磁盘中的缓存，存取效率比内存缓存低，但是存储容量和存储时长都很不错</p>\n<p>Push Cache是推送缓存，这是浏览器缓存的最后一道防线，是HTTP/2中的内容</p>\n<h4 id=\"刷新对于强缓存和协商缓存的影响\"><a href=\"#刷新对于强缓存和协商缓存的影响\" class=\"headerlink\" title=\"刷新对于强缓存和协商缓存的影响\"></a>刷新对于强缓存和协商缓存的影响</h4><p>当ctrl+f5强制刷新网页时，直接重服务器加载，跳过强缓存和协商缓存</p>\n<p>当f5刷新网页时，跳过强缓存，但是会检查协商缓存</p>\n<p>浏览器地址栏中写入URL，回车 浏览器先去找缓存</p>\n<h3 id=\"缓存代理\"><a href=\"#缓存代理\" class=\"headerlink\" title=\"缓存代理\"></a>缓存代理</h3><p>对于源服务器来说也是有缓存的，但是对于HTTP缓存来说，如果每次客户端缓存失效都要到源服务器获取，那样服务器的压力会也别大，所以让代理服务器接管一部分服务端的HTTP缓存，客户端缓存过期就去最近的代理服务器获取，代理服务端过期了的话就去最近原服务器获取</p>\n<h4 id=\"源服务器的缓存控制\"><a href=\"#源服务器的缓存控制\" class=\"headerlink\" title=\"源服务器的缓存控制\"></a>源服务器的缓存控制</h4><p>private和public，在源服务器的响应头中，会加上Cache-Control这个字段进行缓存控制字段，那么它的值当中可以加入private或则public表示是否允许代理服务器缓存</p>\n<p>proxy-revalidate，must-revalidate的意思s 客户端缓存过期就去源服务器获取，而proxy-revalidate则表示代理服务器的缓存过期后到源服务器获取</p>\n<p>s-maxage，s是share的意思，限定了缓存代理服务器中可以放多久，和限制客户端缓存时间max-age并不冲突</p>\n<h4 id=\"客户端的缓存控制\"><a href=\"#客户端的缓存控制\" class=\"headerlink\" title=\"客户端的缓存控制\"></a>客户端的缓存控制</h4><p>max-stale和min-fresh，在客户端的请求头上，可以加入这两个字段，对代理服务器上的缓存进行宽容和限制操作，max-stale：5表示过期时间在5秒之内可以从代理中获取，min-fresh：5表示等缓存时间过期之前5秒拿代理中的缓存</p>\n<p>only-if-cached，这个字段加上后表示客户端只会接受代理缓存，而不会接受源服务器的响应，如果代理缓存无效，则返回504</p>\n<h3 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h3><h4 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h4><p>浏览器遵循同源政策（协议、IP地址和端口都相同则为永源），非同源站点有以下限制：</p>\n<ul>\n<li><p>不能读取和修改对方的DOM</p>\n</li>\n<li><p>不读访问对方的Cookie、IndexDB和LocalStorage</p>\n</li>\n<li><p>限制XMLHttpRequest请求</p>\n</li>\n</ul>\n<p>当浏览器香目标URL发Ajax请求时，只要当前URL和目标URL不同源，则产生跨域，被称为跨域请求，跨域请求的响应一般会被浏览器拦截。在服务端处理完数据后，将响应返回，主进程检查到跨域，且没有cors响应头，将响应体全部丢掉，并不会发送给渲染进程</p>\n<h4 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h4><p>CORS是W3C的一个标准，全称是跨域资源共享。它需要浏览器和服务器的共同支持，具体来说，非IE和IE1.0以上支持CORS，服务器需要附加特定的响应头</p>\n<p>浏览器根据请求方法和请求头的特定字段，将请求做了一下分类，具体来说规则是这样，凡是满足下面条件的属于简单请求：</p>\n<ul>\n<li>请求方法为GET、POST或则HEAD</li>\n<li>请求去头的取值范围：Accept、Accept-Language、Content-Language、Content-Type（只限于三个值application/x-form-urlencoded、multipart/form-data、text/plain）</li>\n</ul>\n<p><strong>简单请求</strong></p>\n<p>请求发出去之前，浏览器会在请求头中添加一个Origin字段，用来说明请求来自哪个源。服务器拿到请求之后，在回应时添加Access-Content-Allow-Origin字段，如果Origin不在这个字段的范围中，那么浏览器就会将相应拦截，因此Access-Content-Allow-Origin字段是服务器用来决定浏览器是否拦截这个响应，是必须的一个字段</p>\n<p>Access-Control-Allow-Credentials字段是一个布尔值，表示允许发送Cookie，对于跨域请求，浏览器对这个字段默认值为false，而如果需要拿到浏览器的Cookie，需要添加这个响应头并设为true，并且在前端也需要设置withCredentials属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhr.<span class=\"property\">withCredentials</span> = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Access-Control-Expose-Headers字段是给XMLHttpRequest对象赋能让它不仅可以拿到基本的6个响应头字段（Cache-Control、Content-Language、Content-Type、Expires、Last-Modified和Pragma）, 还能拿到这个字段声明的响应头字段</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Expose</span>-<span class=\"title class_\">Headers</span>: aaa</span><br><span class=\"line\"><span class=\"title class_\">XMLHttpRequest</span>.<span class=\"title function_\">getResponseHeader</span>(<span class=\"string\">&#x27;aaa&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>非简单请求</strong></p>\n<p>非简单请求相对而言会有些不同，主要有以下两个方面：预检请求和响应字段</p>\n<p>以PUT方法为例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&#x27;http://xxx.com&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;PUT&#x27;</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&#x27;X-Custom-Header&#x27;</span>, <span class=\"string\">&#x27;xxx&#x27;</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<p>当这段代码执行后，会发送预检请求，预检请求的请求行和请求体是下面的格式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">OPTIONS</span> / <span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"title class_\">Origin</span>: 当前地址</span><br><span class=\"line\"><span class=\"title class_\">Host</span>: xxx.<span class=\"property\">com</span></span><br><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Request</span>-<span class=\"title class_\">Method</span>: <span class=\"variable constant_\">PUT</span></span><br><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Request</span>-<span class=\"title class_\">Headers</span>: X-<span class=\"title class_\">Custom</span>-<span class=\"title class_\">Header</span></span><br></pre></td></tr></table></figure>\n\n<p>预检请求的方法是OPTIONS，同时会加上Origin源地址和Host目标地址。同时加上以下两个字段</p>\n<p>Access-Control-Request-Method，列出CORS请求用到哪个HTTP方法</p>\n<p>Accesss-Control-Request-Headers,指定CORS请求将要加上什么请求头</p>\n<p>同时响应字段也会分为两部分，一部分是对于预检请求的响应，一部分是对于CORS请求的响应</p>\n<p>预检请求的响应</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span> <span class=\"number\">200</span> <span class=\"variable constant_\">OK</span></span><br><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Origin</span>: *</span><br><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Methods</span>: <span class=\"variable constant_\">GET</span>, <span class=\"variable constant_\">POST</span>, <span class=\"variable constant_\">PUT</span></span><br><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Headers</span>: X-<span class=\"title class_\">Custom</span>-<span class=\"title class_\">Header</span></span><br><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Credentials</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Max</span>-<span class=\"title class_\">Age</span>: <span class=\"number\">1728000</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Type</span>: text/html; charset=utf-<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Encoding</span>: gzip</span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Length</span>: <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>在预检响应字段中有几个关键的字段</p>\n<p>Access-Control-Allow-Origin：表示跨域允许请求的源，可以填具体的源名，也可以填*表示任意源</p>\n<p>Access-Control-Allow-Methods：表示允许的请求方法列表</p>\n<p>Access-Control-Allow-Headers：简单请求中已经介绍</p>\n<p>Access-Control-Allow-Credentials：表示允许发送的请求字段</p>\n<p>Access-Control-Max-Age：表示预检请求的有效期，在此期间，不用发出另一条预检请求</p>\n<p>在预检请求的响应返回后，如果请求不满足响应头的条件，则触发XMLHttpRequest的onerror方法，当然后面真正的CORS请求也不会发出来了</p>\n<h4 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h4><p>虽然XMLHttpRequest对象遵循同源政策，但是script标签不一样，它可以通过src填上目标地址从而发出GET请求，实现跨域请求并拿到响应。</p>\n<p>和CORS相比，JSONP最大的优势在于兼容性好，IE低版本不能使用CORS但可以使用JSONP，缺点也很明显，请求方法单一，只支持GET请求。</p>\n<p>以下是封装的一个JSONP</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">jsonp</span> = (<span class=\"params\">&#123; url, params, callbackName &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">generateURL</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dataStr = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> params) &#123;</span><br><span class=\"line\">      dataStr += <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;params[key]&#125;</span>&amp;`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> dataStr += <span class=\"string\">`callback=<span class=\"subst\">$&#123;callbackName&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>?<span class=\"subst\">$&#123;dataStr&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化回调函数名称</span></span><br><span class=\"line\">    callbackName = callbackName || <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>().<span class=\"property\">toString</span>.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\">// 创建 script 元素并加入到当前文档中</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> scriptEle = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">scriptEle.<span class=\"property\">src</span> = <span class=\"title function_\">generateURL</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(scriptEle);</span><br><span class=\"line\">  <span class=\"comment\">// 绑定到 window 上，为了后面调用</span></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>[callbackName] = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"title function_\">resolve</span>(data);</span><br><span class=\"line\">      <span class=\"comment\">// script 执行完了，成为无用元素，需要清除</span></span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(scriptEle);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx是一个高性能的反向代理服务器，可以用来轻松解决跨域问题</p>\n<p>正向代理帮助客户端访问客户端自己访问不到的服务器，然后将结果返回客户端</p>\n<p>反向代理拿到客户端的请求，将请求转发给其他的服务器，主要场景是维持服务器集群的负载均衡，换句话说，反向代理帮其他的服务器拿到请求，然后选择一个合适的服务器，将请求转交给它</p>\n<p>因此，正向代理服务器是帮客户端做事情，反向代理服务器是帮其他的服务器做事情</p>\n<p>Nginx相当于一个跳板机，这个跳板机的域名也是client.com，让客户端访问client.com/api，这当然没有跨域，然后Nginx服务器作为反向代理，将请求转发给server.com，当响应应返回时又将响应给到客户端</p>\n<h3 id=\"TLs1-2握手过程\"><a href=\"#TLs1-2握手过程\" class=\"headerlink\" title=\"TLs1.2握手过程\"></a>TLs1.2握手过程</h3><p>前面我们已经知道HTTPS = HTTP + SSL/TLS来保证数据的安全</p>\n<p>SSL是安全套接层，在OSI七层模型中处于会话层。之前SSL出过三个大版本，当它发展到第三个大版本的时候才被标准化，成为TLS（传输层安全），并被当做TLS1.0。也就是说TLS1.0 = SSL3.0</p>\n<p>现在主流的版本是TLS/1.2，之前的TLS1.0、TLS1.0和TLS1.1都被认为是不安全的，在不久的将来会被完全淘汰。因此我们接下来主要讨论的是TLS1.2，当然在2018年推出了更加优秀的TLS1.3，大大优化了TLS握手过程</p>\n<h4 id=\"TLs1-2握手过程-1\"><a href=\"#TLs1-2握手过程-1\" class=\"headerlink\" title=\"TLs1.2握手过程\"></a>TLs1.2握手过程</h4><p><strong>Client Hello</strong></p>\n<p>首先，浏览器发送client_random、TLS版本、加密套件列表</p>\n<p>client_random是用来最终确定secret的一个参数</p>\n<p>在TLS握手过程中，使用ECDHE算法生成pre_random,128位的AES算法进行对称加密，在对称加密的过程中使用主流的GCM分组模式，因为对称加密中很重要的一个问题就是如何分组。最后一个是哈希摘要算法，采用SHA256算法</p>\n<p>哈希摘要算法解释实例</p>\n<p>服务端给客户端发信息，客户端并不知道此时的信息是服务端发的还是中间伪造的信息，这个时候就要引入哈希摘要算法，将服务端的证书信息通过这个算法生成一个摘要，用来标识这个服务端的身份，用私钥加密后把加密后的标识和自己的公钥传给客户端。客户端拿到这个公钥来解密，生成零一分摘要。两个摘要进行对比，如果相同则能确认服务端的身份</p>\n<p><strong>Server Hello</strong></p>\n<p>服务器给客户端回复非常多的内容</p>\n<p>server_random也是最后生成secret的一个参数，同时确认TLS版本、需要使用的加密套件和自己的证书</p>\n<p><strong>Client验证证书，生成secret</strong></p>\n<p>客户端验证服务端传来的证书和签名是否通过，如果验证通过，则传递client_params这个参数给服务器</p>\n<p>客户端通过EECDHE算法计算出pre_random,其中传入两个参数：server_params和slient_params</p>\n<p>客户端现在拥有了client_random、server_random和pre_random，接下来这三个数通过一个伪随机数函数来计算最终的secret</p>\n<p><strong>Server生成secret</strong></p>\n<p>接收到客户端传的client_params，服务端使用ECDHE算法生成pre_random，接着用和客户端的伪随机数函数生成最后的secret</p>\n<h4 id=\"RAS和ECDHE握手过程的区别\"><a href=\"#RAS和ECDHE握手过程的区别\" class=\"headerlink\" title=\"RAS和ECDHE握手过程的区别\"></a>RAS和ECDHE握手过程的区别</h4><p>ECDHE握手，也就是主流的TLS1.2握手中，使用ECDHE实现pre_random的加密解密，没有用到RSA</p>\n<p>使用ECDHE还有一个特点，就是客户端发完首位信息后跨域提前抢跑，直接发送HTTP报文，节省了一个RTT，不必等到收尾信息到达服务器，然后等服务器返回收尾消息给自己，直接开始发请求</p>\n<h3 id=\"TLS1-3改进\"><a href=\"#TLS1-3改进\" class=\"headerlink\" title=\"TLS1.3改进\"></a>TLS1.3改进</h3><p>TLS1.3对TLS1.2做了一系列的改进，主要分为着几个部分：强化安全、提高性能</p>\n<h4 id=\"强化安全\"><a href=\"#强化安全\" class=\"headerlink\" title=\"强化安全\"></a>强化安全</h4><p>在TLS1.3中废除了非常多的加密算法，最后只保留五个加密套件。同时叶删除了非对称加密算法</p>\n<ul>\n<li>TLS_AES_128_GCM_SHA256</li>\n<li>TLS_AES_256_GCM_SHA384</li>\n<li>TLS_CHACHA20_POLY1305_SHA256</li>\n<li>TLS_AES_128_GCM_SHA256</li>\n<li>TLS_AES_128_GCM_8_SHA256</li>\n</ul>\n<h4 id=\"提高性能\"><a href=\"#提高性能\" class=\"headerlink\" title=\"提高性能\"></a>提高性能</h4><p><strong>握手改进</strong></p>\n<p>大体的方式和TLS1.2差不多，不过和TLS1.2相比少了一个RTT，服务器不必等待对方验证证书之后才拿到client_params，而是直接在第一次握手的时候就能够拿到，拿到之后立即计算secret，节省了之前不必要的等待时间。同时，这也以为这在第一次握手的时候客户端需要传送更多的信息，一口气传完</p>\n<p><strong>会话复用</strong></p>\n<p>会话复用有两种方式：Sessio ID和Session Ticket</p>\n<p>Session ID是在客户端和服务端首次连接后各自保存会话的ID，并存储会话密钥，当再次连接时，客户端发送ID过来，服务器查找这个ID是否存在，如果找到了就直接复用之前的会话状态，会话密钥不用重新生成，直接用来的那份。当客户端特别的多的时候，服务器的压力会特别大。</p>\n<p>Session Ticket 当服务端的压力大的时候，就把压力分摊给客户端。双方连接成功后，服务器加密会话信息，用Session Ticket消息发给客户端，让客户端保存下来。下次重连的时候，就把这个Ticket进行解密，验证没过期那就直接恢复之前的会话状态。这种方式减少了服务端的压力，但是带来了安全问题，即每次用一个固定的密钥来解密Ticket数据，一旦黑客拿到了这个密钥，之前的所有的历史记录也被破解了。因此密钥需要定期进行更换</p>\n<p><strong>PSK</strong></p>\n<p>前面说的都是1-RTT情况下的优化，PSK就是使用0-RTT在Session Ticket的同时带上应用数据，不用等到服务端确认。这样会方服务器被攻击的风险很大</p>\n<h3 id=\"HTTP-2改进\"><a href=\"#HTTP-2改进\" class=\"headerlink\" title=\"HTTP/2改进\"></a>HTTP/2改进</h3><p>由于HTTPS在安全方面已经做的非常好了，HTTP改进的关注点放在了性能方面。头部压缩和多路复用，还有颠覆性的功能实现设置请求优先级和服务器推送</p>\n<h4 id=\"头部压缩\"><a href=\"#头部压缩\" class=\"headerlink\" title=\"头部压缩\"></a>头部压缩</h4><p>HPACK算法是专门为HTTP/2服务的，它有以下两个优点：</p>\n<ul>\n<li>在服务器和客户端之间建立哈希表，将用到的字段存放在这张表中，那么在传输的时候对于之前出现过的值，只需要把索引传给对方即可，对方拿到索引查表就好了</li>\n<li>对于整数和字符串进行哈夫曼编码，哈夫曼编码的原理就是先将所有出现的字符建立一张索引表，然后让出现次数多的字符对应的索引尽可能短，传输的时候也是传输这样的索引序列，可以达到非常高的压缩率</li>\n</ul>\n<h4 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h4><p>TCP的对头阻塞是在数据包层面，单位是数据包，前一个报文密钥收到便不会将后面收到的报文上传给HTTP，而HTTP队头阻塞是在HTTP的队头阻塞在HTTP请求-响应层面，前一个请求密钥请求完，后面的请求就要阻塞住</p>\n<p>HTTP/2认为明文传给机器而言太麻烦了，不方便计算机的解析，因为对于文本而言会有多义性的字符，比如回车换行到底是内容还是分隔符，在内部需要用到状态机去识别。于是HTTP/2干脆把报文全部换成二进制格式，全部01传输，方便了机器的解析</p>\n<p>通信双方都可以给对方发送二进制帧，这种二进制帧的双向传输的序列也叫做流。HTTP/2用流来在一个TCP连接上进行多个数据帧的通信，这就是多路复用的概念</p>\n<h4 id=\"服务器推送\"><a href=\"#服务器推送\" class=\"headerlink\" title=\"服务器推送\"></a>服务器推送</h4><p>在HTTP/2中，服务器已经不再完全的被动的接受请求，响应请求，它也能新建stream来给客户端发送消息，当TCP连接建立之后，比如浏览器请求一个HTML文件，服务器就可以在返回HTML的基础上，将HTML中引用到的其他资源文件一起返回给客户端，减少客户端的等待</p>\n<h3 id=\"HTTP-2中的二进制\"><a href=\"#HTTP-2中的二进制\" class=\"headerlink\" title=\"HTTP/2中的二进制\"></a>HTTP/2中的二进制</h3><p>HTTP/2中传输的帧结构如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221214143815969.png\" alt=\"image-20221214143815969\"></p>\n<p>每个帧分为帧头和帧体。先是三个字节的帧长度，这个长度表示的是帧体的长度然后是帧类型，大概可以分为数据帧和控制帧两种。数据帧用来存放HTTP报文，控制帧用来管理流的传输。</p>\n<p>接下来的一个字节是帧标志，黎曼一共8个标志位，常用的有END_HEADERS表示数据结束，END_STRAEAM表示单方向数据发送结束</p>\n<p>后四个字节是Stream ID，也就是流标识符，有了它接收方就能从乱序的二进制帧中选择出ID相同的帧，按顺序组装成请求/响应报文</p>\n<h4 id=\"流的状态变化\"><a href=\"#流的状态变化\" class=\"headerlink\" title=\"流的状态变化\"></a>流的状态变化</h4><p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221214143852729.png\" alt=\"image-20221214143852729\"></p>\n<p>最开始两者都是空闲状态，当客户端发送Headers帧后，开始分配Stream ID，此时客户端的流打开，服务端接受之后服务端的流也打开，两端的流都打开之后，就可以互相传递数据帧和控制帧</p>\n<p>当客户端要关闭时，向服务端发送END_SITREAM帧，进入半关闭状态，不过此时服务端的情况是只能发送数据，而不能接受数据。随后服务端也想客户端发送END_STREAM帧，表示数据发送完毕，双方进入关闭状态</p>\n<p>如果下次需要开启新的流，流ID需要自增，直到上限为止，到达上限后开一个新的TCP连接重头开始计数。由于流ID字段长度为四个字节，最高位又被保留，因此范围是0~2的31次方，大约21亿个</p>\n<h4 id=\"流的特性\"><a href=\"#流的特性\" class=\"headerlink\" title=\"流的特性\"></a>流的特性</h4><ul>\n<li>并发性，一个HTTP/2连接上可以同时发多个帧，这一点和HTTP/1不同</li>\n<li>自增性，流ID是不可重用的，而是会按顺序递增，达到上限后又新开TCP连接从头开始</li>\n<li>双向性，客户端和服务端都可以创建流，互不干扰，双方都可以作为发送发或接收方</li>\n<li>可设置优先级，可以设置数据帧的优先级，让服务器优先处理重要资源，优化用户体验</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"HTTP报文结构\"><a href=\"#HTTP报文结构\" class=\"headerlink\" title=\"HTTP报文结构\"></a>HTTP报文结构</h3><hr>\n<p>HTTP报文结构：起始行+头部+空行+实体</p>","more":"<h4 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h4><p>起始行：方法 + 路径 + http版本，GET /home HTTP/1.1</p>\n<p>头部</p>\n<p>空行：区分头部和实体</p>\n<p>实体：请求体（一般POST方法才有）</p>\n<h4 id=\"相应报文\"><a href=\"#相应报文\" class=\"headerlink\" title=\"相应报文\"></a>相应报文</h4><p>起始行：http版本+状态码+原因，HTTP/1.1 200 ok</p>\n<p>头部</p>\n<p>空行：区分头部和实体</p>\n<p>实体：响应体（服务端返回的数据）</p>\n<h3 id=\"HTTP的请求方法\"><a href=\"#HTTP的请求方法\" class=\"headerlink\" title=\"HTTP的请求方法\"></a>HTTP的请求方法</h3><hr>\n<p><strong>方法</strong></p>\n<p>GET：通常用来回去资源</p>\n<p>HEAD：获取资源的元信息</p>\n<p>POST：上传信息</p>\n<p>PUT：修改数据</p>\n<p>DELETE：删除资源</p>\n<p>CONNECT：建立连接隧道，用于代理服务器</p>\n<p>OPTIONS：列出可对资源实行的请求方法，用来跨域请求</p>\n<p>TRACE：追踪请求-相应的传输路径</p>\n<p><strong>GET和POST的区别</strong></p>\n<ul>\n<li>缓存：GET请求会被浏览器主动缓存下来，留下历史记录，而POST默认不会</li>\n<li>编码：GET只能进行URL编码，只能接受ASCII字符，而POST没有限制</li>\n<li>参数：GET一般放在URL中，不安全，POST放在请求体中，更适合传输敏感信息</li>\n<li>冥等性：GET是冥等的，而POST不是（冥等表示执行相同的操作，结果也是相同的）</li>\n<li>TCP：GET会把请求报文一次性发出去，而POST会分为两个TCP数据包，先发header部分，如果服务器响应再发body部分</li>\n</ul>\n<h3 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h3><h4 id=\"URL结构\"><a href=\"#URL结构\" class=\"headerlink\" title=\"URL结构\"></a>URL结构</h4><p>协议类型+域名类型+端口号+路径+查询参数+锚点</p>\n<p>协议类型：HTTP和HTTPS，HTTPS在HTTP的前提上加上了一个安全保护，在数据给tcp之前对数据先进行加密然后再给到tcp连接传输</p>\n<p>域名和IP：域名是IP的别称，方便人去记忆。浏览器跨域通过DNS去解析域名获得对应的IP</p>\n<p>端口号：一台机器可以提供多种服务，一个服务对应一个端口号port</p>\n<p>路径：具体去哪个页面</p>\n<p>查询参数：同一页面看到不同的内容</p>\n<p>锚点：同一页面同一内容查看某一位置内容</p>\n<p><strong>URL编码</strong></p>\n<p>URL只能使用ASCII，ASCII之外的字符是不支持显示的，而且还有一部分符号是界定符，如果不处理的会导致解析出错。因此URL引入了编码机制，把非ASCII码字符和界定符转为十六进制字节值，然后再签名加个%。如空格转义成%20</p>\n<h3 id=\"HTTP状态码\"><a href=\"#HTTP状态码\" class=\"headerlink\" title=\"HTTP状态码\"></a>HTTP状态码</h3><h4 id=\"1XX\"><a href=\"#1XX\" class=\"headerlink\" title=\"1XX\"></a>1XX</h4><p>表示目前是协议处理的中间状态，还需要后续的操作</p>\n<p>101 Swithing Protocols。再http升级为websocket的时候，如果服务器同意变更，就会发送状态码101</p>\n<h4 id=\"2XX\"><a href=\"#2XX\" class=\"headerlink\" title=\"2XX\"></a>2XX</h4><p>表示成功状态</p>\n<p>200 OK是最常见的成果状态码，通常在响应体中放有数据</p>\n<p>204 NO Content含义与200相同，但响应头后面没有数据</p>\n<p>206 Partial Content顾名思义，表示部分内容，它的使用场景为HTTP分块下载和断点连续传，当然同时也会带上相应的响应头字段Content-Range</p>\n<h4 id=\"3XX\"><a href=\"#3XX\" class=\"headerlink\" title=\"3XX\"></a>3XX</h4><p>表示重定向状态，资源位置发生变动，需要重新请求</p>\n<p>301 Moved Permanently即永久重定向，对应着302 Found，即临时重定向</p>\n<p>304 Not Modified当协商缓存命中时会返回这个状态码</p>\n<h4 id=\"4XX\"><a href=\"#4XX\" class=\"headerlink\" title=\"4XX\"></a>4XX</h4><p>请求报文有误</p>\n<p>400 Bad Request客户端请求的语法错误，服务端无法理解</p>\n<p>401 Unauthorized请求需要用户的身份认证</p>\n<p>403 Forbidden服务器理解客户端的请求，但拒接执行此请求</p>\n<p>404 Not Found资源未找到，表示没有服务器上找到相应的资源</p>\n<p>405 Method Not Allowed请求方法不被服务端允许</p>\n<p>406 Not Acceptable资源无法满足客户端的条件</p>\n<p>408 Request Timeout服务器等待了太长时间</p>\n<p>409 Conflict多个请求发生了冲突</p>\n<p>413 Request Entity Took Large请求体积的数据过大</p>\n<p>414 Request-URL Too Long请求行里的URL太大</p>\n<p>429Too Many Request客户端发送的请求过多</p>\n<p>431 Request HeaderFields Too Large请求头的字段内容太大</p>\n<h4 id=\"5XX\"><a href=\"#5XX\" class=\"headerlink\" title=\"5XX\"></a>5XX</h4><p>服务端发送错误</p>\n<p>500 Internal Server Error服务器出错</p>\n<p>501 Not Gateway服务器自身是正常的，但是访问的时候出错了</p>\n<p>503 Service Unavailable表示服务器当前很忙，暂时无法相应服务</p>\n<h3 id=\"HTTP特点和缺点\"><a href=\"#HTTP特点和缺点\" class=\"headerlink\" title=\"HTTP特点和缺点\"></a>HTTP特点和缺点</h3><h4 id=\"HTTP特点\"><a href=\"#HTTP特点\" class=\"headerlink\" title=\"HTTP特点\"></a>HTTP特点</h4><p>灵活可拓展：一个是语义上自由，只规定了基本格式，还有就是传输形式的多样性</p>\n<p>可靠传输：因为HTTP使用的TCP传输协议，所以继承了TCP的可靠传输</p>\n<p>请求-应答，也就是一发一收、有来有回</p>\n<p>无状态，这里的状态是指的通信过程的上下文信息，而每次http请求都说独立、无关的，默认不需要保留状态信息</p>\n<h4 id=\"HTTP缺点\"><a href=\"#HTTP缺点\" class=\"headerlink\" title=\"HTTP缺点\"></a>HTTP缺点</h4><p>无状态在需要长连接的情况下，需要保存大量的上下文信息，以避免传输重复的信息，这个时候无状态就是缺点；但是如果一些应用仅仅只是为了获取一些数据，不需要保存连接上下文信息，无状态减少了网络开销，此时为优点</p>\n<p>明文传输，协议里的报文不适用二进制数据，直接使用文本形式</p>\n<p>队头阻塞问题，当http开启长连接时，共用同一个TCP连接，同一时刻只能处理一个请求，那么当前请求耗时过长的情况下，其他的请求只能处理阻塞状态</p>\n<h3 id=\"Accept\"><a href=\"#Accept\" class=\"headerlink\" title=\"Accept\"></a>Accept</h3><p>对应Accept系列字段的介绍分为四个部分：数据格式、压缩方式、支持语言和字符集</p>\n<h4 id=\"数据格式\"><a href=\"#数据格式\" class=\"headerlink\" title=\"数据格式\"></a>数据格式</h4><p>对于发送端利用Content-Type字段限制数据类型，接受到利用Accept字段限制接受的数据类型。以下是具体的取值</p>\n<p>text：text/html，text/plain，text/css等</p>\n<p>image：image/gif，image/jpeg，image/png等</p>\n<p>application：application/json, application/javascript, application/pdf, application/octet-stream</p>\n<h4 id=\"压缩方式\"><a href=\"#压缩方式\" class=\"headerlink\" title=\"压缩方式\"></a>压缩方式</h4><p>发送端使用Conten-Encoding表明压缩方式，接受端使用Accept-Encoding限制压缩方式。以下是具体的取值</p>\n<p>gzip：目前比较流行的压缩格式</p>\n<p>deflate：另外一种有名的压缩格式</p>\n<p>br：一种专门为HTTP发明的压缩格式</p>\n<h4 id=\"支持语言\"><a href=\"#支持语言\" class=\"headerlink\" title=\"支持语言\"></a>支持语言</h4><p>发送端使用Content-Language字段表明语言，接收端使用Accept-Language字段表明语言</p>\n<h4 id=\"字符集\"><a href=\"#字符集\" class=\"headerlink\" title=\"字符集\"></a>字符集</h4><p>发送端直接放在Content-Type中以charset指定字符集，接受端使用Accept-Charset指定可以接受的字符集</p>\n<p>// 发送端</p>\n<p>Content-Type: text/html; charset=utf-8</p>\n<p>// 接收端</p>\n<p>Accept-Charset: charset=utf-8</p>\n<h3 id=\"HTTP传输定长和不定长的数据\"><a href=\"#HTTP传输定长和不定长的数据\" class=\"headerlink\" title=\"HTTP传输定长和不定长的数据\"></a>HTTP传输定长和不定长的数据</h3><h4 id=\"定长包体\"><a href=\"#定长包体\" class=\"headerlink\" title=\"定长包体\"></a>定长包体</h4><p>对于定长包体来说，发送端在传输的时候一般会带上Conten-Length字段指明包体的长度</p>\n<h4 id=\"不定长包体\"><a href=\"#不定长包体\" class=\"headerlink\" title=\"不定长包体\"></a>不定长包体</h4><p>对于不定长包体，需要配置Transfer-Encoding：chunked，设置了这个字段后会自动产生两个效果，第一个是会忽略Content-Length，第二个就是基于长连接持续推送动态内容</p>\n<h3 id=\"HTTP处理大文件\"><a href=\"#HTTP处理大文件\" class=\"headerlink\" title=\"HTTP处理大文件\"></a>HTTP处理大文件</h3><p>对于一些大文件来说，想要一下传输完是不现实的，所以HTTP采取了范围请求的解决方案允许客户端仅仅请求一个资源的一部分</p>\n<h4 id=\"如何支持\"><a href=\"#如何支持\" class=\"headerlink\" title=\"如何支持\"></a>如何支持</h4><p>前提是服务器支持范围请求，要支持这个功能，响应头上就需要加上Accept-Ranges:none来告诉客户端这边是支持范围请求</p>\n<h4 id=\"Range字段拆解\"><a href=\"#Range字段拆解\" class=\"headerlink\" title=\"Range字段拆解\"></a>Range字段拆解</h4><p>对于客户端，通过Range字段来指定请求那一部分，格式为bytes=x-y</p>\n<p>0-499表示从开始到第499个字节</p>\n<p>500-表示从第500字节到文件终点</p>\n<p>-100表示文件的最后一个100个字节</p>\n<p>服务器收到请求之后，首先验证范围是否合法，如果越界了那么返回416错误码，否则读取相应片段，返回206状态码</p>\n<h4 id=\"对于单段数据和多端数据，服务器的响应数据是不一样的\"><a href=\"#对于单段数据和多端数据，服务器的响应数据是不一样的\" class=\"headerlink\" title=\"对于单段数据和多端数据，服务器的响应数据是不一样的\"></a>对于单段数据和多端数据，服务器的响应数据是不一样的</h4><p>单段数据 Range：bytes=0-9</p>\n<p>多段数据 Range：bytes=0-9，30-39</p>\n<p><strong>单段数据</strong></p>\n<p>Content-Range字段，0-9表示请求的返回，100表示资源的总大小</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span> <span class=\"number\">206</span> <span class=\"title class_\">Partial</span> <span class=\"title class_\">Content</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Length</span>: <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"title class_\">Accept</span>-<span class=\"title class_\">Ranges</span>: bytes</span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Range</span>: bytes <span class=\"number\">0</span>-<span class=\"number\">9</span>/<span class=\"number\">10</span></span><br><span class=\"line\">i am xxxxx</span><br></pre></td></tr></table></figure>\n\n<p><strong>多段数据</strong></p>\n<p>Content0Type：multiparty/byteranges；boundary=00000010101表示请求一定是多段数据请求，响应体中的分隔符是00000010101</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span> <span class=\"number\">206</span> <span class=\"title class_\">Partial</span> <span class=\"title class_\">Content</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Type</span>: multipart/byteranges; boundary=<span class=\"number\">00000010101</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Length</span>: <span class=\"number\">189</span></span><br><span class=\"line\"><span class=\"title class_\">Connection</span>: keep-alive</span><br><span class=\"line\"><span class=\"title class_\">Accept</span>-<span class=\"title class_\">Ranges</span>: bytes</span><br><span class=\"line\">--<span class=\"number\">00000010101</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Type</span>: text/plain</span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Range</span>: bytes <span class=\"number\">0</span>-<span class=\"number\">9</span>/<span class=\"number\">96</span></span><br><span class=\"line\">i am xxxxx</span><br><span class=\"line\">--<span class=\"number\">00000010101</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Type</span>: text/plain</span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Range</span>: bytes <span class=\"number\">20</span>-<span class=\"number\">29</span>/<span class=\"number\">96</span></span><br><span class=\"line\">eex jspy </span><br><span class=\"line\">e--<span class=\"number\">00000010101</span>--</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HTTP处理表单数据\"><a href=\"#HTTP处理表单数据\" class=\"headerlink\" title=\"HTTP处理表单数据\"></a>HTTP处理表单数据</h3><p>在HTTP中，有两种主要的表单提交的方式，体现在两种不同的Content-Type取值，application/x-www-form-urlencoded和multiparty/form-data</p>\n<h4 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a>application/x-www-form-urlencoded</h4><p>对于application/x-www-form-urlencoded格式的表单内容，有以下特点：数据会被编码成以&amp;分隔的键值对，字符以URL编码方法编码</p>\n<h4 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a>multipart/form-data</h4><p>请求头中的Content-Type字段会包含boundary。且boundary的值有浏览器默认指定。例：Content-Type：multipart=- - - WebkitFormBoundaryRRJKeWfHPGrS4LKe</p>\n<p>数据会分为多个部分，每两个部分之间通过分隔符来分隔，每部分表示均有HTTP头部描述子包体</p>\n<h3 id=\"HTTP处理队头阻塞\"><a href=\"#HTTP处理队头阻塞\" class=\"headerlink\" title=\"HTTP处理队头阻塞\"></a>HTTP处理队头阻塞</h3><p>HTTP传输是基于请求-应答的模式进行的，报文必须是一发一收，但值得注意的是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理</p>\n<h4 id=\"并发连接\"><a href=\"#并发连接\" class=\"headerlink\" title=\"并发连接\"></a>并发连接</h4><p>对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其他所有任务。在RFC2616规定过客户端最多并发2个连接，不过事实上在现在的浏览器标准中，这个上限要多很多，Chrome是6个</p>\n<h4 id=\"域名分片\"><a href=\"#域名分片\" class=\"headerlink\" title=\"域名分片\"></a>域名分片</h4><p>一个域名表示可以并发6个长连接，那就多分一些二级域名，在一个baidu.com域名下可以分出很多二级域名，如content.baidu.com,text.baidu.com等二级域名。这样一台服务器能并发的连接数就更多了</p>\n<h3 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h3><h4 id=\"生存周期\"><a href=\"#生存周期\" class=\"headerlink\" title=\"生存周期\"></a>生存周期</h4><p>Cookie的有效期可以通过Expires和Max-Age两个属性，也就是HTTP的强缓存。Expires表示资源过期时间，Max-Age用的是一段时间间隔，单位是秒，从浏览器收到报文开始计算</p>\n<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><p>关于作用域有两个属性Domain和path，给Cookie绑定了域名和路径，在发送请求之前，发现域名或则路径不匹配的话，就不会带上该Cookie。对于路径来说，/表示域名下的任何路径都允许使用Cookie</p>\n<h4 id=\"安全相关\"><a href=\"#安全相关\" class=\"headerlink\" title=\"安全相关\"></a>安全相关</h4><p>如果带上Secure，说明只能通过HTTPS传输cookie</p>\n<p>如果带上HttpOnly，那么说明只能通过HTTP协议传输，不能通过JS访问，这也是预防XSS攻击的重要的手段</p>\n<p>如果带上SameSite属性则可以预防CSRF攻击，SameSite有三个值可以选择：</p>\n<ul>\n<li>在Strict模式下，浏览器完全禁止第三方请求携带Cookie</li>\n<li>在Lax模式，只能在get方法提交表单或则a标签发送get请求的情况下可以携带Cookie</li>\n<li>在None模式下，也就是默认模式，请求都会自动带上Cookie</li>\n</ul>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><p>容量缺陷：Cookie的体积上限只有4KB。</p>\n<p>性能缺陷：Cookie紧跟域名，不管域名下面的某一个地址需不需要这个Cookie，请求都会带上完整的Cookie，这样随着请求数的增多，会造成巨大的性能浪费。但可以通过Domain和Path指定作用域来解决</p>\n<p>安全缺陷：由于Cookie以纯文本的形式在浏览器和服务端中传递，这样很容易被非法用户截获，然后进行一系列的篡改。重新发送给服务器。在Http为fasle的情况下，Cookie信息能直接通过JS脚本来读取</p>\n<h3 id=\"HTTP代理\"><a href=\"#HTTP代理\" class=\"headerlink\" title=\"HTTP代理\"></a>HTTP代理</h3><p>代理服务器是介于客户端和服务端的一个中间角色，对于客户端来说，表现为服务器进行响应，对于服务器来说，表现为客户端发起请求。具有双重身份</p>\n<h4 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h4><p>负载均衡：客户端发送的请求会先到达代理服务器，后面有多少源服务器，IP地址客户端都是不知道的</p>\n<p>保障安全：利用心跳机制监控后台的服务器，一旦发现故障机就将其踏出集群。并且对上下行的数据进行过滤，对非法IP限流</p>\n<p>缓存代理：将内容缓存到代理服务器，使得客户端可以直接从代理服务器获得缓存</p>\n<h4 id=\"相关头部字段\"><a href=\"#相关头部字段\" class=\"headerlink\" title=\"相关头部字段\"></a>相关头部字段</h4><p>Via，代理服务器需要表明自己的身份，可以通过Via字段来记录。Via中代理的顺序就是HTTP传输中报文传达的顺序</p>\n<p>X-Forwarded-For，记录请求方的IP地址</p>\n<p>X-Real-IP，获取真实用户的IP地址，X-Forwarded-Host记录客户端的域名，X-Forwarded-Proto记录客户端的协议名</p>\n<h3 id=\"HTTP缓存\"><a href=\"#HTTP缓存\" class=\"headerlink\" title=\"HTTP缓存\"></a>HTTP缓存</h3><h4 id=\"缓存的好处\"><a href=\"#缓存的好处\" class=\"headerlink\" title=\"缓存的好处\"></a>缓存的好处</h4><p>减少网络带宽的消耗，对网站运营者来说，可以减少网络流量，降低运营成本</p>\n<p>降低服务器压力，对于服务器来说，重复使用浏览器本地的缓存数据，可以减少对服务器的请求，降低对服务器的压力</p>\n<p>减少网络延迟，加快网络渲染，对客户端来说，使用浏览器本地的缓存比请求服务器的数据更快，提高页面的渲染效率</p>\n<h4 id=\"强缓存（不需要发送http请求。注意：当Expires和Cache-Control同时存在时，Cache-Control会被优先考虑）\"><a href=\"#强缓存（不需要发送http请求。注意：当Expires和Cache-Control同时存在时，Cache-Control会被优先考虑）\" class=\"headerlink\" title=\"强缓存（不需要发送http请求。注意：当Expires和Cache-Control同时存在时，Cache-Control会被优先考虑）\"></a>强缓存（不需要发送http请求。注意：当Expires和Cache-Control同时存在时，Cache-Control会被优先考虑）</h4><p><strong>HTTP/1.0版本中使用的Cache-Control</strong></p>\n<p>Expires代表缓存过期时间，存在于服务端返回的响应头中，用来告诉浏览器在这个时间之前都可以直接从缓存中获取数据。如 Expires: Wed, 22 Nov 2019 08:41:00 GMT</p>\n<p><strong>HTTP/1.1版本中使用的Cache-Contral</strong></p>\n<p>Cache-Control采用的是过期时长来控制缓存，对应的字段是max-age。如 Cache-Control：max-age=3600（代表该资源在3600秒内可以直接使用缓存）</p>\n<p>Cache-Control还有一些其他的属性，如下：</p>\n<p>Public：客户端和代理端都可以对数据进行缓存</p>\n<p>private：只能客户端缓存，中间的代理服务器不能缓存</p>\n<p>no-cache：不能进行任何形式的缓存</p>\n<p>s-naxage：代理服务器的缓存过期时间</p>\n<h4 id=\"协商缓存（强缓存失效后，浏览器在请求头上携带相应的缓存tag香服务器发送请求，由服务器根据tag决定是否使用缓存）\"><a href=\"#协商缓存（强缓存失效后，浏览器在请求头上携带相应的缓存tag香服务器发送请求，由服务器根据tag决定是否使用缓存）\" class=\"headerlink\" title=\"协商缓存（强缓存失效后，浏览器在请求头上携带相应的缓存tag香服务器发送请求，由服务器根据tag决定是否使用缓存）\"></a>协商缓存（强缓存失效后，浏览器在请求头上携带相应的缓存tag香服务器发送请求，由服务器根据tag决定是否使用缓存）</h4><p><strong>Last-Modified</strong></p>\n<p>Last-Modified表示最后修改时间。在浏览器第一次给服务器发送请求后，服务器会在响应头中加上这个字段，浏览器接收到后，再第二次请求中会携带If-Modified-Since字段，</p>\n<p>这个字段的值是服务器传来的最后修改时间。服务器拿到请求头中的If-Modified-Since字段后，会和服务器中该资源的最后时间修改时间对比，如果请求头中的值小于最后修改时间，</p>\n<p>返回新资源。反之则返回304，告诉浏览器直接用缓存</p>\n<p><strong>Etag</strong></p>\n<p>ETag是服务器根据当前文件的内容，给文件生成的唯一标识，只要内容有改动，这个值就会变化。服务器通过响应头把这个值给浏览器。浏览器收到这个值会在</p>\n<p>下次请求的时候把这个值作为If-None-Match这个字段的内容，放入请求头中给服务器，服务器收到后与Etag对比，不一致返回新资源，一致则返回403，告诉浏览器直接使用缓存</p>\n<p><strong>对比</strong></p>\n<p>在精度上，ETag由于Last-Modified</p>\n<p>在性能上，Last-Modified由于ETag，运维ETag在对每个文件生成唯一标识会损耗性能</p>\n<h4 id=\"缓存位置\"><a href=\"#缓存位置\" class=\"headerlink\" title=\"缓存位置\"></a>缓存位置</h4><p>浏览器其中的缓存位置按照优先级从高到低排列分别是：Service Worker；Memory Cache；Disk Cache；Push Cache。（比较大的文件会直接丢进磁盘中，反之进入内存 ，当内存使用率很高的时候，也会优先储存在磁盘中）</p>\n<p>Service Worker借鉴了Web Worker的思路，既让JS运行在主线程之外，由于它脱离了浏览器的窗体，因此无法访问DOM。它可以实现离线缓存，消息推送和网络代理等功能</p>\n<p>Memory Cache指的是内存缓存，从效率上讲它是最快的。但是存活时间也是最短的，当渲染进程结束后，内存缓存也就在不存在了</p>\n<p>Disk Cache是储存在磁盘中的缓存，存取效率比内存缓存低，但是存储容量和存储时长都很不错</p>\n<p>Push Cache是推送缓存，这是浏览器缓存的最后一道防线，是HTTP/2中的内容</p>\n<h4 id=\"刷新对于强缓存和协商缓存的影响\"><a href=\"#刷新对于强缓存和协商缓存的影响\" class=\"headerlink\" title=\"刷新对于强缓存和协商缓存的影响\"></a>刷新对于强缓存和协商缓存的影响</h4><p>当ctrl+f5强制刷新网页时，直接重服务器加载，跳过强缓存和协商缓存</p>\n<p>当f5刷新网页时，跳过强缓存，但是会检查协商缓存</p>\n<p>浏览器地址栏中写入URL，回车 浏览器先去找缓存</p>\n<h3 id=\"缓存代理\"><a href=\"#缓存代理\" class=\"headerlink\" title=\"缓存代理\"></a>缓存代理</h3><p>对于源服务器来说也是有缓存的，但是对于HTTP缓存来说，如果每次客户端缓存失效都要到源服务器获取，那样服务器的压力会也别大，所以让代理服务器接管一部分服务端的HTTP缓存，客户端缓存过期就去最近的代理服务器获取，代理服务端过期了的话就去最近原服务器获取</p>\n<h4 id=\"源服务器的缓存控制\"><a href=\"#源服务器的缓存控制\" class=\"headerlink\" title=\"源服务器的缓存控制\"></a>源服务器的缓存控制</h4><p>private和public，在源服务器的响应头中，会加上Cache-Control这个字段进行缓存控制字段，那么它的值当中可以加入private或则public表示是否允许代理服务器缓存</p>\n<p>proxy-revalidate，must-revalidate的意思s 客户端缓存过期就去源服务器获取，而proxy-revalidate则表示代理服务器的缓存过期后到源服务器获取</p>\n<p>s-maxage，s是share的意思，限定了缓存代理服务器中可以放多久，和限制客户端缓存时间max-age并不冲突</p>\n<h4 id=\"客户端的缓存控制\"><a href=\"#客户端的缓存控制\" class=\"headerlink\" title=\"客户端的缓存控制\"></a>客户端的缓存控制</h4><p>max-stale和min-fresh，在客户端的请求头上，可以加入这两个字段，对代理服务器上的缓存进行宽容和限制操作，max-stale：5表示过期时间在5秒之内可以从代理中获取，min-fresh：5表示等缓存时间过期之前5秒拿代理中的缓存</p>\n<p>only-if-cached，这个字段加上后表示客户端只会接受代理缓存，而不会接受源服务器的响应，如果代理缓存无效，则返回504</p>\n<h3 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h3><h4 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h4><p>浏览器遵循同源政策（协议、IP地址和端口都相同则为永源），非同源站点有以下限制：</p>\n<ul>\n<li><p>不能读取和修改对方的DOM</p>\n</li>\n<li><p>不读访问对方的Cookie、IndexDB和LocalStorage</p>\n</li>\n<li><p>限制XMLHttpRequest请求</p>\n</li>\n</ul>\n<p>当浏览器香目标URL发Ajax请求时，只要当前URL和目标URL不同源，则产生跨域，被称为跨域请求，跨域请求的响应一般会被浏览器拦截。在服务端处理完数据后，将响应返回，主进程检查到跨域，且没有cors响应头，将响应体全部丢掉，并不会发送给渲染进程</p>\n<h4 id=\"CORS\"><a href=\"#CORS\" class=\"headerlink\" title=\"CORS\"></a>CORS</h4><p>CORS是W3C的一个标准，全称是跨域资源共享。它需要浏览器和服务器的共同支持，具体来说，非IE和IE1.0以上支持CORS，服务器需要附加特定的响应头</p>\n<p>浏览器根据请求方法和请求头的特定字段，将请求做了一下分类，具体来说规则是这样，凡是满足下面条件的属于简单请求：</p>\n<ul>\n<li>请求方法为GET、POST或则HEAD</li>\n<li>请求去头的取值范围：Accept、Accept-Language、Content-Language、Content-Type（只限于三个值application/x-form-urlencoded、multipart/form-data、text/plain）</li>\n</ul>\n<p><strong>简单请求</strong></p>\n<p>请求发出去之前，浏览器会在请求头中添加一个Origin字段，用来说明请求来自哪个源。服务器拿到请求之后，在回应时添加Access-Content-Allow-Origin字段，如果Origin不在这个字段的范围中，那么浏览器就会将相应拦截，因此Access-Content-Allow-Origin字段是服务器用来决定浏览器是否拦截这个响应，是必须的一个字段</p>\n<p>Access-Control-Allow-Credentials字段是一个布尔值，表示允许发送Cookie，对于跨域请求，浏览器对这个字段默认值为false，而如果需要拿到浏览器的Cookie，需要添加这个响应头并设为true，并且在前端也需要设置withCredentials属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhr.<span class=\"property\">withCredentials</span> = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Access-Control-Expose-Headers字段是给XMLHttpRequest对象赋能让它不仅可以拿到基本的6个响应头字段（Cache-Control、Content-Language、Content-Type、Expires、Last-Modified和Pragma）, 还能拿到这个字段声明的响应头字段</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Expose</span>-<span class=\"title class_\">Headers</span>: aaa</span><br><span class=\"line\"><span class=\"title class_\">XMLHttpRequest</span>.<span class=\"title function_\">getResponseHeader</span>(<span class=\"string\">&#x27;aaa&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p><strong>非简单请求</strong></p>\n<p>非简单请求相对而言会有些不同，主要有以下两个方面：预检请求和响应字段</p>\n<p>以PUT方法为例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">&#x27;http://xxx.com&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\">xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;PUT&#x27;</span>, url, <span class=\"literal\">true</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">setRequestHeader</span>(<span class=\"string\">&#x27;X-Custom-Header&#x27;</span>, <span class=\"string\">&#x27;xxx&#x27;</span>);</span><br><span class=\"line\">xhr.<span class=\"title function_\">send</span>();</span><br></pre></td></tr></table></figure>\n\n<p>当这段代码执行后，会发送预检请求，预检请求的请求行和请求体是下面的格式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">OPTIONS</span> / <span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span></span><br><span class=\"line\"><span class=\"title class_\">Origin</span>: 当前地址</span><br><span class=\"line\"><span class=\"title class_\">Host</span>: xxx.<span class=\"property\">com</span></span><br><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Request</span>-<span class=\"title class_\">Method</span>: <span class=\"variable constant_\">PUT</span></span><br><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Request</span>-<span class=\"title class_\">Headers</span>: X-<span class=\"title class_\">Custom</span>-<span class=\"title class_\">Header</span></span><br></pre></td></tr></table></figure>\n\n<p>预检请求的方法是OPTIONS，同时会加上Origin源地址和Host目标地址。同时加上以下两个字段</p>\n<p>Access-Control-Request-Method，列出CORS请求用到哪个HTTP方法</p>\n<p>Accesss-Control-Request-Headers,指定CORS请求将要加上什么请求头</p>\n<p>同时响应字段也会分为两部分，一部分是对于预检请求的响应，一部分是对于CORS请求的响应</p>\n<p>预检请求的响应</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">HTTP</span>/<span class=\"number\">1.1</span> <span class=\"number\">200</span> <span class=\"variable constant_\">OK</span></span><br><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Origin</span>: *</span><br><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Methods</span>: <span class=\"variable constant_\">GET</span>, <span class=\"variable constant_\">POST</span>, <span class=\"variable constant_\">PUT</span></span><br><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Headers</span>: X-<span class=\"title class_\">Custom</span>-<span class=\"title class_\">Header</span></span><br><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Credentials</span>: <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Max</span>-<span class=\"title class_\">Age</span>: <span class=\"number\">1728000</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Type</span>: text/html; charset=utf-<span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Encoding</span>: gzip</span><br><span class=\"line\"><span class=\"title class_\">Content</span>-<span class=\"title class_\">Length</span>: <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>在预检响应字段中有几个关键的字段</p>\n<p>Access-Control-Allow-Origin：表示跨域允许请求的源，可以填具体的源名，也可以填*表示任意源</p>\n<p>Access-Control-Allow-Methods：表示允许的请求方法列表</p>\n<p>Access-Control-Allow-Headers：简单请求中已经介绍</p>\n<p>Access-Control-Allow-Credentials：表示允许发送的请求字段</p>\n<p>Access-Control-Max-Age：表示预检请求的有效期，在此期间，不用发出另一条预检请求</p>\n<p>在预检请求的响应返回后，如果请求不满足响应头的条件，则触发XMLHttpRequest的onerror方法，当然后面真正的CORS请求也不会发出来了</p>\n<h4 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h4><p>虽然XMLHttpRequest对象遵循同源政策，但是script标签不一样，它可以通过src填上目标地址从而发出GET请求，实现跨域请求并拿到响应。</p>\n<p>和CORS相比，JSONP最大的优势在于兼容性好，IE低版本不能使用CORS但可以使用JSONP，缺点也很明显，请求方法单一，只支持GET请求。</p>\n<p>以下是封装的一个JSONP</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">jsonp</span> = (<span class=\"params\">&#123; url, params, callbackName &#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">generateURL</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> dataStr = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> params) &#123;</span><br><span class=\"line\">      dataStr += <span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>=<span class=\"subst\">$&#123;params[key]&#125;</span>&amp;`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> dataStr += <span class=\"string\">`callback=<span class=\"subst\">$&#123;callbackName&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;url&#125;</span>?<span class=\"subst\">$&#123;dataStr&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化回调函数名称</span></span><br><span class=\"line\">    callbackName = callbackName || <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>().<span class=\"property\">toString</span>.<span class=\"title function_\">replace</span>(<span class=\"string\">&#x27;,&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\">// 创建 script 元素并加入到当前文档中</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> scriptEle = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">scriptEle.<span class=\"property\">src</span> = <span class=\"title function_\">generateURL</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(scriptEle);</span><br><span class=\"line\">  <span class=\"comment\">// 绑定到 window 上，为了后面调用</span></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>[callbackName] = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"title function_\">resolve</span>(data);</span><br><span class=\"line\">      <span class=\"comment\">// script 执行完了，成为无用元素，需要清除</span></span><br><span class=\"line\">      <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(scriptEle);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h4><p>Nginx是一个高性能的反向代理服务器，可以用来轻松解决跨域问题</p>\n<p>正向代理帮助客户端访问客户端自己访问不到的服务器，然后将结果返回客户端</p>\n<p>反向代理拿到客户端的请求，将请求转发给其他的服务器，主要场景是维持服务器集群的负载均衡，换句话说，反向代理帮其他的服务器拿到请求，然后选择一个合适的服务器，将请求转交给它</p>\n<p>因此，正向代理服务器是帮客户端做事情，反向代理服务器是帮其他的服务器做事情</p>\n<p>Nginx相当于一个跳板机，这个跳板机的域名也是client.com，让客户端访问client.com/api，这当然没有跨域，然后Nginx服务器作为反向代理，将请求转发给server.com，当响应应返回时又将响应给到客户端</p>\n<h3 id=\"TLs1-2握手过程\"><a href=\"#TLs1-2握手过程\" class=\"headerlink\" title=\"TLs1.2握手过程\"></a>TLs1.2握手过程</h3><p>前面我们已经知道HTTPS = HTTP + SSL/TLS来保证数据的安全</p>\n<p>SSL是安全套接层，在OSI七层模型中处于会话层。之前SSL出过三个大版本，当它发展到第三个大版本的时候才被标准化，成为TLS（传输层安全），并被当做TLS1.0。也就是说TLS1.0 = SSL3.0</p>\n<p>现在主流的版本是TLS/1.2，之前的TLS1.0、TLS1.0和TLS1.1都被认为是不安全的，在不久的将来会被完全淘汰。因此我们接下来主要讨论的是TLS1.2，当然在2018年推出了更加优秀的TLS1.3，大大优化了TLS握手过程</p>\n<h4 id=\"TLs1-2握手过程-1\"><a href=\"#TLs1-2握手过程-1\" class=\"headerlink\" title=\"TLs1.2握手过程\"></a>TLs1.2握手过程</h4><p><strong>Client Hello</strong></p>\n<p>首先，浏览器发送client_random、TLS版本、加密套件列表</p>\n<p>client_random是用来最终确定secret的一个参数</p>\n<p>在TLS握手过程中，使用ECDHE算法生成pre_random,128位的AES算法进行对称加密，在对称加密的过程中使用主流的GCM分组模式，因为对称加密中很重要的一个问题就是如何分组。最后一个是哈希摘要算法，采用SHA256算法</p>\n<p>哈希摘要算法解释实例</p>\n<p>服务端给客户端发信息，客户端并不知道此时的信息是服务端发的还是中间伪造的信息，这个时候就要引入哈希摘要算法，将服务端的证书信息通过这个算法生成一个摘要，用来标识这个服务端的身份，用私钥加密后把加密后的标识和自己的公钥传给客户端。客户端拿到这个公钥来解密，生成零一分摘要。两个摘要进行对比，如果相同则能确认服务端的身份</p>\n<p><strong>Server Hello</strong></p>\n<p>服务器给客户端回复非常多的内容</p>\n<p>server_random也是最后生成secret的一个参数，同时确认TLS版本、需要使用的加密套件和自己的证书</p>\n<p><strong>Client验证证书，生成secret</strong></p>\n<p>客户端验证服务端传来的证书和签名是否通过，如果验证通过，则传递client_params这个参数给服务器</p>\n<p>客户端通过EECDHE算法计算出pre_random,其中传入两个参数：server_params和slient_params</p>\n<p>客户端现在拥有了client_random、server_random和pre_random，接下来这三个数通过一个伪随机数函数来计算最终的secret</p>\n<p><strong>Server生成secret</strong></p>\n<p>接收到客户端传的client_params，服务端使用ECDHE算法生成pre_random，接着用和客户端的伪随机数函数生成最后的secret</p>\n<h4 id=\"RAS和ECDHE握手过程的区别\"><a href=\"#RAS和ECDHE握手过程的区别\" class=\"headerlink\" title=\"RAS和ECDHE握手过程的区别\"></a>RAS和ECDHE握手过程的区别</h4><p>ECDHE握手，也就是主流的TLS1.2握手中，使用ECDHE实现pre_random的加密解密，没有用到RSA</p>\n<p>使用ECDHE还有一个特点，就是客户端发完首位信息后跨域提前抢跑，直接发送HTTP报文，节省了一个RTT，不必等到收尾信息到达服务器，然后等服务器返回收尾消息给自己，直接开始发请求</p>\n<h3 id=\"TLS1-3改进\"><a href=\"#TLS1-3改进\" class=\"headerlink\" title=\"TLS1.3改进\"></a>TLS1.3改进</h3><p>TLS1.3对TLS1.2做了一系列的改进，主要分为着几个部分：强化安全、提高性能</p>\n<h4 id=\"强化安全\"><a href=\"#强化安全\" class=\"headerlink\" title=\"强化安全\"></a>强化安全</h4><p>在TLS1.3中废除了非常多的加密算法，最后只保留五个加密套件。同时叶删除了非对称加密算法</p>\n<ul>\n<li>TLS_AES_128_GCM_SHA256</li>\n<li>TLS_AES_256_GCM_SHA384</li>\n<li>TLS_CHACHA20_POLY1305_SHA256</li>\n<li>TLS_AES_128_GCM_SHA256</li>\n<li>TLS_AES_128_GCM_8_SHA256</li>\n</ul>\n<h4 id=\"提高性能\"><a href=\"#提高性能\" class=\"headerlink\" title=\"提高性能\"></a>提高性能</h4><p><strong>握手改进</strong></p>\n<p>大体的方式和TLS1.2差不多，不过和TLS1.2相比少了一个RTT，服务器不必等待对方验证证书之后才拿到client_params，而是直接在第一次握手的时候就能够拿到，拿到之后立即计算secret，节省了之前不必要的等待时间。同时，这也以为这在第一次握手的时候客户端需要传送更多的信息，一口气传完</p>\n<p><strong>会话复用</strong></p>\n<p>会话复用有两种方式：Sessio ID和Session Ticket</p>\n<p>Session ID是在客户端和服务端首次连接后各自保存会话的ID，并存储会话密钥，当再次连接时，客户端发送ID过来，服务器查找这个ID是否存在，如果找到了就直接复用之前的会话状态，会话密钥不用重新生成，直接用来的那份。当客户端特别的多的时候，服务器的压力会特别大。</p>\n<p>Session Ticket 当服务端的压力大的时候，就把压力分摊给客户端。双方连接成功后，服务器加密会话信息，用Session Ticket消息发给客户端，让客户端保存下来。下次重连的时候，就把这个Ticket进行解密，验证没过期那就直接恢复之前的会话状态。这种方式减少了服务端的压力，但是带来了安全问题，即每次用一个固定的密钥来解密Ticket数据，一旦黑客拿到了这个密钥，之前的所有的历史记录也被破解了。因此密钥需要定期进行更换</p>\n<p><strong>PSK</strong></p>\n<p>前面说的都是1-RTT情况下的优化，PSK就是使用0-RTT在Session Ticket的同时带上应用数据，不用等到服务端确认。这样会方服务器被攻击的风险很大</p>\n<h3 id=\"HTTP-2改进\"><a href=\"#HTTP-2改进\" class=\"headerlink\" title=\"HTTP/2改进\"></a>HTTP/2改进</h3><p>由于HTTPS在安全方面已经做的非常好了，HTTP改进的关注点放在了性能方面。头部压缩和多路复用，还有颠覆性的功能实现设置请求优先级和服务器推送</p>\n<h4 id=\"头部压缩\"><a href=\"#头部压缩\" class=\"headerlink\" title=\"头部压缩\"></a>头部压缩</h4><p>HPACK算法是专门为HTTP/2服务的，它有以下两个优点：</p>\n<ul>\n<li>在服务器和客户端之间建立哈希表，将用到的字段存放在这张表中，那么在传输的时候对于之前出现过的值，只需要把索引传给对方即可，对方拿到索引查表就好了</li>\n<li>对于整数和字符串进行哈夫曼编码，哈夫曼编码的原理就是先将所有出现的字符建立一张索引表，然后让出现次数多的字符对应的索引尽可能短，传输的时候也是传输这样的索引序列，可以达到非常高的压缩率</li>\n</ul>\n<h4 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h4><p>TCP的对头阻塞是在数据包层面，单位是数据包，前一个报文密钥收到便不会将后面收到的报文上传给HTTP，而HTTP队头阻塞是在HTTP的队头阻塞在HTTP请求-响应层面，前一个请求密钥请求完，后面的请求就要阻塞住</p>\n<p>HTTP/2认为明文传给机器而言太麻烦了，不方便计算机的解析，因为对于文本而言会有多义性的字符，比如回车换行到底是内容还是分隔符，在内部需要用到状态机去识别。于是HTTP/2干脆把报文全部换成二进制格式，全部01传输，方便了机器的解析</p>\n<p>通信双方都可以给对方发送二进制帧，这种二进制帧的双向传输的序列也叫做流。HTTP/2用流来在一个TCP连接上进行多个数据帧的通信，这就是多路复用的概念</p>\n<h4 id=\"服务器推送\"><a href=\"#服务器推送\" class=\"headerlink\" title=\"服务器推送\"></a>服务器推送</h4><p>在HTTP/2中，服务器已经不再完全的被动的接受请求，响应请求，它也能新建stream来给客户端发送消息，当TCP连接建立之后，比如浏览器请求一个HTML文件，服务器就可以在返回HTML的基础上，将HTML中引用到的其他资源文件一起返回给客户端，减少客户端的等待</p>\n<h3 id=\"HTTP-2中的二进制\"><a href=\"#HTTP-2中的二进制\" class=\"headerlink\" title=\"HTTP/2中的二进制\"></a>HTTP/2中的二进制</h3><p>HTTP/2中传输的帧结构如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221214143815969.png\" alt=\"image-20221214143815969\"></p>\n<p>每个帧分为帧头和帧体。先是三个字节的帧长度，这个长度表示的是帧体的长度然后是帧类型，大概可以分为数据帧和控制帧两种。数据帧用来存放HTTP报文，控制帧用来管理流的传输。</p>\n<p>接下来的一个字节是帧标志，黎曼一共8个标志位，常用的有END_HEADERS表示数据结束，END_STRAEAM表示单方向数据发送结束</p>\n<p>后四个字节是Stream ID，也就是流标识符，有了它接收方就能从乱序的二进制帧中选择出ID相同的帧，按顺序组装成请求/响应报文</p>\n<h4 id=\"流的状态变化\"><a href=\"#流的状态变化\" class=\"headerlink\" title=\"流的状态变化\"></a>流的状态变化</h4><p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221214143852729.png\" alt=\"image-20221214143852729\"></p>\n<p>最开始两者都是空闲状态，当客户端发送Headers帧后，开始分配Stream ID，此时客户端的流打开，服务端接受之后服务端的流也打开，两端的流都打开之后，就可以互相传递数据帧和控制帧</p>\n<p>当客户端要关闭时，向服务端发送END_SITREAM帧，进入半关闭状态，不过此时服务端的情况是只能发送数据，而不能接受数据。随后服务端也想客户端发送END_STREAM帧，表示数据发送完毕，双方进入关闭状态</p>\n<p>如果下次需要开启新的流，流ID需要自增，直到上限为止，到达上限后开一个新的TCP连接重头开始计数。由于流ID字段长度为四个字节，最高位又被保留，因此范围是0~2的31次方，大约21亿个</p>\n<h4 id=\"流的特性\"><a href=\"#流的特性\" class=\"headerlink\" title=\"流的特性\"></a>流的特性</h4><ul>\n<li>并发性，一个HTTP/2连接上可以同时发多个帧，这一点和HTTP/1不同</li>\n<li>自增性，流ID是不可重用的，而是会按顺序递增，达到上限后又新开TCP连接从头开始</li>\n<li>双向性，客户端和服务端都可以创建流，互不干扰，双方都可以作为发送发或接收方</li>\n<li>可设置优先级，可以设置数据帧的优先级，让服务器优先处理重要资源，优化用户体验</li>\n</ul>"},{"title":"Typora+picGo+Github实现图片自动上云","date":"2022-12-01T02:36:15.000Z","top":101,"typora-copy-images-to":"upload","_content":"\n### GitHub\n\n首先在`GitHub`上创建一个仓库用来存放图片，需要注意仓库必须是公开的，不然别人无法访问到你的图片\n<!--more-->\n#### 在`GitHub`上生成一个`token`用来给`picGO`上传图片\n\n点击在左上角的头像上悬浮鼠标找到下拉框中的`settings`菜单\n\n![image-20221213142347612](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213142347612.png)\n\n进去之后往下滑找到`Developer setting`菜单并点击![image-20221213142704198](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213142704198.png)\n\n找到`Personal access tokens`下的`Tokens（classic）`菜单，然后点击`Cenerate new token`按钮\n\n![image-20221213143024388](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143024388.png)\n\n随便写一个名字然后选中rope，滑倒最下方点击绿色的`Genderate toekn`按钮\n\n![image-20221213143231493](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143231493.png)\n\n把token复制并保存，以为下次进来就看不到token的值了\n\n![image-20221213143346949](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143346949.png)\n\n### PicGo客户都安（[PicGo下载地址](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FMolunerfinn%2Fpicgo%2Freleases)）\n\n安装好了之后设置一下将GitHub设置为默认图床\n\n![image-20221213143852918](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143852918.png)\n\n- 仓库名为：`GitHub用户名/仓库名`\n- 分支名默认为主分支`master`\n- token使用刚刚在GitHub上复制的token值\n- 存储路径就是你的文件在GitHub上方照片的文件路径，可不填\n\n### Typora设置\n\n点击文件找到下拉菜单中的偏好设置\n\n![image-20221213144346349](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213144346349.png)\n\n勾上途中画圈的两个选项，然后点击验证图片上传选项那个按钮验证能否成功上传，Typora会上传一个图片，当返回成功的消息就好了。\n\n![image-20221213145041883](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213145041883.png)\n\n","source":"_posts/image.md","raw":"---\ntitle: Typora+picGo+Github实现图片自动上云\ndate: 2022-12-1 10:36:15\ntags: 学习\ncategories: 前端\ntop: 101\ntypora-copy-images-to: upload\n---\n\n### GitHub\n\n首先在`GitHub`上创建一个仓库用来存放图片，需要注意仓库必须是公开的，不然别人无法访问到你的图片\n<!--more-->\n#### 在`GitHub`上生成一个`token`用来给`picGO`上传图片\n\n点击在左上角的头像上悬浮鼠标找到下拉框中的`settings`菜单\n\n![image-20221213142347612](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213142347612.png)\n\n进去之后往下滑找到`Developer setting`菜单并点击![image-20221213142704198](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213142704198.png)\n\n找到`Personal access tokens`下的`Tokens（classic）`菜单，然后点击`Cenerate new token`按钮\n\n![image-20221213143024388](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143024388.png)\n\n随便写一个名字然后选中rope，滑倒最下方点击绿色的`Genderate toekn`按钮\n\n![image-20221213143231493](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143231493.png)\n\n把token复制并保存，以为下次进来就看不到token的值了\n\n![image-20221213143346949](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143346949.png)\n\n### PicGo客户都安（[PicGo下载地址](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FMolunerfinn%2Fpicgo%2Freleases)）\n\n安装好了之后设置一下将GitHub设置为默认图床\n\n![image-20221213143852918](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143852918.png)\n\n- 仓库名为：`GitHub用户名/仓库名`\n- 分支名默认为主分支`master`\n- token使用刚刚在GitHub上复制的token值\n- 存储路径就是你的文件在GitHub上方照片的文件路径，可不填\n\n### Typora设置\n\n点击文件找到下拉菜单中的偏好设置\n\n![image-20221213144346349](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213144346349.png)\n\n勾上途中画圈的两个选项，然后点击验证图片上传选项那个按钮验证能否成功上传，Typora会上传一个图片，当返回成功的消息就好了。\n\n![image-20221213145041883](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213145041883.png)\n\n","slug":"image","published":1,"updated":"2023-02-16T09:53:27.873Z","_id":"clc9yxb8t000850ut6co3hjpr","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h3><p>首先在<code>GitHub</code>上创建一个仓库用来存放图片，需要注意仓库必须是公开的，不然别人无法访问到你的图片</p>\n<span id=\"more\"></span>\n<h4 id=\"在GitHub上生成一个token用来给picGO上传图片\"><a href=\"#在GitHub上生成一个token用来给picGO上传图片\" class=\"headerlink\" title=\"在GitHub上生成一个token用来给picGO上传图片\"></a>在<code>GitHub</code>上生成一个<code>token</code>用来给<code>picGO</code>上传图片</h4><p>点击在左上角的头像上悬浮鼠标找到下拉框中的<code>settings</code>菜单</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213142347612.png\" alt=\"image-20221213142347612\"></p>\n<p>进去之后往下滑找到<code>Developer setting</code>菜单并点击<img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213142704198.png\" alt=\"image-20221213142704198\"></p>\n<p>找到<code>Personal access tokens</code>下的<code>Tokens（classic）</code>菜单，然后点击<code>Cenerate new token</code>按钮</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143024388.png\" alt=\"image-20221213143024388\"></p>\n<p>随便写一个名字然后选中rope，滑倒最下方点击绿色的<code>Genderate toekn</code>按钮</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143231493.png\" alt=\"image-20221213143231493\"></p>\n<p>把token复制并保存，以为下次进来就看不到token的值了</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143346949.png\" alt=\"image-20221213143346949\"></p>\n<h3 id=\"PicGo客户都安（PicGo下载地址）\"><a href=\"#PicGo客户都安（PicGo下载地址）\" class=\"headerlink\" title=\"PicGo客户都安（PicGo下载地址）\"></a>PicGo客户都安（<a href=\"https://link.juejin.cn/?target=https://github.com/Molunerfinn/picgo/releases\">PicGo下载地址</a>）</h3><p>安装好了之后设置一下将GitHub设置为默认图床</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143852918.png\" alt=\"image-20221213143852918\"></p>\n<ul>\n<li>仓库名为：<code>GitHub用户名/仓库名</code></li>\n<li>分支名默认为主分支<code>master</code></li>\n<li>token使用刚刚在GitHub上复制的token值</li>\n<li>存储路径就是你的文件在GitHub上方照片的文件路径，可不填</li>\n</ul>\n<h3 id=\"Typora设置\"><a href=\"#Typora设置\" class=\"headerlink\" title=\"Typora设置\"></a>Typora设置</h3><p>点击文件找到下拉菜单中的偏好设置</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213144346349.png\" alt=\"image-20221213144346349\"></p>\n<p>勾上途中画圈的两个选项，然后点击验证图片上传选项那个按钮验证能否成功上传，Typora会上传一个图片，当返回成功的消息就好了。</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213145041883.png\" alt=\"image-20221213145041883\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h3><p>首先在<code>GitHub</code>上创建一个仓库用来存放图片，需要注意仓库必须是公开的，不然别人无法访问到你的图片</p>","more":"<h4 id=\"在GitHub上生成一个token用来给picGO上传图片\"><a href=\"#在GitHub上生成一个token用来给picGO上传图片\" class=\"headerlink\" title=\"在GitHub上生成一个token用来给picGO上传图片\"></a>在<code>GitHub</code>上生成一个<code>token</code>用来给<code>picGO</code>上传图片</h4><p>点击在左上角的头像上悬浮鼠标找到下拉框中的<code>settings</code>菜单</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213142347612.png\" alt=\"image-20221213142347612\"></p>\n<p>进去之后往下滑找到<code>Developer setting</code>菜单并点击<img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213142704198.png\" alt=\"image-20221213142704198\"></p>\n<p>找到<code>Personal access tokens</code>下的<code>Tokens（classic）</code>菜单，然后点击<code>Cenerate new token</code>按钮</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143024388.png\" alt=\"image-20221213143024388\"></p>\n<p>随便写一个名字然后选中rope，滑倒最下方点击绿色的<code>Genderate toekn</code>按钮</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143231493.png\" alt=\"image-20221213143231493\"></p>\n<p>把token复制并保存，以为下次进来就看不到token的值了</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143346949.png\" alt=\"image-20221213143346949\"></p>\n<h3 id=\"PicGo客户都安（PicGo下载地址）\"><a href=\"#PicGo客户都安（PicGo下载地址）\" class=\"headerlink\" title=\"PicGo客户都安（PicGo下载地址）\"></a>PicGo客户都安（<a href=\"https://link.juejin.cn/?target=https://github.com/Molunerfinn/picgo/releases\">PicGo下载地址</a>）</h3><p>安装好了之后设置一下将GitHub设置为默认图床</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213143852918.png\" alt=\"image-20221213143852918\"></p>\n<ul>\n<li>仓库名为：<code>GitHub用户名/仓库名</code></li>\n<li>分支名默认为主分支<code>master</code></li>\n<li>token使用刚刚在GitHub上复制的token值</li>\n<li>存储路径就是你的文件在GitHub上方照片的文件路径，可不填</li>\n</ul>\n<h3 id=\"Typora设置\"><a href=\"#Typora设置\" class=\"headerlink\" title=\"Typora设置\"></a>Typora设置</h3><p>点击文件找到下拉菜单中的偏好设置</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213144346349.png\" alt=\"image-20221213144346349\"></p>\n<p>勾上途中画圈的两个选项，然后点击验证图片上传选项那个按钮验证能否成功上传，Typora会上传一个图片，当返回成功的消息就好了。</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213145041883.png\" alt=\"image-20221213145041883\"></p>"},{"title":"markdown语法笔记","date":"2022-09-01T01:33:32.000Z","top":100,"_content":"\n## 标题语法\n\n要创建标题，需要在单词或短语前面添加井号（#）。# 的数量代表了标题的级别。例如添加三个#表示创建一个三级标题（h3）\n\n<!--more-->\n可选语法\n\n还可以在文本下方添加任意数量的===号来标识一级标题，或者--号来标识二级标题\n\n## 段落语法\n\n要创建段落，请使用空白行将一行或多行文本进行分隔\n\n## 换行语法\n\n在一行的末尾添加两个或多个空格，然后按回车健，即可创建一个换行（）\n\n## 强调语法\n\n通过将文本设置为粗体或斜体来强调其重要性\n\n### 粗体\n\n**要加粗文本**，请在单词短语的前后各添加两个星号或下划线\n\n### 斜体\n\n*要用斜体显示文本，请在单词或短语前后添加一个星号或下划线。先斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。*\n\n***要同时用粗体突出显示文本，请在单词或短语前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各加三个星号，中间不要带空格。***\n\n## 引用语法\n\n>要创建块引用，请在段落前添加一个>符号\n>块引用可以包含多个段落\n>为段落之间的空白行添加一个>符号\n>>块引用可以嵌套。在嵌套的段落前添加一个>>符号\n>#块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效\n>-块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效\n>-块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效\n>-***块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效***\n>\n## 列表语法\n\n### 有序列表\n\n1. 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。\n1. 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。\n   1. 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。\n   2. 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。\n1. 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。\n\n### 无序列表\n\n- 要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表\n\n- 要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表\n  - 要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表\n\n## 要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符\n\n- 要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表\n- 要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表\n\n- 代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符\\\n\n        <html>\n            <head>\n        <html/>\n- 代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符\n\n## 代码语法\n\n``要将单词或短语表示为代码，请将其包裹在反引号(`)中``\n\n    ```bash\n    <html>\n    <head>\n        echo helloword\n    </head>\n    </html>\n    ```\n\n***\n\n## 分割线语法\n\n要创建分割下，请在单独一行使用三个或多个星号（***）、（---）、（___），并且不能包含其他内容\n\n## 链接语法\n\n链接文本放在中括号内，链接地址放在后面的括号中，链接title可选\n超链接Markdown语法代码：[超链接显示名](超链接地址\"超链接title\")\n\n    ```\n    这是一个链接 [Markdown语法](https://markdown.com.cn)。\n    ```\n\n### 渲染效果\n\n这是一个链接[Markdown语法](https://baidu.com \"demo\")\n\n### 给链接增加Title\n\n链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔\n\n### 网址和Email地址\n\n使用尖括号可以很方便地把URL或者email地址变成可点击的链接\n\n    ```\n    <https://baidu.com>\n    <1851353758@qq.com>\n    ```\n\n<https://baidu.com>\n<1851353758@qq.com>\n\n### 带格式化的链接\n\n强调链接，在链接语法前后增加星号。要将链接表示为代码，请在方括号中添加反引号\n\n    ```\n    **[加粗链接](https://baidu.com)**\n    *[斜体链接](https://baidu.com)*\n    *[`代码链接`](https://baidu.com)*\n    ```\n\n**[加粗链接](https://baidu.com)**\n*[斜体链接](https://baidu.com)*\n*[`代码链接`](https://baidu.com)*\n\n### 引用类型链接\n\n引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读\n\n## 图片语法\n\n要添加图像，请使用感叹号（!）,然后再方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。\n插入图片Markdown语法代码：`![图片alt](图片链接 \"图片title\")`\n\n    ![这是图片](/assets/img/philly-magic-garden.jpg \"Magic Gardens\")\n![这是图片](/assets/img/philly-magic-garden.jpg \"Magic Gardens\")\n\n### 链接图片\n\n给图片增加链接，请将图像的Markdown括在方括号中，然后将链接添加在圆括号中。\n\n    [![沙漠中的岩石照片](/assets/img/shiprock \"shiprock\")](https://baidu,com)\n [![沙漠中的岩石照片](/assets/img/shiprock \"shiprock\")](https://baidu.com)\n\n## 转译字符语法\n\n 要显示原本用于格式化Markdown文档的字符，请在字符前面添加反斜杠字符\\\n\n    \\*转义字符\n\\*转义字符\n\n### 特殊字符自动转义\n\n在html文件中，有两个字符需要特殊处理：<和&。符号用于起始标签，&符号则用于标记HTML实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是`&lt;`和`&amp;`。\n`&`符号起始很容易让写作网页文件的人感到困扰，如果你要打[AT&T],你必须要写成[AT&amp;T],还得转换网址内的`&`符号，如果你要链接到：\n\n    http://images.google.com/images?num=30&q=larry+bird\n你必须要把网址转成：\n\n    http://images.google.com/images?num=30&amp;q=larry+bird\n才能放到链接标签的`href`属性里。不用说也知道这很容易忘记，这也可能是HTML标准检查所检查到的错误中，数量最多的。\n\nMarkdown允许你直接使用这些符号，它帮你自动转义字符。如果你使用`&`符号的作为HTML实体的一部分，那么它不会被转换，而在其他情况下，它则会被转换成`&amp;`。所以你如果要在文件插入一个著作权的符号，你可以这样写：\n\n    &Copy\nMarkdown将不会对这段文字坐修改，但是如果你这样写\n\n    AT&T\nMarkdown就会将它转为\n\n    AT&amp;T\n类似的状况也会发生在<符号上，因为Markdown支持行内HTML，如果你使用<符号作为HTML标签的分隔符，那Markdown也不会对它做任何转换，但是如果你是写：\n\n    4<5\nMarkdown将会把它转换为：\n\n    4&lt;5\n需要特别注意的是，再Markdown的块级元素和内联元素，`<`和`&`两个符号都会被自动转换成HTML实体，这项特性让你可以很容易地用Markdown写HTML。（再HTML语法中，你要手动把所有的`<`和`&`都转换为HTML实体。）\n\n## 内嵌HTML标签\n\n对于MARkdown涵盖范围之外的标签，都可以直接在文件里面用HTML本身。如需使用HTML，不需要额外标注这是HTML或者Markdown，只需HTML标签添加到Markdown文本中即可。\n\n### 行级内联标签\n\nHTML的行级内联标签如`<span>`、`<cite>`、`<del>`不受限制，可以在Markdown的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用Markdown格式，而采用HTML标签来格式化。例如：如果比较喜欢HTML的`<a>`或`<img>`标签，可以直接使用这些标签，而不用Markdown提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度）、使用HTML标签更方便些。\nHTML行级内联标签和区块标签不同，在内联标签的范围内，Markdown的语法是可以解析的。\n\n    this **word** is bold <em>word</em> is italic\nthis **word** is bold `<em>`word`</em>` is italic\n\n### 区块标签\n\n区块元素比如`<div>`、`<table>`、`<pre>`、`<p>`等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用tab或是空白来缩进。Markdown会自动识别这区块元素，避免在区块标签前后加上没有必要的`<p>`标签\n例如，在Markdown文件加上一段HTML表格：\n\n    ```\n    \n    This is a regular paragraph.\n    \n    <table>\n        <tr>\n            <td>Foo</td>\n        </tr>\n    </table>\n    \n    This is another regular paragraph.\n    ```\n\nThis is a regular paragraph.\n\n    <table>\n        <tr>\n            <td>Foo</td>\n        </tr>\n    </table>\n\nThis is another regular paragraph.\n请注意，Markdown语法在HTML区块标签中将不会被进行处理。例如，你无法在HTML区块内使用Markdown形式`*强调*`。\n\n## 表格\n\n要添加表格，请使用三个或多个连字符（---）创建每列的标题，并使用管道（|）分隔每列\n\n    ```\n    |标题1|标题2|\n    |----|------|\n    |header|大大撒旦|\n    |dsadsa|dsdsa|\n    ```\n\n|标题1|标题2|\n|:----|------:|\n|header|大大撒旦|\n|aa|dsa|\n\n## 脚注\n\n脚注使您可以添加注释和参考，而不会使文档正文混乱。当您创建脚注时，带有脚注的上标数字会出现在您添加脚注参考的位置。读者可以单击链接以跳出页面底部的脚注内容。\n\n要创建脚注参考，请在方括号（[^1]）内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注参考与脚注本身相关联-在输出中，脚注俺顺序编号。\n\n在括号内使用另一个插入符号和数字添加脚注，并用冒号和文本（[^1]：My footnote）.您不必在文档末尾添加脚注。您可以将他们放在除列表，块引号和表之类的其他元素之外的任何位置。\n\n    ```\n    Here's a simple footnote,[^1] and here's a longer one.[^bignote]\n    \n    [^1]: This is the first footnote.\n    \n    [^bignote]: Here's one with multiple paragraphs and code.\n    \n        Indent paragraphs to include them in the footnote.\n    \n        `{ my code }`\n    \n        Add as many paragraphs as you like.\n    ```\n\nHere's a simple footnote,[^1] and here's a longer one.[^bignote]\n\n[^1]: This is the first footnote.\n\n[^bignote]: Here's one with multiple paragraphs and code.\n\n    Indent paragraphs to include them in the footnote.\n    \n    `{ my code }`\n    \n    Add as many paragraphs as you like.\n\n## 标题编号\n\n许多Markdown处理器支持标题的自定义ID，一些Markdown处理器会自动添加他们。添加自定义ID允许您直接链接到标题并使用css对其进行修改。要添加自定义标题ID，请在标题相同的行上用大括号括起该自定义ID。\n\n### 标题一 { #first }\n\n### 链接到标题ID（#headId）\n\n通过创建带有数字符号（#）和自定义标题ID的`[标准链接](#headId)`\n\n## 定义列表\n\n一些Markdown处理器允许您创建术语及其对应定义的定义列表。要创建定义列表。要在第一行键入术语。在下一行，键入一个冒号，后面跟一个空格和定义。\n\n    First Term\n    : This is the definition of the first term.\n    \n    Second Term\n    : This is one definition of the second term.\n    : This is another definition of the second term.\n\n First Term\n    : This is the definition of the first term.\n\n    Second Term\n    : This is one definition of the second term.\n    : This is another definition of the second term.\n\n## 删除线\n\n    ~~通过在单词中心放置一条水平线来删除单词。结果看起来像这样。若要删除单词，请在单词前后时候使用前后使用两个~~\n  ~~通过在单词中心放置一条水平线来删除单词。结果看起来像这样。若要删除单词，请在单词前后时候使用前后使用两个~~\n\n## 任务列表语法\n\n 任务列表使您可以创建带有复选框的项目列表。在支持列表的MArkdown应用程序中，复选程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号`-`和方括号`[]`，并在`[]`前面加上空格。要选择一个复选框，请在方括号`[x]`之间添加X。\n\n    - [x] 选项一\n    - [ ] 选项二\n    - [ ] 选项三\n\n- [x] 选项一\n- [ ] 选项二\n- [ ] 选项三\n\n## 使用Emoji表情\n\n有两种方法可以将表情符号添加到Markdown文件中：将标签符号复制并黏贴到Markdown格式的文本中，或者键入emoji shortcodes\n\n### 复制和黏贴标签符号\n\n在大多数情况下，可以简单地从Emojipendia等来源复制表情符号。从Markdown应用程序到处的HTML和PDF文件应显示表情符号。\nTip：如果使用静态网站生成器，请确保将HTML页面编码插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称。\n\n### 使用表情符号简码\n\n一些Markdown应用程序允许通过键入表情符号代码来插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称\n\n    去露营了！ :tent: 很快回来。\n    \n    真好笑！ :joy:\n去露营了！⛺很快回来。\n\n真好笑！😂\n\n## 自动网址链接\n\n许多Markdown处理器会自动将URL转换为链接。这意味这输入<https://www.baidu.com/,即使没有使用方括号，Markdown>处理器也会自动将其转换为链接\n<https://www.baidu.com/>\n\n### 禁用自动URL链接\n\n`http://www.example.com`\n","source":"_posts/markdown.md","raw":"---\ntitle: markdown语法笔记\ndate: 2022-09-01 09:33:32\ntags: markdown\ncategories: 前端\ntop: 100\n---\n\n## 标题语法\n\n要创建标题，需要在单词或短语前面添加井号（#）。# 的数量代表了标题的级别。例如添加三个#表示创建一个三级标题（h3）\n\n<!--more-->\n可选语法\n\n还可以在文本下方添加任意数量的===号来标识一级标题，或者--号来标识二级标题\n\n## 段落语法\n\n要创建段落，请使用空白行将一行或多行文本进行分隔\n\n## 换行语法\n\n在一行的末尾添加两个或多个空格，然后按回车健，即可创建一个换行（）\n\n## 强调语法\n\n通过将文本设置为粗体或斜体来强调其重要性\n\n### 粗体\n\n**要加粗文本**，请在单词短语的前后各添加两个星号或下划线\n\n### 斜体\n\n*要用斜体显示文本，请在单词或短语前后添加一个星号或下划线。先斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。*\n\n***要同时用粗体突出显示文本，请在单词或短语前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各加三个星号，中间不要带空格。***\n\n## 引用语法\n\n>要创建块引用，请在段落前添加一个>符号\n>块引用可以包含多个段落\n>为段落之间的空白行添加一个>符号\n>>块引用可以嵌套。在嵌套的段落前添加一个>>符号\n>#块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效\n>-块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效\n>-块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效\n>-***块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效***\n>\n## 列表语法\n\n### 有序列表\n\n1. 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。\n1. 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。\n   1. 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。\n   2. 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。\n1. 要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。\n\n### 无序列表\n\n- 要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表\n\n- 要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表\n  - 要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表\n\n## 要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符\n\n- 要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表\n- 要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表\n\n- 代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符\\\n\n        <html>\n            <head>\n        <html/>\n- 代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符\n\n## 代码语法\n\n``要将单词或短语表示为代码，请将其包裹在反引号(`)中``\n\n    ```bash\n    <html>\n    <head>\n        echo helloword\n    </head>\n    </html>\n    ```\n\n***\n\n## 分割线语法\n\n要创建分割下，请在单独一行使用三个或多个星号（***）、（---）、（___），并且不能包含其他内容\n\n## 链接语法\n\n链接文本放在中括号内，链接地址放在后面的括号中，链接title可选\n超链接Markdown语法代码：[超链接显示名](超链接地址\"超链接title\")\n\n    ```\n    这是一个链接 [Markdown语法](https://markdown.com.cn)。\n    ```\n\n### 渲染效果\n\n这是一个链接[Markdown语法](https://baidu.com \"demo\")\n\n### 给链接增加Title\n\n链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔\n\n### 网址和Email地址\n\n使用尖括号可以很方便地把URL或者email地址变成可点击的链接\n\n    ```\n    <https://baidu.com>\n    <1851353758@qq.com>\n    ```\n\n<https://baidu.com>\n<1851353758@qq.com>\n\n### 带格式化的链接\n\n强调链接，在链接语法前后增加星号。要将链接表示为代码，请在方括号中添加反引号\n\n    ```\n    **[加粗链接](https://baidu.com)**\n    *[斜体链接](https://baidu.com)*\n    *[`代码链接`](https://baidu.com)*\n    ```\n\n**[加粗链接](https://baidu.com)**\n*[斜体链接](https://baidu.com)*\n*[`代码链接`](https://baidu.com)*\n\n### 引用类型链接\n\n引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读\n\n## 图片语法\n\n要添加图像，请使用感叹号（!）,然后再方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。\n插入图片Markdown语法代码：`![图片alt](图片链接 \"图片title\")`\n\n    ![这是图片](/assets/img/philly-magic-garden.jpg \"Magic Gardens\")\n![这是图片](/assets/img/philly-magic-garden.jpg \"Magic Gardens\")\n\n### 链接图片\n\n给图片增加链接，请将图像的Markdown括在方括号中，然后将链接添加在圆括号中。\n\n    [![沙漠中的岩石照片](/assets/img/shiprock \"shiprock\")](https://baidu,com)\n [![沙漠中的岩石照片](/assets/img/shiprock \"shiprock\")](https://baidu.com)\n\n## 转译字符语法\n\n 要显示原本用于格式化Markdown文档的字符，请在字符前面添加反斜杠字符\\\n\n    \\*转义字符\n\\*转义字符\n\n### 特殊字符自动转义\n\n在html文件中，有两个字符需要特殊处理：<和&。符号用于起始标签，&符号则用于标记HTML实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是`&lt;`和`&amp;`。\n`&`符号起始很容易让写作网页文件的人感到困扰，如果你要打[AT&T],你必须要写成[AT&amp;T],还得转换网址内的`&`符号，如果你要链接到：\n\n    http://images.google.com/images?num=30&q=larry+bird\n你必须要把网址转成：\n\n    http://images.google.com/images?num=30&amp;q=larry+bird\n才能放到链接标签的`href`属性里。不用说也知道这很容易忘记，这也可能是HTML标准检查所检查到的错误中，数量最多的。\n\nMarkdown允许你直接使用这些符号，它帮你自动转义字符。如果你使用`&`符号的作为HTML实体的一部分，那么它不会被转换，而在其他情况下，它则会被转换成`&amp;`。所以你如果要在文件插入一个著作权的符号，你可以这样写：\n\n    &Copy\nMarkdown将不会对这段文字坐修改，但是如果你这样写\n\n    AT&T\nMarkdown就会将它转为\n\n    AT&amp;T\n类似的状况也会发生在<符号上，因为Markdown支持行内HTML，如果你使用<符号作为HTML标签的分隔符，那Markdown也不会对它做任何转换，但是如果你是写：\n\n    4<5\nMarkdown将会把它转换为：\n\n    4&lt;5\n需要特别注意的是，再Markdown的块级元素和内联元素，`<`和`&`两个符号都会被自动转换成HTML实体，这项特性让你可以很容易地用Markdown写HTML。（再HTML语法中，你要手动把所有的`<`和`&`都转换为HTML实体。）\n\n## 内嵌HTML标签\n\n对于MARkdown涵盖范围之外的标签，都可以直接在文件里面用HTML本身。如需使用HTML，不需要额外标注这是HTML或者Markdown，只需HTML标签添加到Markdown文本中即可。\n\n### 行级内联标签\n\nHTML的行级内联标签如`<span>`、`<cite>`、`<del>`不受限制，可以在Markdown的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用Markdown格式，而采用HTML标签来格式化。例如：如果比较喜欢HTML的`<a>`或`<img>`标签，可以直接使用这些标签，而不用Markdown提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度）、使用HTML标签更方便些。\nHTML行级内联标签和区块标签不同，在内联标签的范围内，Markdown的语法是可以解析的。\n\n    this **word** is bold <em>word</em> is italic\nthis **word** is bold `<em>`word`</em>` is italic\n\n### 区块标签\n\n区块元素比如`<div>`、`<table>`、`<pre>`、`<p>`等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用tab或是空白来缩进。Markdown会自动识别这区块元素，避免在区块标签前后加上没有必要的`<p>`标签\n例如，在Markdown文件加上一段HTML表格：\n\n    ```\n    \n    This is a regular paragraph.\n    \n    <table>\n        <tr>\n            <td>Foo</td>\n        </tr>\n    </table>\n    \n    This is another regular paragraph.\n    ```\n\nThis is a regular paragraph.\n\n    <table>\n        <tr>\n            <td>Foo</td>\n        </tr>\n    </table>\n\nThis is another regular paragraph.\n请注意，Markdown语法在HTML区块标签中将不会被进行处理。例如，你无法在HTML区块内使用Markdown形式`*强调*`。\n\n## 表格\n\n要添加表格，请使用三个或多个连字符（---）创建每列的标题，并使用管道（|）分隔每列\n\n    ```\n    |标题1|标题2|\n    |----|------|\n    |header|大大撒旦|\n    |dsadsa|dsdsa|\n    ```\n\n|标题1|标题2|\n|:----|------:|\n|header|大大撒旦|\n|aa|dsa|\n\n## 脚注\n\n脚注使您可以添加注释和参考，而不会使文档正文混乱。当您创建脚注时，带有脚注的上标数字会出现在您添加脚注参考的位置。读者可以单击链接以跳出页面底部的脚注内容。\n\n要创建脚注参考，请在方括号（[^1]）内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注参考与脚注本身相关联-在输出中，脚注俺顺序编号。\n\n在括号内使用另一个插入符号和数字添加脚注，并用冒号和文本（[^1]：My footnote）.您不必在文档末尾添加脚注。您可以将他们放在除列表，块引号和表之类的其他元素之外的任何位置。\n\n    ```\n    Here's a simple footnote,[^1] and here's a longer one.[^bignote]\n    \n    [^1]: This is the first footnote.\n    \n    [^bignote]: Here's one with multiple paragraphs and code.\n    \n        Indent paragraphs to include them in the footnote.\n    \n        `{ my code }`\n    \n        Add as many paragraphs as you like.\n    ```\n\nHere's a simple footnote,[^1] and here's a longer one.[^bignote]\n\n[^1]: This is the first footnote.\n\n[^bignote]: Here's one with multiple paragraphs and code.\n\n    Indent paragraphs to include them in the footnote.\n    \n    `{ my code }`\n    \n    Add as many paragraphs as you like.\n\n## 标题编号\n\n许多Markdown处理器支持标题的自定义ID，一些Markdown处理器会自动添加他们。添加自定义ID允许您直接链接到标题并使用css对其进行修改。要添加自定义标题ID，请在标题相同的行上用大括号括起该自定义ID。\n\n### 标题一 { #first }\n\n### 链接到标题ID（#headId）\n\n通过创建带有数字符号（#）和自定义标题ID的`[标准链接](#headId)`\n\n## 定义列表\n\n一些Markdown处理器允许您创建术语及其对应定义的定义列表。要创建定义列表。要在第一行键入术语。在下一行，键入一个冒号，后面跟一个空格和定义。\n\n    First Term\n    : This is the definition of the first term.\n    \n    Second Term\n    : This is one definition of the second term.\n    : This is another definition of the second term.\n\n First Term\n    : This is the definition of the first term.\n\n    Second Term\n    : This is one definition of the second term.\n    : This is another definition of the second term.\n\n## 删除线\n\n    ~~通过在单词中心放置一条水平线来删除单词。结果看起来像这样。若要删除单词，请在单词前后时候使用前后使用两个~~\n  ~~通过在单词中心放置一条水平线来删除单词。结果看起来像这样。若要删除单词，请在单词前后时候使用前后使用两个~~\n\n## 任务列表语法\n\n 任务列表使您可以创建带有复选框的项目列表。在支持列表的MArkdown应用程序中，复选程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号`-`和方括号`[]`，并在`[]`前面加上空格。要选择一个复选框，请在方括号`[x]`之间添加X。\n\n    - [x] 选项一\n    - [ ] 选项二\n    - [ ] 选项三\n\n- [x] 选项一\n- [ ] 选项二\n- [ ] 选项三\n\n## 使用Emoji表情\n\n有两种方法可以将表情符号添加到Markdown文件中：将标签符号复制并黏贴到Markdown格式的文本中，或者键入emoji shortcodes\n\n### 复制和黏贴标签符号\n\n在大多数情况下，可以简单地从Emojipendia等来源复制表情符号。从Markdown应用程序到处的HTML和PDF文件应显示表情符号。\nTip：如果使用静态网站生成器，请确保将HTML页面编码插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称。\n\n### 使用表情符号简码\n\n一些Markdown应用程序允许通过键入表情符号代码来插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称\n\n    去露营了！ :tent: 很快回来。\n    \n    真好笑！ :joy:\n去露营了！⛺很快回来。\n\n真好笑！😂\n\n## 自动网址链接\n\n许多Markdown处理器会自动将URL转换为链接。这意味这输入<https://www.baidu.com/,即使没有使用方括号，Markdown>处理器也会自动将其转换为链接\n<https://www.baidu.com/>\n\n### 禁用自动URL链接\n\n`http://www.example.com`\n","slug":"markdown","published":1,"updated":"2023-02-16T09:53:27.874Z","_id":"clc9yxb8v000c50ut00hq4j8k","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"标题语法\"><a href=\"#标题语法\" class=\"headerlink\" title=\"标题语法\"></a>标题语法</h2><p>要创建标题，需要在单词或短语前面添加井号（#）。# 的数量代表了标题的级别。例如添加三个#表示创建一个三级标题（h3）</p>\n<span id=\"more\"></span>\n<p>可选语法</p>\n<p>还可以在文本下方添加任意数量的===号来标识一级标题，或者–号来标识二级标题</p>\n<h2 id=\"段落语法\"><a href=\"#段落语法\" class=\"headerlink\" title=\"段落语法\"></a>段落语法</h2><p>要创建段落，请使用空白行将一行或多行文本进行分隔</p>\n<h2 id=\"换行语法\"><a href=\"#换行语法\" class=\"headerlink\" title=\"换行语法\"></a>换行语法</h2><p>在一行的末尾添加两个或多个空格，然后按回车健，即可创建一个换行（）</p>\n<h2 id=\"强调语法\"><a href=\"#强调语法\" class=\"headerlink\" title=\"强调语法\"></a>强调语法</h2><p>通过将文本设置为粗体或斜体来强调其重要性</p>\n<h3 id=\"粗体\"><a href=\"#粗体\" class=\"headerlink\" title=\"粗体\"></a>粗体</h3><p><strong>要加粗文本</strong>，请在单词短语的前后各添加两个星号或下划线</p>\n<h3 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h3><p><em>要用斜体显示文本，请在单词或短语前后添加一个星号或下划线。先斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。</em></p>\n<p><em><strong>要同时用粗体突出显示文本，请在单词或短语前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各加三个星号，中间不要带空格。</strong></em></p>\n<h2 id=\"引用语法\"><a href=\"#引用语法\" class=\"headerlink\" title=\"引用语法\"></a>引用语法</h2><blockquote>\n<p>要创建块引用，请在段落前添加一个&gt;符号<br>块引用可以包含多个段落<br>为段落之间的空白行添加一个&gt;符号</p>\n<blockquote>\n<p>块引用可以嵌套。在嵌套的段落前添加一个&gt;&gt;符号<br>#块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效<br>-块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效<br>-块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效<br>-<em><strong>块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效</strong></em></p>\n</blockquote>\n</blockquote>\n<h2 id=\"列表语法\"><a href=\"#列表语法\" class=\"headerlink\" title=\"列表语法\"></a>列表语法</h2><h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><ol>\n<li>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</li>\n<li>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。<ol>\n<li>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</li>\n<li>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</li>\n</ol>\n</li>\n<li>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</li>\n</ol>\n<h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><ul>\n<li><p>要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表</p>\n</li>\n<li><p>要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表</p>\n<ul>\n<li>要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符\"><a href=\"#要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符\" class=\"headerlink\" title=\"要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符\"></a>要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符</h2><ul>\n<li><p>要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表</p>\n</li>\n<li><p>要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表</p>\n</li>\n<li><p>代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符\\</p>\n<pre><code>  &lt;html&gt;\n      &lt;head&gt;\n  &lt;html/&gt;\n</code></pre>\n</li>\n<li><p>代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符</p>\n</li>\n</ul>\n<h2 id=\"代码语法\"><a href=\"#代码语法\" class=\"headerlink\" title=\"代码语法\"></a>代码语法</h2><p><code>要将单词或短语表示为代码，请将其包裹在反引号(`)中</code></p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">head</span>&gt;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> helloword</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<hr>\n<h2 id=\"分割线语法\"><a href=\"#分割线语法\" class=\"headerlink\" title=\"分割线语法\"></a>分割线语法</h2><p>要创建分割下，请在单独一行使用三个或多个星号（***）、（—）、（___），并且不能包含其他内容</p>\n<h2 id=\"链接语法\"><a href=\"#链接语法\" class=\"headerlink\" title=\"链接语法\"></a>链接语法</h2><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选<br>超链接Markdown语法代码：<a href=\"%E8%B6%85%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80%22%E8%B6%85%E9%93%BE%E6%8E%A5title%22\">超链接显示名</a></p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个链接 [Markdown语法](https://markdown.com.cn)。</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"渲染效果\"><a href=\"#渲染效果\" class=\"headerlink\" title=\"渲染效果\"></a>渲染效果</h3><p>这是一个链接<a href=\"https://baidu.com/\" title=\"demo\">Markdown语法</a></p>\n<h3 id=\"给链接增加Title\"><a href=\"#给链接增加Title\" class=\"headerlink\" title=\"给链接增加Title\"></a>给链接增加Title</h3><p>链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔</p>\n<h3 id=\"网址和Email地址\"><a href=\"#网址和Email地址\" class=\"headerlink\" title=\"网址和Email地址\"></a>网址和Email地址</h3><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接</p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;https://baidu.com&gt;</span><br><span class=\"line\">&lt;1851353758@qq.com&gt;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p><a href=\"https://baidu.com/\">https://baidu.com</a><br><a href=\"mailto:&#x31;&#56;&#x35;&#x31;&#51;&#53;&#x33;&#x37;&#53;&#x38;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;\">&#x31;&#56;&#x35;&#x31;&#51;&#53;&#x33;&#x37;&#53;&#x38;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;</a></p>\n<h3 id=\"带格式化的链接\"><a href=\"#带格式化的链接\" class=\"headerlink\" title=\"带格式化的链接\"></a>带格式化的链接</h3><p>强调链接，在链接语法前后增加星号。要将链接表示为代码，请在方括号中添加反引号</p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**[加粗链接](https://baidu.com)**</span><br><span class=\"line\">*[斜体链接](https://baidu.com)*</span><br><span class=\"line\">*[`代码链接`](https://baidu.com)*</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p><strong><a href=\"https://baidu.com/\">加粗链接</a></strong><br><em><a href=\"https://baidu.com/\">斜体链接</a></em><br><em><a href=\"https://baidu.com/\"><code>代码链接</code></a></em></p>\n<h3 id=\"引用类型链接\"><a href=\"#引用类型链接\" class=\"headerlink\" title=\"引用类型链接\"></a>引用类型链接</h3><p>引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读</p>\n<h2 id=\"图片语法\"><a href=\"#图片语法\" class=\"headerlink\" title=\"图片语法\"></a>图片语法</h2><p>要添加图像，请使用感叹号（!）,然后再方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。<br>插入图片Markdown语法代码：<code>![图片alt](图片链接 &quot;图片title&quot;)</code></p>\n<pre><code>![这是图片](/assets/img/philly-magic-garden.jpg &quot;Magic Gardens&quot;)\n</code></pre>\n<p><img src=\"/assets/img/philly-magic-garden.jpg\" alt=\"这是图片\" title=\"Magic Gardens\"></p>\n<h3 id=\"链接图片\"><a href=\"#链接图片\" class=\"headerlink\" title=\"链接图片\"></a>链接图片</h3><p>给图片增加链接，请将图像的Markdown括在方括号中，然后将链接添加在圆括号中。</p>\n<pre><code>[![沙漠中的岩石照片](/assets/img/shiprock &quot;shiprock&quot;)](https://baidu,com)\n</code></pre>\n<p> <a href=\"https://baidu.com/\"><img src=\"/assets/img/shiprock\" alt=\"沙漠中的岩石照片\" title=\"shiprock\"></a></p>\n<h2 id=\"转译字符语法\"><a href=\"#转译字符语法\" class=\"headerlink\" title=\"转译字符语法\"></a>转译字符语法</h2><p> 要显示原本用于格式化Markdown文档的字符，请在字符前面添加反斜杠字符\\</p>\n<pre><code>\\*转义字符\n</code></pre>\n<p>*转义字符</p>\n<h3 id=\"特殊字符自动转义\"><a href=\"#特殊字符自动转义\" class=\"headerlink\" title=\"特殊字符自动转义\"></a>特殊字符自动转义</h3><p>在html文件中，有两个字符需要特殊处理：&lt;和&amp;。符号用于起始标签，&amp;符号则用于标记HTML实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是<code>&amp;lt;</code>和<code>&amp;amp;</code>。<br><code>&amp;</code>符号起始很容易让写作网页文件的人感到困扰，如果你要打[AT&amp;T],你必须要写成[AT&amp;T],还得转换网址内的<code>&amp;</code>符号，如果你要链接到：</p>\n<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird\n</code></pre>\n<p>你必须要把网址转成：</p>\n<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird\n</code></pre>\n<p>才能放到链接标签的<code>href</code>属性里。不用说也知道这很容易忘记，这也可能是HTML标准检查所检查到的错误中，数量最多的。</p>\n<p>Markdown允许你直接使用这些符号，它帮你自动转义字符。如果你使用<code>&amp;</code>符号的作为HTML实体的一部分，那么它不会被转换，而在其他情况下，它则会被转换成<code>&amp;amp;</code>。所以你如果要在文件插入一个著作权的符号，你可以这样写：</p>\n<pre><code>&amp;Copy\n</code></pre>\n<p>Markdown将不会对这段文字坐修改，但是如果你这样写</p>\n<pre><code>AT&amp;T\n</code></pre>\n<p>Markdown就会将它转为</p>\n<pre><code>AT&amp;amp;T\n</code></pre>\n<p>类似的状况也会发生在&lt;符号上，因为Markdown支持行内HTML，如果你使用&lt;符号作为HTML标签的分隔符，那Markdown也不会对它做任何转换，但是如果你是写：</p>\n<pre><code>4&lt;5\n</code></pre>\n<p>Markdown将会把它转换为：</p>\n<pre><code>4&amp;lt;5\n</code></pre>\n<p>需要特别注意的是，再Markdown的块级元素和内联元素，<code>&lt;</code>和<code>&amp;</code>两个符号都会被自动转换成HTML实体，这项特性让你可以很容易地用Markdown写HTML。（再HTML语法中，你要手动把所有的<code>&lt;</code>和<code>&amp;</code>都转换为HTML实体。）</p>\n<h2 id=\"内嵌HTML标签\"><a href=\"#内嵌HTML标签\" class=\"headerlink\" title=\"内嵌HTML标签\"></a>内嵌HTML标签</h2><p>对于MARkdown涵盖范围之外的标签，都可以直接在文件里面用HTML本身。如需使用HTML，不需要额外标注这是HTML或者Markdown，只需HTML标签添加到Markdown文本中即可。</p>\n<h3 id=\"行级内联标签\"><a href=\"#行级内联标签\" class=\"headerlink\" title=\"行级内联标签\"></a>行级内联标签</h3><p>HTML的行级内联标签如<code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code>不受限制，可以在Markdown的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用Markdown格式，而采用HTML标签来格式化。例如：如果比较喜欢HTML的<code>&lt;a&gt;</code>或<code>&lt;img&gt;</code>标签，可以直接使用这些标签，而不用Markdown提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度）、使用HTML标签更方便些。<br>HTML行级内联标签和区块标签不同，在内联标签的范围内，Markdown的语法是可以解析的。</p>\n<pre><code>this **word** is bold &lt;em&gt;word&lt;/em&gt; is italic\n</code></pre>\n<p>this <strong>word</strong> is bold <code>&lt;em&gt;</code>word<code>&lt;/em&gt;</code> is italic</p>\n<h3 id=\"区块标签\"><a href=\"#区块标签\" class=\"headerlink\" title=\"区块标签\"></a>区块标签</h3><p>区块元素比如<code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code>等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用tab或是空白来缩进。Markdown会自动识别这区块元素，避免在区块标签前后加上没有必要的<code>&lt;p&gt;</code>标签<br>例如，在Markdown文件加上一段HTML表格：</p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">This is a regular paragraph.</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">        &lt;td&gt;Foo&lt;/td&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">This is another regular paragraph.</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>This is a regular paragraph.</p>\n<pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Foo&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n<p>This is another regular paragraph.<br>请注意，Markdown语法在HTML区块标签中将不会被进行处理。例如，你无法在HTML区块内使用Markdown形式<code>*强调*</code>。</p>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p>要添加表格，请使用三个或多个连字符（—）创建每列的标题，并使用管道（|）分隔每列</p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|标题1|标题2|</span><br><span class=\"line\">|----|------|</span><br><span class=\"line\">|header|大大撒旦|</span><br><span class=\"line\">|dsadsa|dsdsa|</span><br></pre></td></tr></table></figure>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"left\">标题1</th>\n<th align=\"right\">标题2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">header</td>\n<td align=\"right\">大大撒旦</td>\n</tr>\n<tr>\n<td align=\"left\">aa</td>\n<td align=\"right\">dsa</td>\n</tr>\n</tbody></table>\n<h2 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a>脚注</h2><p>脚注使您可以添加注释和参考，而不会使文档正文混乱。当您创建脚注时，带有脚注的上标数字会出现在您添加脚注参考的位置。读者可以单击链接以跳出页面底部的脚注内容。</p>\n<p>要创建脚注参考，请在方括号（[^1]）内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注参考与脚注本身相关联-在输出中，脚注俺顺序编号。</p>\n<p>在括号内使用另一个插入符号和数字添加脚注，并用冒号和文本（[^1]：My footnote）.您不必在文档末尾添加脚注。您可以将他们放在除列表，块引号和表之类的其他元素之外的任何位置。</p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Here&#x27;s a simple footnote,[^1] and here&#x27;s a longer one.[^bignote]</span><br><span class=\"line\"></span><br><span class=\"line\">[^1]: This is the first footnote.</span><br><span class=\"line\"></span><br><span class=\"line\">[^bignote]: Here&#x27;s one with multiple paragraphs and code.</span><br><span class=\"line\"></span><br><span class=\"line\">    Indent paragraphs to include them in the footnote.</span><br><span class=\"line\"></span><br><span class=\"line\">    `&#123; my code &#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">    Add as many paragraphs as you like.</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>Here’s a simple footnote,[^1] and here’s a longer one.[^bignote]</p>\n<p>[^1]: This is the first footnote.</p>\n<p>[^bignote]: Here’s one with multiple paragraphs and code.</p>\n<pre><code>Indent paragraphs to include them in the footnote.\n\n`&#123; my code &#125;`\n\nAdd as many paragraphs as you like.\n</code></pre>\n<h2 id=\"标题编号\"><a href=\"#标题编号\" class=\"headerlink\" title=\"标题编号\"></a>标题编号</h2><p>许多Markdown处理器支持标题的自定义ID，一些Markdown处理器会自动添加他们。添加自定义ID允许您直接链接到标题并使用css对其进行修改。要添加自定义标题ID，请在标题相同的行上用大括号括起该自定义ID。</p>\n<h3 id=\"标题一-first\"><a href=\"#标题一-first\" class=\"headerlink\" title=\"标题一 { #first }\"></a>标题一 { #first }</h3><h3 id=\"链接到标题ID（-headId）\"><a href=\"#链接到标题ID（-headId）\" class=\"headerlink\" title=\"链接到标题ID（#headId）\"></a>链接到标题ID（#headId）</h3><p>通过创建带有数字符号（#）和自定义标题ID的<code>[标准链接](#headId)</code></p>\n<h2 id=\"定义列表\"><a href=\"#定义列表\" class=\"headerlink\" title=\"定义列表\"></a>定义列表</h2><p>一些Markdown处理器允许您创建术语及其对应定义的定义列表。要创建定义列表。要在第一行键入术语。在下一行，键入一个冒号，后面跟一个空格和定义。</p>\n<pre><code>First Term\n: This is the definition of the first term.\n\nSecond Term\n: This is one definition of the second term.\n: This is another definition of the second term.\n</code></pre>\n<p> First Term<br>    : This is the definition of the first term.</p>\n<pre><code>Second Term\n: This is one definition of the second term.\n: This is another definition of the second term.\n</code></pre>\n<h2 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><pre><code>~~通过在单词中心放置一条水平线来删除单词。结果看起来像这样。若要删除单词，请在单词前后时候使用前后使用两个~~\n</code></pre>\n<p>  <del>通过在单词中心放置一条水平线来删除单词。结果看起来像这样。若要删除单词，请在单词前后时候使用前后使用两个</del></p>\n<h2 id=\"任务列表语法\"><a href=\"#任务列表语法\" class=\"headerlink\" title=\"任务列表语法\"></a>任务列表语法</h2><p> 任务列表使您可以创建带有复选框的项目列表。在支持列表的MArkdown应用程序中，复选程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号<code>-</code>和方括号<code>[]</code>，并在<code>[]</code>前面加上空格。要选择一个复选框，请在方括号<code>[x]</code>之间添加X。</p>\n<pre><code>- [x] 选项一\n- [ ] 选项二\n- [ ] 选项三\n</code></pre>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 选项一</li>\n<li><input disabled=\"\" type=\"checkbox\"> 选项二</li>\n<li><input disabled=\"\" type=\"checkbox\"> 选项三</li>\n</ul>\n<h2 id=\"使用Emoji表情\"><a href=\"#使用Emoji表情\" class=\"headerlink\" title=\"使用Emoji表情\"></a>使用Emoji表情</h2><p>有两种方法可以将表情符号添加到Markdown文件中：将标签符号复制并黏贴到Markdown格式的文本中，或者键入emoji shortcodes</p>\n<h3 id=\"复制和黏贴标签符号\"><a href=\"#复制和黏贴标签符号\" class=\"headerlink\" title=\"复制和黏贴标签符号\"></a>复制和黏贴标签符号</h3><p>在大多数情况下，可以简单地从Emojipendia等来源复制表情符号。从Markdown应用程序到处的HTML和PDF文件应显示表情符号。<br>Tip：如果使用静态网站生成器，请确保将HTML页面编码插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称。</p>\n<h3 id=\"使用表情符号简码\"><a href=\"#使用表情符号简码\" class=\"headerlink\" title=\"使用表情符号简码\"></a>使用表情符号简码</h3><p>一些Markdown应用程序允许通过键入表情符号代码来插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称</p>\n<pre><code>去露营了！ :tent: 很快回来。\n\n真好笑！ :joy:\n</code></pre>\n<p>去露营了！⛺很快回来。</p>\n<p>真好笑！😂</p>\n<h2 id=\"自动网址链接\"><a href=\"#自动网址链接\" class=\"headerlink\" title=\"自动网址链接\"></a>自动网址链接</h2><p>许多Markdown处理器会自动将URL转换为链接。这意味这输入<a href=\"https://www.baidu.com/,%E5%8D%B3%E4%BD%BF%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8%E6%96%B9%E6%8B%AC%E5%8F%B7%EF%BC%8CMarkdown\">https://www.baidu.com/,即使没有使用方括号，Markdown</a>处理器也会自动将其转换为链接<br><a href=\"https://www.baidu.com/\">https://www.baidu.com/</a></p>\n<h3 id=\"禁用自动URL链接\"><a href=\"#禁用自动URL链接\" class=\"headerlink\" title=\"禁用自动URL链接\"></a>禁用自动URL链接</h3><p><code>http://www.example.com</code></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"标题语法\"><a href=\"#标题语法\" class=\"headerlink\" title=\"标题语法\"></a>标题语法</h2><p>要创建标题，需要在单词或短语前面添加井号（#）。# 的数量代表了标题的级别。例如添加三个#表示创建一个三级标题（h3）</p>","more":"<p>可选语法</p>\n<p>还可以在文本下方添加任意数量的===号来标识一级标题，或者–号来标识二级标题</p>\n<h2 id=\"段落语法\"><a href=\"#段落语法\" class=\"headerlink\" title=\"段落语法\"></a>段落语法</h2><p>要创建段落，请使用空白行将一行或多行文本进行分隔</p>\n<h2 id=\"换行语法\"><a href=\"#换行语法\" class=\"headerlink\" title=\"换行语法\"></a>换行语法</h2><p>在一行的末尾添加两个或多个空格，然后按回车健，即可创建一个换行（）</p>\n<h2 id=\"强调语法\"><a href=\"#强调语法\" class=\"headerlink\" title=\"强调语法\"></a>强调语法</h2><p>通过将文本设置为粗体或斜体来强调其重要性</p>\n<h3 id=\"粗体\"><a href=\"#粗体\" class=\"headerlink\" title=\"粗体\"></a>粗体</h3><p><strong>要加粗文本</strong>，请在单词短语的前后各添加两个星号或下划线</p>\n<h3 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h3><p><em>要用斜体显示文本，请在单词或短语前后添加一个星号或下划线。先斜体突出单词的中间部分，请在字母前后各添加一个星号，中间不要带空格。</em></p>\n<p><em><strong>要同时用粗体突出显示文本，请在单词或短语前后各添加三个星号或下划线。要加粗并用斜体显示单词或短语的中间部分，请在要突出显示的部分前后各加三个星号，中间不要带空格。</strong></em></p>\n<h2 id=\"引用语法\"><a href=\"#引用语法\" class=\"headerlink\" title=\"引用语法\"></a>引用语法</h2><blockquote>\n<p>要创建块引用，请在段落前添加一个&gt;符号<br>块引用可以包含多个段落<br>为段落之间的空白行添加一个&gt;符号</p>\n<blockquote>\n<p>块引用可以嵌套。在嵌套的段落前添加一个&gt;&gt;符号<br>#块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效<br>-块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效<br>-块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效<br>-<em><strong>块引用可以包含其他Mackdown格式的元素。并非所有元素都可以使用，你需要进行实验以查看哪些元素有效</strong></em></p>\n</blockquote>\n</blockquote>\n<h2 id=\"列表语法\"><a href=\"#列表语法\" class=\"headerlink\" title=\"列表语法\"></a>列表语法</h2><h3 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h3><ol>\n<li>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</li>\n<li>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。<ol>\n<li>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</li>\n<li>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</li>\n</ol>\n</li>\n<li>要创建有序列表，请在每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。</li>\n</ol>\n<h3 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h3><ul>\n<li><p>要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表</p>\n</li>\n<li><p>要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表</p>\n<ul>\n<li>要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符\"><a href=\"#要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符\" class=\"headerlink\" title=\"要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符\"></a>要在保留列表连续性的同时在列表中添加另一种元素，请将该元素缩进四个空格或一个制表符</h2><ul>\n<li><p>要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表</p>\n</li>\n<li><p>要创建无序列表，请在每个列表项前面添加破折号（-）、星号（*）、或加号（+）。缩进一个或多个列表项可创建嵌套列表</p>\n</li>\n<li><p>代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符\\</p>\n<pre><code>  &lt;html&gt;\n      &lt;head&gt;\n  &lt;html/&gt;\n</code></pre>\n</li>\n<li><p>代码块通常采用四个空格或一个制表符缩进。当它们被放在列表中时，请将它们缩进八个空格或两个制表符</p>\n</li>\n</ul>\n<h2 id=\"代码语法\"><a href=\"#代码语法\" class=\"headerlink\" title=\"代码语法\"></a>代码语法</h2><p><code>要将单词或短语表示为代码，请将其包裹在反引号(`)中</code></p>\n<pre><code><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;<span class=\"built_in\">head</span>&gt;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> helloword</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<hr>\n<h2 id=\"分割线语法\"><a href=\"#分割线语法\" class=\"headerlink\" title=\"分割线语法\"></a>分割线语法</h2><p>要创建分割下，请在单独一行使用三个或多个星号（***）、（—）、（___），并且不能包含其他内容</p>\n<h2 id=\"链接语法\"><a href=\"#链接语法\" class=\"headerlink\" title=\"链接语法\"></a>链接语法</h2><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选<br>超链接Markdown语法代码：<a href=\"%E8%B6%85%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80%22%E8%B6%85%E9%93%BE%E6%8E%A5title%22\">超链接显示名</a></p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个链接 [Markdown语法](https://markdown.com.cn)。</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"渲染效果\"><a href=\"#渲染效果\" class=\"headerlink\" title=\"渲染效果\"></a>渲染效果</h3><p>这是一个链接<a href=\"https://baidu.com/\" title=\"demo\">Markdown语法</a></p>\n<h3 id=\"给链接增加Title\"><a href=\"#给链接增加Title\" class=\"headerlink\" title=\"给链接增加Title\"></a>给链接增加Title</h3><p>链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔</p>\n<h3 id=\"网址和Email地址\"><a href=\"#网址和Email地址\" class=\"headerlink\" title=\"网址和Email地址\"></a>网址和Email地址</h3><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接</p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;https://baidu.com&gt;</span><br><span class=\"line\">&lt;1851353758@qq.com&gt;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p><a href=\"https://baidu.com/\">https://baidu.com</a><br><a href=\"mailto:&#x31;&#56;&#x35;&#x31;&#51;&#53;&#x33;&#x37;&#53;&#x38;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;\">&#x31;&#56;&#x35;&#x31;&#51;&#53;&#x33;&#x37;&#53;&#x38;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#109;</a></p>\n<h3 id=\"带格式化的链接\"><a href=\"#带格式化的链接\" class=\"headerlink\" title=\"带格式化的链接\"></a>带格式化的链接</h3><p>强调链接，在链接语法前后增加星号。要将链接表示为代码，请在方括号中添加反引号</p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**[加粗链接](https://baidu.com)**</span><br><span class=\"line\">*[斜体链接](https://baidu.com)*</span><br><span class=\"line\">*[`代码链接`](https://baidu.com)*</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p><strong><a href=\"https://baidu.com/\">加粗链接</a></strong><br><em><a href=\"https://baidu.com/\">斜体链接</a></em><br><em><a href=\"https://baidu.com/\"><code>代码链接</code></a></em></p>\n<h3 id=\"引用类型链接\"><a href=\"#引用类型链接\" class=\"headerlink\" title=\"引用类型链接\"></a>引用类型链接</h3><p>引用样式链接是一种特殊的链接，它使URL在Markdown中更易于显示和阅读。参考样式链接分为两部分：与文本保持内联的部分以及存储在文件中其他位置的部分，以使文本易于阅读</p>\n<h2 id=\"图片语法\"><a href=\"#图片语法\" class=\"headerlink\" title=\"图片语法\"></a>图片语法</h2><p>要添加图像，请使用感叹号（!）,然后再方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本。<br>插入图片Markdown语法代码：<code>![图片alt](图片链接 &quot;图片title&quot;)</code></p>\n<pre><code>![这是图片](/assets/img/philly-magic-garden.jpg &quot;Magic Gardens&quot;)\n</code></pre>\n<p><img src=\"/assets/img/philly-magic-garden.jpg\" alt=\"这是图片\" title=\"Magic Gardens\"></p>\n<h3 id=\"链接图片\"><a href=\"#链接图片\" class=\"headerlink\" title=\"链接图片\"></a>链接图片</h3><p>给图片增加链接，请将图像的Markdown括在方括号中，然后将链接添加在圆括号中。</p>\n<pre><code>[![沙漠中的岩石照片](/assets/img/shiprock &quot;shiprock&quot;)](https://baidu,com)\n</code></pre>\n<p> <a href=\"https://baidu.com/\"><img src=\"/assets/img/shiprock\" alt=\"沙漠中的岩石照片\" title=\"shiprock\"></a></p>\n<h2 id=\"转译字符语法\"><a href=\"#转译字符语法\" class=\"headerlink\" title=\"转译字符语法\"></a>转译字符语法</h2><p> 要显示原本用于格式化Markdown文档的字符，请在字符前面添加反斜杠字符\\</p>\n<pre><code>\\*转义字符\n</code></pre>\n<p>*转义字符</p>\n<h3 id=\"特殊字符自动转义\"><a href=\"#特殊字符自动转义\" class=\"headerlink\" title=\"特殊字符自动转义\"></a>特殊字符自动转义</h3><p>在html文件中，有两个字符需要特殊处理：&lt;和&amp;。符号用于起始标签，&amp;符号则用于标记HTML实体，如果你只是想要使用这些符号，你必须要使用实体的形式，像是<code>&amp;lt;</code>和<code>&amp;amp;</code>。<br><code>&amp;</code>符号起始很容易让写作网页文件的人感到困扰，如果你要打[AT&amp;T],你必须要写成[AT&amp;T],还得转换网址内的<code>&amp;</code>符号，如果你要链接到：</p>\n<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird\n</code></pre>\n<p>你必须要把网址转成：</p>\n<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird\n</code></pre>\n<p>才能放到链接标签的<code>href</code>属性里。不用说也知道这很容易忘记，这也可能是HTML标准检查所检查到的错误中，数量最多的。</p>\n<p>Markdown允许你直接使用这些符号，它帮你自动转义字符。如果你使用<code>&amp;</code>符号的作为HTML实体的一部分，那么它不会被转换，而在其他情况下，它则会被转换成<code>&amp;amp;</code>。所以你如果要在文件插入一个著作权的符号，你可以这样写：</p>\n<pre><code>&amp;Copy\n</code></pre>\n<p>Markdown将不会对这段文字坐修改，但是如果你这样写</p>\n<pre><code>AT&amp;T\n</code></pre>\n<p>Markdown就会将它转为</p>\n<pre><code>AT&amp;amp;T\n</code></pre>\n<p>类似的状况也会发生在&lt;符号上，因为Markdown支持行内HTML，如果你使用&lt;符号作为HTML标签的分隔符，那Markdown也不会对它做任何转换，但是如果你是写：</p>\n<pre><code>4&lt;5\n</code></pre>\n<p>Markdown将会把它转换为：</p>\n<pre><code>4&amp;lt;5\n</code></pre>\n<p>需要特别注意的是，再Markdown的块级元素和内联元素，<code>&lt;</code>和<code>&amp;</code>两个符号都会被自动转换成HTML实体，这项特性让你可以很容易地用Markdown写HTML。（再HTML语法中，你要手动把所有的<code>&lt;</code>和<code>&amp;</code>都转换为HTML实体。）</p>\n<h2 id=\"内嵌HTML标签\"><a href=\"#内嵌HTML标签\" class=\"headerlink\" title=\"内嵌HTML标签\"></a>内嵌HTML标签</h2><p>对于MARkdown涵盖范围之外的标签，都可以直接在文件里面用HTML本身。如需使用HTML，不需要额外标注这是HTML或者Markdown，只需HTML标签添加到Markdown文本中即可。</p>\n<h3 id=\"行级内联标签\"><a href=\"#行级内联标签\" class=\"headerlink\" title=\"行级内联标签\"></a>行级内联标签</h3><p>HTML的行级内联标签如<code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code>不受限制，可以在Markdown的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用Markdown格式，而采用HTML标签来格式化。例如：如果比较喜欢HTML的<code>&lt;a&gt;</code>或<code>&lt;img&gt;</code>标签，可以直接使用这些标签，而不用Markdown提供的链接或是图片语法。当你需要更改元素的属性时（例如为文本指定颜色或更改图像的宽度）、使用HTML标签更方便些。<br>HTML行级内联标签和区块标签不同，在内联标签的范围内，Markdown的语法是可以解析的。</p>\n<pre><code>this **word** is bold &lt;em&gt;word&lt;/em&gt; is italic\n</code></pre>\n<p>this <strong>word</strong> is bold <code>&lt;em&gt;</code>word<code>&lt;/em&gt;</code> is italic</p>\n<h3 id=\"区块标签\"><a href=\"#区块标签\" class=\"headerlink\" title=\"区块标签\"></a>区块标签</h3><p>区块元素比如<code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code>等标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始与结尾标签，不可以用tab或是空白来缩进。Markdown会自动识别这区块元素，避免在区块标签前后加上没有必要的<code>&lt;p&gt;</code>标签<br>例如，在Markdown文件加上一段HTML表格：</p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">This is a regular paragraph.</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;table&gt;</span><br><span class=\"line\">    &lt;tr&gt;</span><br><span class=\"line\">        &lt;td&gt;Foo&lt;/td&gt;</span><br><span class=\"line\">    &lt;/tr&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">This is another regular paragraph.</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>This is a regular paragraph.</p>\n<pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Foo&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n<p>This is another regular paragraph.<br>请注意，Markdown语法在HTML区块标签中将不会被进行处理。例如，你无法在HTML区块内使用Markdown形式<code>*强调*</code>。</p>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p>要添加表格，请使用三个或多个连字符（—）创建每列的标题，并使用管道（|）分隔每列</p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|标题1|标题2|</span><br><span class=\"line\">|----|------|</span><br><span class=\"line\">|header|大大撒旦|</span><br><span class=\"line\">|dsadsa|dsdsa|</span><br></pre></td></tr></table></figure>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"left\">标题1</th>\n<th align=\"right\">标题2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">header</td>\n<td align=\"right\">大大撒旦</td>\n</tr>\n<tr>\n<td align=\"left\">aa</td>\n<td align=\"right\">dsa</td>\n</tr>\n</tbody></table>\n<h2 id=\"脚注\"><a href=\"#脚注\" class=\"headerlink\" title=\"脚注\"></a>脚注</h2><p>脚注使您可以添加注释和参考，而不会使文档正文混乱。当您创建脚注时，带有脚注的上标数字会出现在您添加脚注参考的位置。读者可以单击链接以跳出页面底部的脚注内容。</p>\n<p>要创建脚注参考，请在方括号（[^1]）内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。标识符仅将脚注参考与脚注本身相关联-在输出中，脚注俺顺序编号。</p>\n<p>在括号内使用另一个插入符号和数字添加脚注，并用冒号和文本（[^1]：My footnote）.您不必在文档末尾添加脚注。您可以将他们放在除列表，块引号和表之类的其他元素之外的任何位置。</p>\n<pre><code><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Here&#x27;s a simple footnote,[^1] and here&#x27;s a longer one.[^bignote]</span><br><span class=\"line\"></span><br><span class=\"line\">[^1]: This is the first footnote.</span><br><span class=\"line\"></span><br><span class=\"line\">[^bignote]: Here&#x27;s one with multiple paragraphs and code.</span><br><span class=\"line\"></span><br><span class=\"line\">    Indent paragraphs to include them in the footnote.</span><br><span class=\"line\"></span><br><span class=\"line\">    `&#123; my code &#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">    Add as many paragraphs as you like.</span><br></pre></td></tr></table></figure>\n</code></pre>\n<p>Here’s a simple footnote,[^1] and here’s a longer one.[^bignote]</p>\n<p>[^1]: This is the first footnote.</p>\n<p>[^bignote]: Here’s one with multiple paragraphs and code.</p>\n<pre><code>Indent paragraphs to include them in the footnote.\n\n`&#123; my code &#125;`\n\nAdd as many paragraphs as you like.\n</code></pre>\n<h2 id=\"标题编号\"><a href=\"#标题编号\" class=\"headerlink\" title=\"标题编号\"></a>标题编号</h2><p>许多Markdown处理器支持标题的自定义ID，一些Markdown处理器会自动添加他们。添加自定义ID允许您直接链接到标题并使用css对其进行修改。要添加自定义标题ID，请在标题相同的行上用大括号括起该自定义ID。</p>\n<h3 id=\"标题一-first\"><a href=\"#标题一-first\" class=\"headerlink\" title=\"标题一 { #first }\"></a>标题一 { #first }</h3><h3 id=\"链接到标题ID（-headId）\"><a href=\"#链接到标题ID（-headId）\" class=\"headerlink\" title=\"链接到标题ID（#headId）\"></a>链接到标题ID（#headId）</h3><p>通过创建带有数字符号（#）和自定义标题ID的<code>[标准链接](#headId)</code></p>\n<h2 id=\"定义列表\"><a href=\"#定义列表\" class=\"headerlink\" title=\"定义列表\"></a>定义列表</h2><p>一些Markdown处理器允许您创建术语及其对应定义的定义列表。要创建定义列表。要在第一行键入术语。在下一行，键入一个冒号，后面跟一个空格和定义。</p>\n<pre><code>First Term\n: This is the definition of the first term.\n\nSecond Term\n: This is one definition of the second term.\n: This is another definition of the second term.\n</code></pre>\n<p> First Term<br>    : This is the definition of the first term.</p>\n<pre><code>Second Term\n: This is one definition of the second term.\n: This is another definition of the second term.\n</code></pre>\n<h2 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h2><pre><code>~~通过在单词中心放置一条水平线来删除单词。结果看起来像这样。若要删除单词，请在单词前后时候使用前后使用两个~~\n</code></pre>\n<p>  <del>通过在单词中心放置一条水平线来删除单词。结果看起来像这样。若要删除单词，请在单词前后时候使用前后使用两个</del></p>\n<h2 id=\"任务列表语法\"><a href=\"#任务列表语法\" class=\"headerlink\" title=\"任务列表语法\"></a>任务列表语法</h2><p> 任务列表使您可以创建带有复选框的项目列表。在支持列表的MArkdown应用程序中，复选程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号<code>-</code>和方括号<code>[]</code>，并在<code>[]</code>前面加上空格。要选择一个复选框，请在方括号<code>[x]</code>之间添加X。</p>\n<pre><code>- [x] 选项一\n- [ ] 选项二\n- [ ] 选项三\n</code></pre>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 选项一</li>\n<li><input disabled=\"\" type=\"checkbox\"> 选项二</li>\n<li><input disabled=\"\" type=\"checkbox\"> 选项三</li>\n</ul>\n<h2 id=\"使用Emoji表情\"><a href=\"#使用Emoji表情\" class=\"headerlink\" title=\"使用Emoji表情\"></a>使用Emoji表情</h2><p>有两种方法可以将表情符号添加到Markdown文件中：将标签符号复制并黏贴到Markdown格式的文本中，或者键入emoji shortcodes</p>\n<h3 id=\"复制和黏贴标签符号\"><a href=\"#复制和黏贴标签符号\" class=\"headerlink\" title=\"复制和黏贴标签符号\"></a>复制和黏贴标签符号</h3><p>在大多数情况下，可以简单地从Emojipendia等来源复制表情符号。从Markdown应用程序到处的HTML和PDF文件应显示表情符号。<br>Tip：如果使用静态网站生成器，请确保将HTML页面编码插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称。</p>\n<h3 id=\"使用表情符号简码\"><a href=\"#使用表情符号简码\" class=\"headerlink\" title=\"使用表情符号简码\"></a>使用表情符号简码</h3><p>一些Markdown应用程序允许通过键入表情符号代码来插入表情符号。这些以冒号开头和结尾，并包含表情符号的名称</p>\n<pre><code>去露营了！ :tent: 很快回来。\n\n真好笑！ :joy:\n</code></pre>\n<p>去露营了！⛺很快回来。</p>\n<p>真好笑！😂</p>\n<h2 id=\"自动网址链接\"><a href=\"#自动网址链接\" class=\"headerlink\" title=\"自动网址链接\"></a>自动网址链接</h2><p>许多Markdown处理器会自动将URL转换为链接。这意味这输入<a href=\"https://www.baidu.com/,%E5%8D%B3%E4%BD%BF%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8%E6%96%B9%E6%8B%AC%E5%8F%B7%EF%BC%8CMarkdown\">https://www.baidu.com/,即使没有使用方括号，Markdown</a>处理器也会自动将其转换为链接<br><a href=\"https://www.baidu.com/\">https://www.baidu.com/</a></p>\n<h3 id=\"禁用自动URL链接\"><a href=\"#禁用自动URL链接\" class=\"headerlink\" title=\"禁用自动URL链接\"></a>禁用自动URL链接</h3><p><code>http://www.example.com</code></p>"},{"title":"计分小程序介绍","date":"2022-12-12T02:36:15.000Z","typora-copy-images-to":"upload","top":99,"_content":"\n### 计分小程序介绍：计分小程序是一个打牌计分神器，麻将扑克均适用，主要分为单人计分模式和多人计分模式\n\n### 技术栈：[TS](https://www.tslang.cn/docs/handbook/basic-types.html)、[微信小程序](https://developers.weixin.qq.com/miniprogram/dev/framework/)、[Vant Wapp](https://youzan.github.io/vant-weapp/#/goods-action)、[websocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket)\n\n<!--more-->\n\n### 遇到的问题\n\n***\n\n**问题：房间计分情况实时更新到每一位成员**\n\n解决思路：选择长连接，长连接有websocket，Long Pulling， 轮询。鉴于计分操作比较频繁且需要后台主动发送信息，所以我使用的是websocket来实现长连接。小程序官方有封装好的websocket，\n\n使用websocket涉及到关闭重连和收到信息去做通知两种情况。为了更好的复用，我把websocket连接的方法initWebSocket挂在全局的app的实例上，当收到服务端发来的信息时，该实例方法会生成一个事件进行广播，我使用的是eventemitter2生成和监听事件。再全局我还写了一个实例listenEvent去监听事件，当监听到事件的时候会把传进来的方法执行一遍，传进来的方法就可以去拿数据。因为监听的事件在页面销毁后是需要同时去进行销毁的。但是在页面销毁的生命周期函数中获取不到最新的listener,所以我在使用listenEvent的时候也把当前的页面实例也传进来，然后在实例内部去改写页面的onUnload的页面生命周期函数，在页面销毁的同时去销毁当前监听的listener。执行完之后再还原页面的生命周期函数。这样就完成了监听和销毁的闭环。\n\n关于websocket断线重连，我在全局写了一个方法去争对主动关闭和被动关闭的情况分别进行处理，该方法会根据入参判断是否是主动关闭，被动关闭的话会先销毁上一个调用的定时器，然后再生成一个新的定时器去执行连接websocket的方法initWebSocket.如果是主动关闭的话就会只销毁而不再去生成定时器去连接websocket了。下面是具体的方法\n\n```typescript\n//连接websocket的方法，在页面加载之前执行这个方法连接websocket\ninitWebSocket() {\n        this.wsDisabledReconnect = false;\n        if (this.ws) {\n            return this.ws;\n        }\n        this.ws = new Promise((reslove, reject) => {\n            const ws = wx.connectSocket({\n                url: 'wss://scorex.dayangame.com:443/ws/?token=' + this.appData.token,\n            });\n            ws.onOpen(res => {\n                console.log('websocket连接', res);\n                this.timeFdScoketPing = setInterval(() => {\n                    ws?.send({ data: JSON.stringify({ event: 'ping', data: {} }) });\n                }, 3000);\n                reslove(ws);\n                //连接成功后刷新房间信息\n                this.event.emit('room.refresh', res);\n            });\n            ws.onError(res => {\n                console.log('未能正常连接', res);\n                this.onCleanSocket(this.wsDisabledReconnect);\n                reject(new Error('socket error'));\n            });\n            ws.onMessage(res => {\n                console.log('收到服务器内容：' + res.data);\n                this.event.emit('room.refresh', res);\n                console.log('emit room.refresh');\n            });\n            ws.onClose(res => {\n                console.log('WebSocket 已关闭！', res);\n                this.onCleanSocket(this.wsDisabledReconnect);\n                reject(new Error('socket close'));\n            });\n        });\n        return this.ws;\n    },\n    \n    // 判断是主动关闭wbsocket连接还是被动，主动销毁定时器，被动销毁定时器后再生成一个定时器来实现被动关闭重连\n    onCleanSocket(wsDisabledReconnect: boolean) {\n        if (this.ws) {\n            const ws = this.ws as Promise<WechatMiniprogram.SocketTask>;\n            this.ws = null;\n            ws.then(e => e.close({}));\n        }\n        clearInterval(this.timeFdScoketPing as number);\n        clearTimeout(this.timeFdSocketReconnect as number);\n        this.wsDisabledReconnect = wsDisabledReconnect;\n        if (!this.wsDisabledReconnect) {\n            this.timeFdSocketReconnect = setTimeout(() => this.initWebSocket(), 1000);\n        }\n    },\n    \n    //去监听一个事件并且在页面销毁的时候销毁监听的方法\n    listenEvent(event: string, page: WechatMiniprogram.Page.Instance<any, any>, callback: ListenerFn): void {\n        const listener = this.event.on(event, callback, { objectify: true }) as Listener;\n        const superOnUnload = page.onUnload || function () {};\n        console.log('add listener ->' + event);\n        page.onUnload = () => {\n            listener.off();\n            console.log('remove listener ->' + event);\n            superOnUnload.apply(page);\n        };\n    },    \n```\n\n### 实现算法\n\n***\n\n算法解决的问题：在计分小程序单人模式给分中最后以为玩家根据合分为零的规则自动填充好分数\n\n![image-20221213110516315](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213110516315.png)\n\n如图1.1是记录玩家分数的数据结构，我通过遍历player数据去，通过判断score是否为空来记录目前有多少个玩家还没有填分数同时计算出来目前已填分数玩家的总分。然后在遍历结束后针对只有一个玩家未填分数进行处理，把已填玩家的总分的相反数给最后一位玩家。\n\n```typescript\n autofill() {\n        let num = 0;\n        let index = 0;\n        let sum = 0;\n        const copyUsers = this.data.player;\n        for (let i = 0; i < copyUsers.length; i++) {\n            if (!copyUsers[i].score) {\n                num++;\n                index = i;\n            }\n            if (copyUsers[i].win === 1) {\n                sum += Number(copyUsers[i].score);\n            } else {\n                sum -= Number(copyUsers[i].score);\n            }\n        }\n        if (num === 1) {\n            if (sum >= 0) {\n                copyUsers[index].win = 2;\n            } else {\n                copyUsers[index].win = 1;\n            }\n            copyUsers[index].score = Math.abs(sum).toString();\n            this.setData({\n                player: copyUsers,\n            });\n        }\n    },\n```\n\n### 接口封装\n\n***\n\n```typescript\n  //使用query-string三方包\n     import { stringifyUrl, StringifiableRecord } from 'query-string';\n     \n     //配置三个开发环境对应的路由\n     const API_URLS: { [index: string]: string } = {\n         develop: 'https://scorex.dayangame.com/api',\n         trial: 'https://scorex.dayangame.com/api',\n         release: 'https://scorex.dayangame.com/api',\n     };\n     \n     //在小程序加载完毕时获取下程序的配置\n    onLaunch() {\n        const accountInfo = wx.getAccountInfoSync();\n        this.config.appid = accountInfo.miniProgram.appId;\n        this.config.env = accountInfo.miniProgram.envVersion;\n        this.config.version = accountInfo.miniProgram.version || '0.0.0';\n        this.systemInfo = wx.getSystemInfoSync();\n        this.config.url = API_URLS[this.config.env] || API_URLS.develop;\n        //获取JWT\n        try {\n            this.appData.token = wx.getStorageSync('jwt') || '';\n        } catch (e) {\n            console.error('getStorageSync[jwt] error', e);\n        }\n    },\n    \n    //封装接口\n     doApiRequest<O, T extends WechatMiniprogram.IAnyObject>(\n        method: WxRequestMethods,\n        path: string,\n        data?: T,\n        query?: StringifiableRecord,\n    ): Promise<O> {\n        //拼接好路由\n        const baseUrl = `${this.config.url}${path}`;\n        //利用stringifyUrl把路由上的参数拼接在后面\n        //queryString.stringifyUrl({url: 'https://foo.bar', query: {foo: 'bar'}});  \n        //=> 'https://foo.bar?foo=bar'\n        const url = stringifyUrl({ url: baseUrl, query }, { arrayFormat: 'index' });\n        const header: WechatMiniprogram.IAnyObject = {\n            'x-platform': ['wxmp', this.config.appid, this.config.env, this.config.version].join('/'),\n            // 'x-debug-user': '7b2ee6da-1de7-406c-bf64-5e4afbbc31f1',\n        };\n        if (this.appData.token) {\n            //在每次请求接口的时候都会带上token值，如果把token直接放在cookie里面会有跨域的问题，所以这里我把token放在http协议头上，避免跨域的问题\n            header.Authorization = `Bearer ${this.appData.token}`;\n        }\n        return new Promise((reslove, reject) => {\n            wx.request({\n                url,\n                header,\n                method,\n                data,\n                dataType: 'json',\n                success: result => {\n                    if (result.statusCode != 200 && result.statusCode != 201) {\n                        return reject(new Error(`request err: ${result.statusCode}`));\n                    }\n                    const data: { code: number; message: string; resource: O } = result.data as any;\n                    if (data.code) {\n                        return reject(new Error(data.message));\n                    } else {\n                        reslove(data.resource);\n                    }\n                },\n                fail: e => {\n                    reject(new Error(e.errMsg));\n                },\n            });\n        });\n    },\n    doApiPostRequest<O, T extends WechatMiniprogram.IAnyObject>(\n        path: string,\n        data?: T,\n        query?: StringifiableRecord,\n    ): Promise<O> {\n        return this.doApiRequest('POST', path, data, query);\n    },\n    doApiPutRequest<O, T extends WechatMiniprogram.IAnyObject>(\n        path: string,\n        data?: T,\n        query?: StringifiableRecord,\n    ): Promise<O> {\n        return this.doApiRequest('PUT', path, data, query);\n    },\n    doApiDeleteRequest<O, T extends WechatMiniprogram.IAnyObject>(\n        path: string,\n        data?: T,\n        query?: StringifiableRecord,\n    ): Promise<O> {\n        return this.doApiRequest('DELETE', path, data, query);\n    },\n    doApiGetRequest<O>(path: string, query?: StringifiableRecord): Promise<O> {\n        return this.doApiRequest('GET', path, undefined, query);\n    },\n\n```\n\n### 思考\n\n***\n\n```typescript\nconst a = [1,2,3,4]\nconst b = {a: 1,b: 2};\n//forEach使用起来更加简洁\na.forEach(i => {\nconsole.log(i);\n});\n//for in一般用来遍历对象\nfor (const i in b) {\nconsole.log(i);\n}\n//for of可以遍历类数组结构\nfor (const i of a) {\nconsole.log(i);\n}\n//map遍历数组,会返回一个新的数组\na.map(i => {\nconsole.log(i);\n});\n```\n\n### 微信小程序登录流程\n\n***\n\n```typescript\n   export async function doAuthJsCode(): Promise<IWechatLogin> {\n        const result = await wx.login();\n        return app.doApiPostRequest('/wechat/auth/jscode', { code: result.code });\n    }\n    //先调用wx.login获取code，通过doAuthJsCode接口把code传给后端，后端通过code向微信客户端获取session_key和openid。然后加密返回给客户端，客户端保存在全局。\n    const data = await doAuthJsCode();\n    this.setData({\n       loginInfo: data,\n    });\n    //当用户点击微信授权的时候，调用getUserProfile方法，通过微信提供的getUserProfile方法拿到用户的信息，，注意这里的用户信息还是加密的，之后把加密的用户信息和登录的加密信息一起返回给后端，后端拿到信息后就会注册一个用户，并且为这个用户生成一个token值返回给客户端，客户端把token值放到http的请求头上，每次调用接口的时候都要带上这个token值。\n    getUserProfile() {\n        if (!this.data.loginInfo) {\n            return false;\n        }\n        wx.getUserProfile({\n            desc: '展示用户信息',\n            success: async res => {\n                const encryptedData = res.encryptedData || '';\n                const iv = res.iv || '';\n                const session = await requestWechatMobileLogin({\n                    encryptedData,\n                    iv,\n                    loginEncryptedData: this.data.loginInfo.encryptedData,\n                    loginIv: this.data.loginInfo.iv,\n                });\n                await app.setJwt(session.jwt);\n                const userInfo = await app.doApiGetRequest<UserInfo>('/user');\n                this.setData({ hasToken: app.hasToken(), userInfo });\n                await app.setUserInfo(userInfo);\n                this.getAllRooms();\n                return true;\n            },\n        });\n    },\n\n```\n\n### 记录列表翻页\n\n***\n\n```typescript\n   //先定义一个变量去记录当前页有多少条数据，每次滚轮触底的时候会触发小程序的生命周期函数onReachBottom，在里面给size加10，然后再去调用一次接口\n    onReachBottom() {\n        let size = this.data.size;\n        size += 10;\n        this.setData({\n            size,\n        });\n        this.getAllRooms();\n    },\n```\n\n### js中的同步异步问题\n\n***\n\njs是一个单线程的语言，很多地方都需要去异步去操作。不然会产生堵塞，导致有些地方拿不到最新的信息。所以作为一个合格的js开发人员，一定要有一个很好的异步思维。我在项目中好几个应该使用异步的地方没有异步去执行。导致没有拿到最新的信息，产生了一些bug。比如我在结束房间的时候会去调用一个结算房间的接口，然后我会跳转到房间结算的页面，由于没有异步，导致我在结算页面查询房间信息的时候房间还是处于未结算的状态。具体的一些异步方法有`promise`,`async` `await`，`setTimeout`,`setInterval`\n\n### 时间格式转换\n\n***\n\n由于微信小程序不支持moment去做时间格式的转换，不然的话的会在打包的时候报错，所以我手写了一个方法去实现时间格式化，具体是利用Date自带的一些api很容易去实现。\n\n```typescript\nconst formatServerTime = (str: string) => {\n    const date = new Date(str);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const hour = date.getHours();\n    const minute = date.getMinutes();\n    const second = date.getSeconds();\n    return [year, month, day].map(formatNumber).join('-') + ' ' + [hour, minute, second].map(formatNumber).join(':');\n};\n```\n","source":"_posts/recode.md","raw":"---\ntitle: 计分小程序介绍\ndate: 2022-12-12 10:36:15\ntags: 总结\ncategories: 前端\ntypora-copy-images-to: upload\ntop: 99\n---\n\n### 计分小程序介绍：计分小程序是一个打牌计分神器，麻将扑克均适用，主要分为单人计分模式和多人计分模式\n\n### 技术栈：[TS](https://www.tslang.cn/docs/handbook/basic-types.html)、[微信小程序](https://developers.weixin.qq.com/miniprogram/dev/framework/)、[Vant Wapp](https://youzan.github.io/vant-weapp/#/goods-action)、[websocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket)\n\n<!--more-->\n\n### 遇到的问题\n\n***\n\n**问题：房间计分情况实时更新到每一位成员**\n\n解决思路：选择长连接，长连接有websocket，Long Pulling， 轮询。鉴于计分操作比较频繁且需要后台主动发送信息，所以我使用的是websocket来实现长连接。小程序官方有封装好的websocket，\n\n使用websocket涉及到关闭重连和收到信息去做通知两种情况。为了更好的复用，我把websocket连接的方法initWebSocket挂在全局的app的实例上，当收到服务端发来的信息时，该实例方法会生成一个事件进行广播，我使用的是eventemitter2生成和监听事件。再全局我还写了一个实例listenEvent去监听事件，当监听到事件的时候会把传进来的方法执行一遍，传进来的方法就可以去拿数据。因为监听的事件在页面销毁后是需要同时去进行销毁的。但是在页面销毁的生命周期函数中获取不到最新的listener,所以我在使用listenEvent的时候也把当前的页面实例也传进来，然后在实例内部去改写页面的onUnload的页面生命周期函数，在页面销毁的同时去销毁当前监听的listener。执行完之后再还原页面的生命周期函数。这样就完成了监听和销毁的闭环。\n\n关于websocket断线重连，我在全局写了一个方法去争对主动关闭和被动关闭的情况分别进行处理，该方法会根据入参判断是否是主动关闭，被动关闭的话会先销毁上一个调用的定时器，然后再生成一个新的定时器去执行连接websocket的方法initWebSocket.如果是主动关闭的话就会只销毁而不再去生成定时器去连接websocket了。下面是具体的方法\n\n```typescript\n//连接websocket的方法，在页面加载之前执行这个方法连接websocket\ninitWebSocket() {\n        this.wsDisabledReconnect = false;\n        if (this.ws) {\n            return this.ws;\n        }\n        this.ws = new Promise((reslove, reject) => {\n            const ws = wx.connectSocket({\n                url: 'wss://scorex.dayangame.com:443/ws/?token=' + this.appData.token,\n            });\n            ws.onOpen(res => {\n                console.log('websocket连接', res);\n                this.timeFdScoketPing = setInterval(() => {\n                    ws?.send({ data: JSON.stringify({ event: 'ping', data: {} }) });\n                }, 3000);\n                reslove(ws);\n                //连接成功后刷新房间信息\n                this.event.emit('room.refresh', res);\n            });\n            ws.onError(res => {\n                console.log('未能正常连接', res);\n                this.onCleanSocket(this.wsDisabledReconnect);\n                reject(new Error('socket error'));\n            });\n            ws.onMessage(res => {\n                console.log('收到服务器内容：' + res.data);\n                this.event.emit('room.refresh', res);\n                console.log('emit room.refresh');\n            });\n            ws.onClose(res => {\n                console.log('WebSocket 已关闭！', res);\n                this.onCleanSocket(this.wsDisabledReconnect);\n                reject(new Error('socket close'));\n            });\n        });\n        return this.ws;\n    },\n    \n    // 判断是主动关闭wbsocket连接还是被动，主动销毁定时器，被动销毁定时器后再生成一个定时器来实现被动关闭重连\n    onCleanSocket(wsDisabledReconnect: boolean) {\n        if (this.ws) {\n            const ws = this.ws as Promise<WechatMiniprogram.SocketTask>;\n            this.ws = null;\n            ws.then(e => e.close({}));\n        }\n        clearInterval(this.timeFdScoketPing as number);\n        clearTimeout(this.timeFdSocketReconnect as number);\n        this.wsDisabledReconnect = wsDisabledReconnect;\n        if (!this.wsDisabledReconnect) {\n            this.timeFdSocketReconnect = setTimeout(() => this.initWebSocket(), 1000);\n        }\n    },\n    \n    //去监听一个事件并且在页面销毁的时候销毁监听的方法\n    listenEvent(event: string, page: WechatMiniprogram.Page.Instance<any, any>, callback: ListenerFn): void {\n        const listener = this.event.on(event, callback, { objectify: true }) as Listener;\n        const superOnUnload = page.onUnload || function () {};\n        console.log('add listener ->' + event);\n        page.onUnload = () => {\n            listener.off();\n            console.log('remove listener ->' + event);\n            superOnUnload.apply(page);\n        };\n    },    \n```\n\n### 实现算法\n\n***\n\n算法解决的问题：在计分小程序单人模式给分中最后以为玩家根据合分为零的规则自动填充好分数\n\n![image-20221213110516315](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213110516315.png)\n\n如图1.1是记录玩家分数的数据结构，我通过遍历player数据去，通过判断score是否为空来记录目前有多少个玩家还没有填分数同时计算出来目前已填分数玩家的总分。然后在遍历结束后针对只有一个玩家未填分数进行处理，把已填玩家的总分的相反数给最后一位玩家。\n\n```typescript\n autofill() {\n        let num = 0;\n        let index = 0;\n        let sum = 0;\n        const copyUsers = this.data.player;\n        for (let i = 0; i < copyUsers.length; i++) {\n            if (!copyUsers[i].score) {\n                num++;\n                index = i;\n            }\n            if (copyUsers[i].win === 1) {\n                sum += Number(copyUsers[i].score);\n            } else {\n                sum -= Number(copyUsers[i].score);\n            }\n        }\n        if (num === 1) {\n            if (sum >= 0) {\n                copyUsers[index].win = 2;\n            } else {\n                copyUsers[index].win = 1;\n            }\n            copyUsers[index].score = Math.abs(sum).toString();\n            this.setData({\n                player: copyUsers,\n            });\n        }\n    },\n```\n\n### 接口封装\n\n***\n\n```typescript\n  //使用query-string三方包\n     import { stringifyUrl, StringifiableRecord } from 'query-string';\n     \n     //配置三个开发环境对应的路由\n     const API_URLS: { [index: string]: string } = {\n         develop: 'https://scorex.dayangame.com/api',\n         trial: 'https://scorex.dayangame.com/api',\n         release: 'https://scorex.dayangame.com/api',\n     };\n     \n     //在小程序加载完毕时获取下程序的配置\n    onLaunch() {\n        const accountInfo = wx.getAccountInfoSync();\n        this.config.appid = accountInfo.miniProgram.appId;\n        this.config.env = accountInfo.miniProgram.envVersion;\n        this.config.version = accountInfo.miniProgram.version || '0.0.0';\n        this.systemInfo = wx.getSystemInfoSync();\n        this.config.url = API_URLS[this.config.env] || API_URLS.develop;\n        //获取JWT\n        try {\n            this.appData.token = wx.getStorageSync('jwt') || '';\n        } catch (e) {\n            console.error('getStorageSync[jwt] error', e);\n        }\n    },\n    \n    //封装接口\n     doApiRequest<O, T extends WechatMiniprogram.IAnyObject>(\n        method: WxRequestMethods,\n        path: string,\n        data?: T,\n        query?: StringifiableRecord,\n    ): Promise<O> {\n        //拼接好路由\n        const baseUrl = `${this.config.url}${path}`;\n        //利用stringifyUrl把路由上的参数拼接在后面\n        //queryString.stringifyUrl({url: 'https://foo.bar', query: {foo: 'bar'}});  \n        //=> 'https://foo.bar?foo=bar'\n        const url = stringifyUrl({ url: baseUrl, query }, { arrayFormat: 'index' });\n        const header: WechatMiniprogram.IAnyObject = {\n            'x-platform': ['wxmp', this.config.appid, this.config.env, this.config.version].join('/'),\n            // 'x-debug-user': '7b2ee6da-1de7-406c-bf64-5e4afbbc31f1',\n        };\n        if (this.appData.token) {\n            //在每次请求接口的时候都会带上token值，如果把token直接放在cookie里面会有跨域的问题，所以这里我把token放在http协议头上，避免跨域的问题\n            header.Authorization = `Bearer ${this.appData.token}`;\n        }\n        return new Promise((reslove, reject) => {\n            wx.request({\n                url,\n                header,\n                method,\n                data,\n                dataType: 'json',\n                success: result => {\n                    if (result.statusCode != 200 && result.statusCode != 201) {\n                        return reject(new Error(`request err: ${result.statusCode}`));\n                    }\n                    const data: { code: number; message: string; resource: O } = result.data as any;\n                    if (data.code) {\n                        return reject(new Error(data.message));\n                    } else {\n                        reslove(data.resource);\n                    }\n                },\n                fail: e => {\n                    reject(new Error(e.errMsg));\n                },\n            });\n        });\n    },\n    doApiPostRequest<O, T extends WechatMiniprogram.IAnyObject>(\n        path: string,\n        data?: T,\n        query?: StringifiableRecord,\n    ): Promise<O> {\n        return this.doApiRequest('POST', path, data, query);\n    },\n    doApiPutRequest<O, T extends WechatMiniprogram.IAnyObject>(\n        path: string,\n        data?: T,\n        query?: StringifiableRecord,\n    ): Promise<O> {\n        return this.doApiRequest('PUT', path, data, query);\n    },\n    doApiDeleteRequest<O, T extends WechatMiniprogram.IAnyObject>(\n        path: string,\n        data?: T,\n        query?: StringifiableRecord,\n    ): Promise<O> {\n        return this.doApiRequest('DELETE', path, data, query);\n    },\n    doApiGetRequest<O>(path: string, query?: StringifiableRecord): Promise<O> {\n        return this.doApiRequest('GET', path, undefined, query);\n    },\n\n```\n\n### 思考\n\n***\n\n```typescript\nconst a = [1,2,3,4]\nconst b = {a: 1,b: 2};\n//forEach使用起来更加简洁\na.forEach(i => {\nconsole.log(i);\n});\n//for in一般用来遍历对象\nfor (const i in b) {\nconsole.log(i);\n}\n//for of可以遍历类数组结构\nfor (const i of a) {\nconsole.log(i);\n}\n//map遍历数组,会返回一个新的数组\na.map(i => {\nconsole.log(i);\n});\n```\n\n### 微信小程序登录流程\n\n***\n\n```typescript\n   export async function doAuthJsCode(): Promise<IWechatLogin> {\n        const result = await wx.login();\n        return app.doApiPostRequest('/wechat/auth/jscode', { code: result.code });\n    }\n    //先调用wx.login获取code，通过doAuthJsCode接口把code传给后端，后端通过code向微信客户端获取session_key和openid。然后加密返回给客户端，客户端保存在全局。\n    const data = await doAuthJsCode();\n    this.setData({\n       loginInfo: data,\n    });\n    //当用户点击微信授权的时候，调用getUserProfile方法，通过微信提供的getUserProfile方法拿到用户的信息，，注意这里的用户信息还是加密的，之后把加密的用户信息和登录的加密信息一起返回给后端，后端拿到信息后就会注册一个用户，并且为这个用户生成一个token值返回给客户端，客户端把token值放到http的请求头上，每次调用接口的时候都要带上这个token值。\n    getUserProfile() {\n        if (!this.data.loginInfo) {\n            return false;\n        }\n        wx.getUserProfile({\n            desc: '展示用户信息',\n            success: async res => {\n                const encryptedData = res.encryptedData || '';\n                const iv = res.iv || '';\n                const session = await requestWechatMobileLogin({\n                    encryptedData,\n                    iv,\n                    loginEncryptedData: this.data.loginInfo.encryptedData,\n                    loginIv: this.data.loginInfo.iv,\n                });\n                await app.setJwt(session.jwt);\n                const userInfo = await app.doApiGetRequest<UserInfo>('/user');\n                this.setData({ hasToken: app.hasToken(), userInfo });\n                await app.setUserInfo(userInfo);\n                this.getAllRooms();\n                return true;\n            },\n        });\n    },\n\n```\n\n### 记录列表翻页\n\n***\n\n```typescript\n   //先定义一个变量去记录当前页有多少条数据，每次滚轮触底的时候会触发小程序的生命周期函数onReachBottom，在里面给size加10，然后再去调用一次接口\n    onReachBottom() {\n        let size = this.data.size;\n        size += 10;\n        this.setData({\n            size,\n        });\n        this.getAllRooms();\n    },\n```\n\n### js中的同步异步问题\n\n***\n\njs是一个单线程的语言，很多地方都需要去异步去操作。不然会产生堵塞，导致有些地方拿不到最新的信息。所以作为一个合格的js开发人员，一定要有一个很好的异步思维。我在项目中好几个应该使用异步的地方没有异步去执行。导致没有拿到最新的信息，产生了一些bug。比如我在结束房间的时候会去调用一个结算房间的接口，然后我会跳转到房间结算的页面，由于没有异步，导致我在结算页面查询房间信息的时候房间还是处于未结算的状态。具体的一些异步方法有`promise`,`async` `await`，`setTimeout`,`setInterval`\n\n### 时间格式转换\n\n***\n\n由于微信小程序不支持moment去做时间格式的转换，不然的话的会在打包的时候报错，所以我手写了一个方法去实现时间格式化，具体是利用Date自带的一些api很容易去实现。\n\n```typescript\nconst formatServerTime = (str: string) => {\n    const date = new Date(str);\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const hour = date.getHours();\n    const minute = date.getMinutes();\n    const second = date.getSeconds();\n    return [year, month, day].map(formatNumber).join('-') + ' ' + [hour, minute, second].map(formatNumber).join(':');\n};\n```\n","slug":"recode","published":1,"updated":"2023-02-16T09:53:27.874Z","_id":"clc9yxb8w000e50utf9q448hi","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"计分小程序介绍：计分小程序是一个打牌计分神器，麻将扑克均适用，主要分为单人计分模式和多人计分模式\"><a href=\"#计分小程序介绍：计分小程序是一个打牌计分神器，麻将扑克均适用，主要分为单人计分模式和多人计分模式\" class=\"headerlink\" title=\"计分小程序介绍：计分小程序是一个打牌计分神器，麻将扑克均适用，主要分为单人计分模式和多人计分模式\"></a>计分小程序介绍：计分小程序是一个打牌计分神器，麻将扑克均适用，主要分为单人计分模式和多人计分模式</h3><h3 id=\"技术栈：TS、微信小程序、Vant-Wapp、websocket\"><a href=\"#技术栈：TS、微信小程序、Vant-Wapp、websocket\" class=\"headerlink\" title=\"技术栈：TS、微信小程序、Vant Wapp、websocket\"></a>技术栈：<a href=\"https://www.tslang.cn/docs/handbook/basic-types.html\">TS</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/\">微信小程序</a>、<a href=\"https://youzan.github.io/vant-weapp/#/goods-action\">Vant Wapp</a>、<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\">websocket</a></h3><span id=\"more\"></span>\n\n<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><hr>\n<p><strong>问题：房间计分情况实时更新到每一位成员</strong></p>\n<p>解决思路：选择长连接，长连接有websocket，Long Pulling， 轮询。鉴于计分操作比较频繁且需要后台主动发送信息，所以我使用的是websocket来实现长连接。小程序官方有封装好的websocket，</p>\n<p>使用websocket涉及到关闭重连和收到信息去做通知两种情况。为了更好的复用，我把websocket连接的方法initWebSocket挂在全局的app的实例上，当收到服务端发来的信息时，该实例方法会生成一个事件进行广播，我使用的是eventemitter2生成和监听事件。再全局我还写了一个实例listenEvent去监听事件，当监听到事件的时候会把传进来的方法执行一遍，传进来的方法就可以去拿数据。因为监听的事件在页面销毁后是需要同时去进行销毁的。但是在页面销毁的生命周期函数中获取不到最新的listener,所以我在使用listenEvent的时候也把当前的页面实例也传进来，然后在实例内部去改写页面的onUnload的页面生命周期函数，在页面销毁的同时去销毁当前监听的listener。执行完之后再还原页面的生命周期函数。这样就完成了监听和销毁的闭环。</p>\n<p>关于websocket断线重连，我在全局写了一个方法去争对主动关闭和被动关闭的情况分别进行处理，该方法会根据入参判断是否是主动关闭，被动关闭的话会先销毁上一个调用的定时器，然后再生成一个新的定时器去执行连接websocket的方法initWebSocket.如果是主动关闭的话就会只销毁而不再去生成定时器去连接websocket了。下面是具体的方法</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//连接websocket的方法，在页面加载之前执行这个方法连接websocket</span></span><br><span class=\"line\"><span class=\"title function_\">initWebSocket</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">wsDisabledReconnect</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> ws = wx.<span class=\"title function_\">connectSocket</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">url</span>: <span class=\"string\">&#x27;wss://scorex.dayangame.com:443/ws/?token=&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">appData</span>.<span class=\"property\">token</span>,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            ws.<span class=\"title function_\">onOpen</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;websocket连接&#x27;</span>, res);</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">timeFdScoketPing</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                    ws?.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">data</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">event</span>: <span class=\"string\">&#x27;ping&#x27;</span>, <span class=\"attr\">data</span>: &#123;&#125; &#125;) &#125;);</span><br><span class=\"line\">                &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">                <span class=\"title function_\">reslove</span>(ws);</span><br><span class=\"line\">                <span class=\"comment\">//连接成功后刷新房间信息</span></span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">event</span>.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;room.refresh&#x27;</span>, res);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            ws.<span class=\"title function_\">onError</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;未能正常连接&#x27;</span>, res);</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">onCleanSocket</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">wsDisabledReconnect</span>);</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;socket error&#x27;</span>));</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            ws.<span class=\"title function_\">onMessage</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;收到服务器内容：&#x27;</span> + res.<span class=\"property\">data</span>);</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">event</span>.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;room.refresh&#x27;</span>, res);</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;emit room.refresh&#x27;</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            ws.<span class=\"title function_\">onClose</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;WebSocket 已关闭！&#x27;</span>, res);</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">onCleanSocket</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">wsDisabledReconnect</span>);</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;socket close&#x27;</span>));</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 判断是主动关闭wbsocket连接还是被动，主动销毁定时器，被动销毁定时器后再生成一个定时器来实现被动关闭重连</span></span><br><span class=\"line\">    <span class=\"title function_\">onCleanSocket</span>(<span class=\"params\">wsDisabledReconnect: <span class=\"built_in\">boolean</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> ws = <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span> <span class=\"keyword\">as</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">WechatMiniprogram</span>.<span class=\"property\">SocketTask</span>&gt;;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            ws.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e.<span class=\"title function_\">close</span>(&#123;&#125;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timeFdScoketPing</span> <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>);</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timeFdSocketReconnect</span> <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">wsDisabledReconnect</span> = wsDisabledReconnect;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">wsDisabledReconnect</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">timeFdSocketReconnect</span> = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">initWebSocket</span>(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//去监听一个事件并且在页面销毁的时候销毁监听的方法</span></span><br><span class=\"line\">    <span class=\"title function_\">listenEvent</span>(<span class=\"attr\">event</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">page</span>: <span class=\"title class_\">WechatMiniprogram</span>.<span class=\"property\">Page</span>.<span class=\"property\">Instance</span>&lt;<span class=\"built_in\">any</span>, <span class=\"built_in\">any</span>&gt;, <span class=\"attr\">callback</span>: <span class=\"title class_\">ListenerFn</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> listener = <span class=\"variable language_\">this</span>.<span class=\"property\">event</span>.<span class=\"title function_\">on</span>(event, callback, &#123; <span class=\"attr\">objectify</span>: <span class=\"literal\">true</span> &#125;) <span class=\"keyword\">as</span> <span class=\"title class_\">Listener</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> superOnUnload = page.<span class=\"property\">onUnload</span> || <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;add listener -&gt;&#x27;</span> + event);</span><br><span class=\"line\">        page.<span class=\"property\">onUnload</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            listener.<span class=\"title function_\">off</span>();</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;remove listener -&gt;&#x27;</span> + event);</span><br><span class=\"line\">            superOnUnload.<span class=\"title function_\">apply</span>(page);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,    </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现算法\"><a href=\"#实现算法\" class=\"headerlink\" title=\"实现算法\"></a>实现算法</h3><hr>\n<p>算法解决的问题：在计分小程序单人模式给分中最后以为玩家根据合分为零的规则自动填充好分数</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213110516315.png\" alt=\"image-20221213110516315\"></p>\n<p>如图1.1是记录玩家分数的数据结构，我通过遍历player数据去，通过判断score是否为空来记录目前有多少个玩家还没有填分数同时计算出来目前已填分数玩家的总分。然后在遍历结束后针对只有一个玩家未填分数进行处理，把已填玩家的总分的相反数给最后一位玩家。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">autofill</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> copyUsers = <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">player</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copyUsers.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!copyUsers[i].<span class=\"property\">score</span>) &#123;</span><br><span class=\"line\">               num++;</span><br><span class=\"line\">               index = i;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (copyUsers[i].<span class=\"property\">win</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">               sum += <span class=\"title class_\">Number</span>(copyUsers[i].<span class=\"property\">score</span>);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               sum -= <span class=\"title class_\">Number</span>(copyUsers[i].<span class=\"property\">score</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (num === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (sum &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               copyUsers[index].<span class=\"property\">win</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               copyUsers[index].<span class=\"property\">win</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           copyUsers[index].<span class=\"property\">score</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(sum).<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">               <span class=\"attr\">player</span>: copyUsers,</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"接口封装\"><a href=\"#接口封装\" class=\"headerlink\" title=\"接口封装\"></a>接口封装</h3><hr>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用query-string三方包</span></span><br><span class=\"line\">   <span class=\"keyword\">import</span> &#123; stringifyUrl, <span class=\"title class_\">StringifiableRecord</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;query-string&#x27;</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//配置三个开发环境对应的路由</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> <span class=\"attr\">API_URLS</span>: &#123; [<span class=\"attr\">index</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span> &#125; = &#123;</span><br><span class=\"line\">       <span class=\"attr\">develop</span>: <span class=\"string\">&#x27;https://scorex.dayangame.com/api&#x27;</span>,</span><br><span class=\"line\">       <span class=\"attr\">trial</span>: <span class=\"string\">&#x27;https://scorex.dayangame.com/api&#x27;</span>,</span><br><span class=\"line\">       <span class=\"attr\">release</span>: <span class=\"string\">&#x27;https://scorex.dayangame.com/api&#x27;</span>,</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//在小程序加载完毕时获取下程序的配置</span></span><br><span class=\"line\">  <span class=\"title function_\">onLaunch</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> accountInfo = wx.<span class=\"title function_\">getAccountInfoSync</span>();</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">appid</span> = accountInfo.<span class=\"property\">miniProgram</span>.<span class=\"property\">appId</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">env</span> = accountInfo.<span class=\"property\">miniProgram</span>.<span class=\"property\">envVersion</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">version</span> = accountInfo.<span class=\"property\">miniProgram</span>.<span class=\"property\">version</span> || <span class=\"string\">&#x27;0.0.0&#x27;</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">systemInfo</span> = wx.<span class=\"title function_\">getSystemInfoSync</span>();</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">url</span> = <span class=\"variable constant_\">API_URLS</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">env</span>] || <span class=\"variable constant_\">API_URLS</span>.<span class=\"property\">develop</span>;</span><br><span class=\"line\">      <span class=\"comment\">//获取JWT</span></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">appData</span>.<span class=\"property\">token</span> = wx.<span class=\"title function_\">getStorageSync</span>(<span class=\"string\">&#x27;jwt&#x27;</span>) || <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;getStorageSync[jwt] error&#x27;</span>, e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//封装接口</span></span><br><span class=\"line\">   doApiRequest&lt;O, T <span class=\"keyword\">extends</span> <span class=\"title class_\">WechatMiniprogram</span>.<span class=\"property\">IAnyObject</span>&gt;(</span><br><span class=\"line\">      <span class=\"attr\">method</span>: <span class=\"title class_\">WxRequestMethods</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">      data?: T,</span><br><span class=\"line\">      query?: <span class=\"title class_\">StringifiableRecord</span>,</span><br><span class=\"line\">  ): <span class=\"title class_\">Promise</span>&lt;O&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">//拼接好路由</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> baseUrl = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.config.url&#125;</span><span class=\"subst\">$&#123;path&#125;</span>`</span>;</span><br><span class=\"line\">      <span class=\"comment\">//利用stringifyUrl把路由上的参数拼接在后面</span></span><br><span class=\"line\">      <span class=\"comment\">//queryString.stringifyUrl(&#123;url: &#x27;https://foo.bar&#x27;, query: &#123;foo: &#x27;bar&#x27;&#125;&#125;);  </span></span><br><span class=\"line\">      <span class=\"comment\">//=&gt; &#x27;https://foo.bar?foo=bar&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> url = <span class=\"title function_\">stringifyUrl</span>(&#123; <span class=\"attr\">url</span>: baseUrl, query &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;index&#x27;</span> &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">header</span>: <span class=\"title class_\">WechatMiniprogram</span>.<span class=\"property\">IAnyObject</span> = &#123;</span><br><span class=\"line\">          <span class=\"string\">&#x27;x-platform&#x27;</span>: [<span class=\"string\">&#x27;wxmp&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">appid</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">env</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">version</span>].<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;/&#x27;</span>),</span><br><span class=\"line\">          <span class=\"comment\">// &#x27;x-debug-user&#x27;: &#x27;7b2ee6da-1de7-406c-bf64-5e4afbbc31f1&#x27;,</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">appData</span>.<span class=\"property\">token</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//在每次请求接口的时候都会带上token值，如果把token直接放在cookie里面会有跨域的问题，所以这里我把token放在http协议头上，避免跨域的问题</span></span><br><span class=\"line\">          header.<span class=\"property\">Authorization</span> = <span class=\"string\">`Bearer <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.appData.token&#125;</span>`</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          wx.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">              url,</span><br><span class=\"line\">              header,</span><br><span class=\"line\">              method,</span><br><span class=\"line\">              data,</span><br><span class=\"line\">              <span class=\"attr\">dataType</span>: <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (result.<span class=\"property\">statusCode</span> != <span class=\"number\">200</span> &amp;&amp; result.<span class=\"property\">statusCode</span> != <span class=\"number\">201</span>) &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`request err: <span class=\"subst\">$&#123;result.statusCode&#125;</span>`</span>));</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  <span class=\"keyword\">const</span> <span class=\"attr\">data</span>: &#123; <span class=\"attr\">code</span>: <span class=\"built_in\">number</span>; <span class=\"attr\">message</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">resource</span>: O &#125; = result.<span class=\"property\">data</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (data.<span class=\"property\">code</span>) &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(data.<span class=\"property\">message</span>));</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                      <span class=\"title function_\">reslove</span>(data.<span class=\"property\">resource</span>);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              <span class=\"attr\">fail</span>: <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">                  <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(e.<span class=\"property\">errMsg</span>));</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  doApiPostRequest&lt;O, T <span class=\"keyword\">extends</span> <span class=\"title class_\">WechatMiniprogram</span>.<span class=\"property\">IAnyObject</span>&gt;(</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">      data?: T,</span><br><span class=\"line\">      query?: <span class=\"title class_\">StringifiableRecord</span>,</span><br><span class=\"line\">  ): <span class=\"title class_\">Promise</span>&lt;O&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">doApiRequest</span>(<span class=\"string\">&#x27;POST&#x27;</span>, path, data, query);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  doApiPutRequest&lt;O, T <span class=\"keyword\">extends</span> <span class=\"title class_\">WechatMiniprogram</span>.<span class=\"property\">IAnyObject</span>&gt;(</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">      data?: T,</span><br><span class=\"line\">      query?: <span class=\"title class_\">StringifiableRecord</span>,</span><br><span class=\"line\">  ): <span class=\"title class_\">Promise</span>&lt;O&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">doApiRequest</span>(<span class=\"string\">&#x27;PUT&#x27;</span>, path, data, query);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  doApiDeleteRequest&lt;O, T <span class=\"keyword\">extends</span> <span class=\"title class_\">WechatMiniprogram</span>.<span class=\"property\">IAnyObject</span>&gt;(</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">      data?: T,</span><br><span class=\"line\">      query?: <span class=\"title class_\">StringifiableRecord</span>,</span><br><span class=\"line\">  ): <span class=\"title class_\">Promise</span>&lt;O&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">doApiRequest</span>(<span class=\"string\">&#x27;DELETE&#x27;</span>, path, data, query);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  doApiGetRequest&lt;O&gt;(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, query?: <span class=\"title class_\">StringifiableRecord</span>): <span class=\"title class_\">Promise</span>&lt;O&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">doApiRequest</span>(<span class=\"string\">&#x27;GET&#x27;</span>, path, <span class=\"literal\">undefined</span>, query);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><hr>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>,<span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//forEach使用起来更加简洁</span></span><br><span class=\"line\">a.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//for in一般用来遍历对象</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i <span class=\"keyword\">in</span> b) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//for of可以遍历类数组结构</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i <span class=\"keyword\">of</span> a) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//map遍历数组,会返回一个新的数组</span></span><br><span class=\"line\">a.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"微信小程序登录流程\"><a href=\"#微信小程序登录流程\" class=\"headerlink\" title=\"微信小程序登录流程\"></a>微信小程序登录流程</h3><hr>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">doAuthJsCode</span>(<span class=\"params\"></span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">IWechatLogin</span>&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> wx.<span class=\"title function_\">login</span>();</span><br><span class=\"line\">     <span class=\"keyword\">return</span> app.<span class=\"title function_\">doApiPostRequest</span>(<span class=\"string\">&#x27;/wechat/auth/jscode&#x27;</span>, &#123; <span class=\"attr\">code</span>: result.<span class=\"property\">code</span> &#125;);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">//先调用wx.login获取code，通过doAuthJsCode接口把code传给后端，后端通过code向微信客户端获取session_key和openid。然后加密返回给客户端，客户端保存在全局。</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> <span class=\"title function_\">doAuthJsCode</span>();</span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">loginInfo</span>: data,</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> <span class=\"comment\">//当用户点击微信授权的时候，调用getUserProfile方法，通过微信提供的getUserProfile方法拿到用户的信息，，注意这里的用户信息还是加密的，之后把加密的用户信息和登录的加密信息一起返回给后端，后端拿到信息后就会注册一个用户，并且为这个用户生成一个token值返回给客户端，客户端把token值放到http的请求头上，每次调用接口的时候都要带上这个token值。</span></span><br><span class=\"line\"> <span class=\"title function_\">getUserProfile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">loginInfo</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     wx.<span class=\"title function_\">getUserProfile</span>(&#123;</span><br><span class=\"line\">         <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;展示用户信息&#x27;</span>,</span><br><span class=\"line\">         <span class=\"attr\">success</span>: <span class=\"keyword\">async</span> res =&gt; &#123;</span><br><span class=\"line\">             <span class=\"keyword\">const</span> encryptedData = res.<span class=\"property\">encryptedData</span> || <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">             <span class=\"keyword\">const</span> iv = res.<span class=\"property\">iv</span> || <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">             <span class=\"keyword\">const</span> session = <span class=\"keyword\">await</span> <span class=\"title function_\">requestWechatMobileLogin</span>(&#123;</span><br><span class=\"line\">                 encryptedData,</span><br><span class=\"line\">                 iv,</span><br><span class=\"line\">                 <span class=\"attr\">loginEncryptedData</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">loginInfo</span>.<span class=\"property\">encryptedData</span>,</span><br><span class=\"line\">                 <span class=\"attr\">loginIv</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">loginInfo</span>.<span class=\"property\">iv</span>,</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\">             <span class=\"keyword\">await</span> app.<span class=\"title function_\">setJwt</span>(session.<span class=\"property\">jwt</span>);</span><br><span class=\"line\">             <span class=\"keyword\">const</span> userInfo = <span class=\"keyword\">await</span> app.<span class=\"property\">doApiGetRequest</span>&lt;<span class=\"title class_\">UserInfo</span>&gt;(<span class=\"string\">&#x27;/user&#x27;</span>);</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123; <span class=\"attr\">hasToken</span>: app.<span class=\"title function_\">hasToken</span>(), userInfo &#125;);</span><br><span class=\"line\">             <span class=\"keyword\">await</span> app.<span class=\"title function_\">setUserInfo</span>(userInfo);</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"title function_\">getAllRooms</span>();</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"记录列表翻页\"><a href=\"#记录列表翻页\" class=\"headerlink\" title=\"记录列表翻页\"></a>记录列表翻页</h3><hr>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先定义一个变量去记录当前页有多少条数据，每次滚轮触底的时候会触发小程序的生命周期函数onReachBottom，在里面给size加10，然后再去调用一次接口</span></span><br><span class=\"line\"> <span class=\"title function_\">onReachBottom</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> size = <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">size</span>;</span><br><span class=\"line\">     size += <span class=\"number\">10</span>;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">         size,</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">getAllRooms</span>();</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js中的同步异步问题\"><a href=\"#js中的同步异步问题\" class=\"headerlink\" title=\"js中的同步异步问题\"></a>js中的同步异步问题</h3><hr>\n<p>js是一个单线程的语言，很多地方都需要去异步去操作。不然会产生堵塞，导致有些地方拿不到最新的信息。所以作为一个合格的js开发人员，一定要有一个很好的异步思维。我在项目中好几个应该使用异步的地方没有异步去执行。导致没有拿到最新的信息，产生了一些bug。比如我在结束房间的时候会去调用一个结算房间的接口，然后我会跳转到房间结算的页面，由于没有异步，导致我在结算页面查询房间信息的时候房间还是处于未结算的状态。具体的一些异步方法有<code>promise</code>,<code>async</code> <code>await</code>，<code>setTimeout</code>,<code>setInterval</code></p>\n<h3 id=\"时间格式转换\"><a href=\"#时间格式转换\" class=\"headerlink\" title=\"时间格式转换\"></a>时间格式转换</h3><hr>\n<p>由于微信小程序不支持moment去做时间格式的转换，不然的话的会在打包的时候报错，所以我手写了一个方法去实现时间格式化，具体是利用Date自带的一些api很容易去实现。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">formatServerTime</span> = (<span class=\"params\">str: <span class=\"built_in\">string</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(str);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> year = date.<span class=\"title function_\">getFullYear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> month = date.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> day = date.<span class=\"title function_\">getDate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hour = date.<span class=\"title function_\">getHours</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> minute = date.<span class=\"title function_\">getMinutes</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> second = date.<span class=\"title function_\">getSeconds</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [year, month, day].<span class=\"title function_\">map</span>(formatNumber).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;-&#x27;</span>) + <span class=\"string\">&#x27; &#x27;</span> + [hour, minute, second].<span class=\"title function_\">map</span>(formatNumber).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;:&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"计分小程序介绍：计分小程序是一个打牌计分神器，麻将扑克均适用，主要分为单人计分模式和多人计分模式\"><a href=\"#计分小程序介绍：计分小程序是一个打牌计分神器，麻将扑克均适用，主要分为单人计分模式和多人计分模式\" class=\"headerlink\" title=\"计分小程序介绍：计分小程序是一个打牌计分神器，麻将扑克均适用，主要分为单人计分模式和多人计分模式\"></a>计分小程序介绍：计分小程序是一个打牌计分神器，麻将扑克均适用，主要分为单人计分模式和多人计分模式</h3><h3 id=\"技术栈：TS、微信小程序、Vant-Wapp、websocket\"><a href=\"#技术栈：TS、微信小程序、Vant-Wapp、websocket\" class=\"headerlink\" title=\"技术栈：TS、微信小程序、Vant Wapp、websocket\"></a>技术栈：<a href=\"https://www.tslang.cn/docs/handbook/basic-types.html\">TS</a>、<a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/\">微信小程序</a>、<a href=\"https://youzan.github.io/vant-weapp/#/goods-action\">Vant Wapp</a>、<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\">websocket</a></h3>","more":"<h3 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h3><hr>\n<p><strong>问题：房间计分情况实时更新到每一位成员</strong></p>\n<p>解决思路：选择长连接，长连接有websocket，Long Pulling， 轮询。鉴于计分操作比较频繁且需要后台主动发送信息，所以我使用的是websocket来实现长连接。小程序官方有封装好的websocket，</p>\n<p>使用websocket涉及到关闭重连和收到信息去做通知两种情况。为了更好的复用，我把websocket连接的方法initWebSocket挂在全局的app的实例上，当收到服务端发来的信息时，该实例方法会生成一个事件进行广播，我使用的是eventemitter2生成和监听事件。再全局我还写了一个实例listenEvent去监听事件，当监听到事件的时候会把传进来的方法执行一遍，传进来的方法就可以去拿数据。因为监听的事件在页面销毁后是需要同时去进行销毁的。但是在页面销毁的生命周期函数中获取不到最新的listener,所以我在使用listenEvent的时候也把当前的页面实例也传进来，然后在实例内部去改写页面的onUnload的页面生命周期函数，在页面销毁的同时去销毁当前监听的listener。执行完之后再还原页面的生命周期函数。这样就完成了监听和销毁的闭环。</p>\n<p>关于websocket断线重连，我在全局写了一个方法去争对主动关闭和被动关闭的情况分别进行处理，该方法会根据入参判断是否是主动关闭，被动关闭的话会先销毁上一个调用的定时器，然后再生成一个新的定时器去执行连接websocket的方法initWebSocket.如果是主动关闭的话就会只销毁而不再去生成定时器去连接websocket了。下面是具体的方法</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//连接websocket的方法，在页面加载之前执行这个方法连接websocket</span></span><br><span class=\"line\"><span class=\"title function_\">initWebSocket</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">wsDisabledReconnect</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> ws = wx.<span class=\"title function_\">connectSocket</span>(&#123;</span><br><span class=\"line\">                <span class=\"attr\">url</span>: <span class=\"string\">&#x27;wss://scorex.dayangame.com:443/ws/?token=&#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">appData</span>.<span class=\"property\">token</span>,</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            ws.<span class=\"title function_\">onOpen</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;websocket连接&#x27;</span>, res);</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">timeFdScoketPing</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                    ws?.<span class=\"title function_\">send</span>(&#123; <span class=\"attr\">data</span>: <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(&#123; <span class=\"attr\">event</span>: <span class=\"string\">&#x27;ping&#x27;</span>, <span class=\"attr\">data</span>: &#123;&#125; &#125;) &#125;);</span><br><span class=\"line\">                &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\">                <span class=\"title function_\">reslove</span>(ws);</span><br><span class=\"line\">                <span class=\"comment\">//连接成功后刷新房间信息</span></span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">event</span>.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;room.refresh&#x27;</span>, res);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            ws.<span class=\"title function_\">onError</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;未能正常连接&#x27;</span>, res);</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">onCleanSocket</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">wsDisabledReconnect</span>);</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;socket error&#x27;</span>));</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            ws.<span class=\"title function_\">onMessage</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;收到服务器内容：&#x27;</span> + res.<span class=\"property\">data</span>);</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">event</span>.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;room.refresh&#x27;</span>, res);</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;emit room.refresh&#x27;</span>);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            ws.<span class=\"title function_\">onClose</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;WebSocket 已关闭！&#x27;</span>, res);</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">onCleanSocket</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">wsDisabledReconnect</span>);</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;socket close&#x27;</span>));</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 判断是主动关闭wbsocket连接还是被动，主动销毁定时器，被动销毁定时器后再生成一个定时器来实现被动关闭重连</span></span><br><span class=\"line\">    <span class=\"title function_\">onCleanSocket</span>(<span class=\"params\">wsDisabledReconnect: <span class=\"built_in\">boolean</span></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">ws</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> ws = <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span> <span class=\"keyword\">as</span> <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">WechatMiniprogram</span>.<span class=\"property\">SocketTask</span>&gt;;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">ws</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            ws.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> e.<span class=\"title function_\">close</span>(&#123;&#125;));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timeFdScoketPing</span> <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>);</span><br><span class=\"line\">        <span class=\"built_in\">clearTimeout</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timeFdSocketReconnect</span> <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">wsDisabledReconnect</span> = wsDisabledReconnect;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">wsDisabledReconnect</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">timeFdSocketReconnect</span> = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">initWebSocket</span>(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//去监听一个事件并且在页面销毁的时候销毁监听的方法</span></span><br><span class=\"line\">    <span class=\"title function_\">listenEvent</span>(<span class=\"attr\">event</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">page</span>: <span class=\"title class_\">WechatMiniprogram</span>.<span class=\"property\">Page</span>.<span class=\"property\">Instance</span>&lt;<span class=\"built_in\">any</span>, <span class=\"built_in\">any</span>&gt;, <span class=\"attr\">callback</span>: <span class=\"title class_\">ListenerFn</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> listener = <span class=\"variable language_\">this</span>.<span class=\"property\">event</span>.<span class=\"title function_\">on</span>(event, callback, &#123; <span class=\"attr\">objectify</span>: <span class=\"literal\">true</span> &#125;) <span class=\"keyword\">as</span> <span class=\"title class_\">Listener</span>;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> superOnUnload = page.<span class=\"property\">onUnload</span> || <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;add listener -&gt;&#x27;</span> + event);</span><br><span class=\"line\">        page.<span class=\"property\">onUnload</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            listener.<span class=\"title function_\">off</span>();</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;remove listener -&gt;&#x27;</span> + event);</span><br><span class=\"line\">            superOnUnload.<span class=\"title function_\">apply</span>(page);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;,    </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实现算法\"><a href=\"#实现算法\" class=\"headerlink\" title=\"实现算法\"></a>实现算法</h3><hr>\n<p>算法解决的问题：在计分小程序单人模式给分中最后以为玩家根据合分为零的规则自动填充好分数</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221213110516315.png\" alt=\"image-20221213110516315\"></p>\n<p>如图1.1是记录玩家分数的数据结构，我通过遍历player数据去，通过判断score是否为空来记录目前有多少个玩家还没有填分数同时计算出来目前已填分数玩家的总分。然后在遍历结束后针对只有一个玩家未填分数进行处理，把已填玩家的总分的相反数给最后一位玩家。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">autofill</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">const</span> copyUsers = <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">player</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; copyUsers.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (!copyUsers[i].<span class=\"property\">score</span>) &#123;</span><br><span class=\"line\">               num++;</span><br><span class=\"line\">               index = i;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (copyUsers[i].<span class=\"property\">win</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">               sum += <span class=\"title class_\">Number</span>(copyUsers[i].<span class=\"property\">score</span>);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               sum -= <span class=\"title class_\">Number</span>(copyUsers[i].<span class=\"property\">score</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (num === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (sum &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               copyUsers[index].<span class=\"property\">win</span> = <span class=\"number\">2</span>;</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               copyUsers[index].<span class=\"property\">win</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           copyUsers[index].<span class=\"property\">score</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(sum).<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">               <span class=\"attr\">player</span>: copyUsers,</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"接口封装\"><a href=\"#接口封装\" class=\"headerlink\" title=\"接口封装\"></a>接口封装</h3><hr>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用query-string三方包</span></span><br><span class=\"line\">   <span class=\"keyword\">import</span> &#123; stringifyUrl, <span class=\"title class_\">StringifiableRecord</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;query-string&#x27;</span>;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//配置三个开发环境对应的路由</span></span><br><span class=\"line\">   <span class=\"keyword\">const</span> <span class=\"attr\">API_URLS</span>: &#123; [<span class=\"attr\">index</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span> &#125; = &#123;</span><br><span class=\"line\">       <span class=\"attr\">develop</span>: <span class=\"string\">&#x27;https://scorex.dayangame.com/api&#x27;</span>,</span><br><span class=\"line\">       <span class=\"attr\">trial</span>: <span class=\"string\">&#x27;https://scorex.dayangame.com/api&#x27;</span>,</span><br><span class=\"line\">       <span class=\"attr\">release</span>: <span class=\"string\">&#x27;https://scorex.dayangame.com/api&#x27;</span>,</span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"comment\">//在小程序加载完毕时获取下程序的配置</span></span><br><span class=\"line\">  <span class=\"title function_\">onLaunch</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> accountInfo = wx.<span class=\"title function_\">getAccountInfoSync</span>();</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">appid</span> = accountInfo.<span class=\"property\">miniProgram</span>.<span class=\"property\">appId</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">env</span> = accountInfo.<span class=\"property\">miniProgram</span>.<span class=\"property\">envVersion</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">version</span> = accountInfo.<span class=\"property\">miniProgram</span>.<span class=\"property\">version</span> || <span class=\"string\">&#x27;0.0.0&#x27;</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">systemInfo</span> = wx.<span class=\"title function_\">getSystemInfoSync</span>();</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">url</span> = <span class=\"variable constant_\">API_URLS</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">env</span>] || <span class=\"variable constant_\">API_URLS</span>.<span class=\"property\">develop</span>;</span><br><span class=\"line\">      <span class=\"comment\">//获取JWT</span></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">this</span>.<span class=\"property\">appData</span>.<span class=\"property\">token</span> = wx.<span class=\"title function_\">getStorageSync</span>(<span class=\"string\">&#x27;jwt&#x27;</span>) || <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">          <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;getStorageSync[jwt] error&#x27;</span>, e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">//封装接口</span></span><br><span class=\"line\">   doApiRequest&lt;O, T <span class=\"keyword\">extends</span> <span class=\"title class_\">WechatMiniprogram</span>.<span class=\"property\">IAnyObject</span>&gt;(</span><br><span class=\"line\">      <span class=\"attr\">method</span>: <span class=\"title class_\">WxRequestMethods</span>,</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">      data?: T,</span><br><span class=\"line\">      query?: <span class=\"title class_\">StringifiableRecord</span>,</span><br><span class=\"line\">  ): <span class=\"title class_\">Promise</span>&lt;O&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">//拼接好路由</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> baseUrl = <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.config.url&#125;</span><span class=\"subst\">$&#123;path&#125;</span>`</span>;</span><br><span class=\"line\">      <span class=\"comment\">//利用stringifyUrl把路由上的参数拼接在后面</span></span><br><span class=\"line\">      <span class=\"comment\">//queryString.stringifyUrl(&#123;url: &#x27;https://foo.bar&#x27;, query: &#123;foo: &#x27;bar&#x27;&#125;&#125;);  </span></span><br><span class=\"line\">      <span class=\"comment\">//=&gt; &#x27;https://foo.bar?foo=bar&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> url = <span class=\"title function_\">stringifyUrl</span>(&#123; <span class=\"attr\">url</span>: baseUrl, query &#125;, &#123; <span class=\"attr\">arrayFormat</span>: <span class=\"string\">&#x27;index&#x27;</span> &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">header</span>: <span class=\"title class_\">WechatMiniprogram</span>.<span class=\"property\">IAnyObject</span> = &#123;</span><br><span class=\"line\">          <span class=\"string\">&#x27;x-platform&#x27;</span>: [<span class=\"string\">&#x27;wxmp&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">appid</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">env</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">config</span>.<span class=\"property\">version</span>].<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;/&#x27;</span>),</span><br><span class=\"line\">          <span class=\"comment\">// &#x27;x-debug-user&#x27;: &#x27;7b2ee6da-1de7-406c-bf64-5e4afbbc31f1&#x27;,</span></span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">appData</span>.<span class=\"property\">token</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//在每次请求接口的时候都会带上token值，如果把token直接放在cookie里面会有跨域的问题，所以这里我把token放在http协议头上，避免跨域的问题</span></span><br><span class=\"line\">          header.<span class=\"property\">Authorization</span> = <span class=\"string\">`Bearer <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.appData.token&#125;</span>`</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          wx.<span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">              url,</span><br><span class=\"line\">              header,</span><br><span class=\"line\">              method,</span><br><span class=\"line\">              data,</span><br><span class=\"line\">              <span class=\"attr\">dataType</span>: <span class=\"string\">&#x27;json&#x27;</span>,</span><br><span class=\"line\">              <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (result.<span class=\"property\">statusCode</span> != <span class=\"number\">200</span> &amp;&amp; result.<span class=\"property\">statusCode</span> != <span class=\"number\">201</span>) &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`request err: <span class=\"subst\">$&#123;result.statusCode&#125;</span>`</span>));</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  <span class=\"keyword\">const</span> <span class=\"attr\">data</span>: &#123; <span class=\"attr\">code</span>: <span class=\"built_in\">number</span>; <span class=\"attr\">message</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">resource</span>: O &#125; = result.<span class=\"property\">data</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (data.<span class=\"property\">code</span>) &#123;</span><br><span class=\"line\">                      <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(data.<span class=\"property\">message</span>));</span><br><span class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                      <span class=\"title function_\">reslove</span>(data.<span class=\"property\">resource</span>);</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">              <span class=\"attr\">fail</span>: <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">                  <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(e.<span class=\"property\">errMsg</span>));</span><br><span class=\"line\">              &#125;,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  doApiPostRequest&lt;O, T <span class=\"keyword\">extends</span> <span class=\"title class_\">WechatMiniprogram</span>.<span class=\"property\">IAnyObject</span>&gt;(</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">      data?: T,</span><br><span class=\"line\">      query?: <span class=\"title class_\">StringifiableRecord</span>,</span><br><span class=\"line\">  ): <span class=\"title class_\">Promise</span>&lt;O&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">doApiRequest</span>(<span class=\"string\">&#x27;POST&#x27;</span>, path, data, query);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  doApiPutRequest&lt;O, T <span class=\"keyword\">extends</span> <span class=\"title class_\">WechatMiniprogram</span>.<span class=\"property\">IAnyObject</span>&gt;(</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">      data?: T,</span><br><span class=\"line\">      query?: <span class=\"title class_\">StringifiableRecord</span>,</span><br><span class=\"line\">  ): <span class=\"title class_\">Promise</span>&lt;O&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">doApiRequest</span>(<span class=\"string\">&#x27;PUT&#x27;</span>, path, data, query);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  doApiDeleteRequest&lt;O, T <span class=\"keyword\">extends</span> <span class=\"title class_\">WechatMiniprogram</span>.<span class=\"property\">IAnyObject</span>&gt;(</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"built_in\">string</span>,</span><br><span class=\"line\">      data?: T,</span><br><span class=\"line\">      query?: <span class=\"title class_\">StringifiableRecord</span>,</span><br><span class=\"line\">  ): <span class=\"title class_\">Promise</span>&lt;O&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">doApiRequest</span>(<span class=\"string\">&#x27;DELETE&#x27;</span>, path, data, query);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  doApiGetRequest&lt;O&gt;(<span class=\"attr\">path</span>: <span class=\"built_in\">string</span>, query?: <span class=\"title class_\">StringifiableRecord</span>): <span class=\"title class_\">Promise</span>&lt;O&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">doApiRequest</span>(<span class=\"string\">&#x27;GET&#x27;</span>, path, <span class=\"literal\">undefined</span>, query);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><hr>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>,<span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//forEach使用起来更加简洁</span></span><br><span class=\"line\">a.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//for in一般用来遍历对象</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i <span class=\"keyword\">in</span> b) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//for of可以遍历类数组结构</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i <span class=\"keyword\">of</span> a) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//map遍历数组,会返回一个新的数组</span></span><br><span class=\"line\">a.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">i</span> =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"微信小程序登录流程\"><a href=\"#微信小程序登录流程\" class=\"headerlink\" title=\"微信小程序登录流程\"></a>微信小程序登录流程</h3><hr>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">doAuthJsCode</span>(<span class=\"params\"></span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">IWechatLogin</span>&gt; &#123;</span><br><span class=\"line\">     <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> wx.<span class=\"title function_\">login</span>();</span><br><span class=\"line\">     <span class=\"keyword\">return</span> app.<span class=\"title function_\">doApiPostRequest</span>(<span class=\"string\">&#x27;/wechat/auth/jscode&#x27;</span>, &#123; <span class=\"attr\">code</span>: result.<span class=\"property\">code</span> &#125;);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"comment\">//先调用wx.login获取code，通过doAuthJsCode接口把code传给后端，后端通过code向微信客户端获取session_key和openid。然后加密返回给客户端，客户端保存在全局。</span></span><br><span class=\"line\"> <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> <span class=\"title function_\">doAuthJsCode</span>();</span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">loginInfo</span>: data,</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> <span class=\"comment\">//当用户点击微信授权的时候，调用getUserProfile方法，通过微信提供的getUserProfile方法拿到用户的信息，，注意这里的用户信息还是加密的，之后把加密的用户信息和登录的加密信息一起返回给后端，后端拿到信息后就会注册一个用户，并且为这个用户生成一个token值返回给客户端，客户端把token值放到http的请求头上，每次调用接口的时候都要带上这个token值。</span></span><br><span class=\"line\"> <span class=\"title function_\">getUserProfile</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">loginInfo</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     wx.<span class=\"title function_\">getUserProfile</span>(&#123;</span><br><span class=\"line\">         <span class=\"attr\">desc</span>: <span class=\"string\">&#x27;展示用户信息&#x27;</span>,</span><br><span class=\"line\">         <span class=\"attr\">success</span>: <span class=\"keyword\">async</span> res =&gt; &#123;</span><br><span class=\"line\">             <span class=\"keyword\">const</span> encryptedData = res.<span class=\"property\">encryptedData</span> || <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">             <span class=\"keyword\">const</span> iv = res.<span class=\"property\">iv</span> || <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">             <span class=\"keyword\">const</span> session = <span class=\"keyword\">await</span> <span class=\"title function_\">requestWechatMobileLogin</span>(&#123;</span><br><span class=\"line\">                 encryptedData,</span><br><span class=\"line\">                 iv,</span><br><span class=\"line\">                 <span class=\"attr\">loginEncryptedData</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">loginInfo</span>.<span class=\"property\">encryptedData</span>,</span><br><span class=\"line\">                 <span class=\"attr\">loginIv</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">loginInfo</span>.<span class=\"property\">iv</span>,</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\">             <span class=\"keyword\">await</span> app.<span class=\"title function_\">setJwt</span>(session.<span class=\"property\">jwt</span>);</span><br><span class=\"line\">             <span class=\"keyword\">const</span> userInfo = <span class=\"keyword\">await</span> app.<span class=\"property\">doApiGetRequest</span>&lt;<span class=\"title class_\">UserInfo</span>&gt;(<span class=\"string\">&#x27;/user&#x27;</span>);</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123; <span class=\"attr\">hasToken</span>: app.<span class=\"title function_\">hasToken</span>(), userInfo &#125;);</span><br><span class=\"line\">             <span class=\"keyword\">await</span> app.<span class=\"title function_\">setUserInfo</span>(userInfo);</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"title function_\">getAllRooms</span>();</span><br><span class=\"line\">             <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"记录列表翻页\"><a href=\"#记录列表翻页\" class=\"headerlink\" title=\"记录列表翻页\"></a>记录列表翻页</h3><hr>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//先定义一个变量去记录当前页有多少条数据，每次滚轮触底的时候会触发小程序的生命周期函数onReachBottom，在里面给size加10，然后再去调用一次接口</span></span><br><span class=\"line\"> <span class=\"title function_\">onReachBottom</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">let</span> size = <span class=\"variable language_\">this</span>.<span class=\"property\">data</span>.<span class=\"property\">size</span>;</span><br><span class=\"line\">     size += <span class=\"number\">10</span>;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">setData</span>(&#123;</span><br><span class=\"line\">         size,</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">getAllRooms</span>();</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js中的同步异步问题\"><a href=\"#js中的同步异步问题\" class=\"headerlink\" title=\"js中的同步异步问题\"></a>js中的同步异步问题</h3><hr>\n<p>js是一个单线程的语言，很多地方都需要去异步去操作。不然会产生堵塞，导致有些地方拿不到最新的信息。所以作为一个合格的js开发人员，一定要有一个很好的异步思维。我在项目中好几个应该使用异步的地方没有异步去执行。导致没有拿到最新的信息，产生了一些bug。比如我在结束房间的时候会去调用一个结算房间的接口，然后我会跳转到房间结算的页面，由于没有异步，导致我在结算页面查询房间信息的时候房间还是处于未结算的状态。具体的一些异步方法有<code>promise</code>,<code>async</code> <code>await</code>，<code>setTimeout</code>,<code>setInterval</code></p>\n<h3 id=\"时间格式转换\"><a href=\"#时间格式转换\" class=\"headerlink\" title=\"时间格式转换\"></a>时间格式转换</h3><hr>\n<p>由于微信小程序不支持moment去做时间格式的转换，不然的话的会在打包的时候报错，所以我手写了一个方法去实现时间格式化，具体是利用Date自带的一些api很容易去实现。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">formatServerTime</span> = (<span class=\"params\">str: <span class=\"built_in\">string</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(str);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> year = date.<span class=\"title function_\">getFullYear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> month = date.<span class=\"title function_\">getMonth</span>() + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> day = date.<span class=\"title function_\">getDate</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hour = date.<span class=\"title function_\">getHours</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> minute = date.<span class=\"title function_\">getMinutes</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> second = date.<span class=\"title function_\">getSeconds</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [year, month, day].<span class=\"title function_\">map</span>(formatNumber).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;-&#x27;</span>) + <span class=\"string\">&#x27; &#x27;</span> + [hour, minute, second].<span class=\"title function_\">map</span>(formatNumber).<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;:&#x27;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"sass学习","date":"2022-12-12T02:36:15.000Z","typora-copy-images-to":"upload","top":98,"_content":"\n### 特色功能\n\n***\n\n- 完全兼容css3\n- 在css基础上增加变量、嵌套、混合等功能\n- 通过函数进行颜色值与属性值的运算\n- 提供控制指令等高级功能\n- 自定义输出格式\n\n<!--more-->\n\n### 语法格式\n\n***\n\nSass有两种语法格式。首先是Scss，这种格式仅在css3语法的基础上尽心拓展，所有css3语法在scss中都是通用的，同时加入Sass的特色功能。此外，scss也支持大多数css hacks写法以及浏览器前缀写法。这种格式以,scss作为拓展名。另一种是最早的sass语法格式，被称为缩进格式通常简称“Sass”，是一种简化格式。它使用“缩进”代替花括号表示属性属于某个选择器，用“换行”代替“分号”分隔属性，很多人认为这样做比SCSS更容易阅读，书写也更快速。缩进格式也可以使用Sass的全部功能，只是与SCSS相比个别地方采取了不同的表达方式。这种格式以.sass作为拓展名。\n\n任何一种格式可以直接导入（@import）到另一种格式中使用，或者通过sass-convert命令行工具转换成另一种格式\n\n```scss\n# Convert Sass to SCSS\n$ sass-convert style.sass style.scss\n\n# Convert SCSS to Sass\n$ sass-convert style.scss style.sass\n```\n\n### 使用Sass\n\n***\n\nSass可以通过以下三种方式使用：作为命令行工具，作为独立的Ruby模块，或者作为Rack-enabled框架的插件。无论哪种方式都需要先安装sass gem(windows系统需要安装Ruby)\n\n```scss\ngem install sass\n//在命令中运行Sass\nsass input .scss output .css\n//监视单个Sass文件，每次修改并保存时自动编译\nsass --watch input .scss:output .css\n//监视整个文件夹\nsass --wwatch app/sass:public/stylesheets\n//在Ruby中使用Sass也非常容易，Sass gem安装完毕后运行require \"sass\"然后按照下面的方法使用Sass::Engine\nengine = Sass::Engine.new(\"#main {background-color:#0000ff}\",:syntax => :scss)\nengine.render #=> \"#main { background-color: #0000ff;}\\n\" \n```\n\n**缓存**\n\nSass自动缓存编译后的模板与partials，这样做能够显著提升重新编译的速度，尤其在处理由@import导入多个子文件的大型项目时\n\n单独使用Sass，缓存内容保存在.sass-cache文件夹中。在Rails和Merb项目中缓存文件保存在tmp/sass-cache文件夹中（可通过:cache_location修改路径）。禁用缓存可将:cache设为false\n\n判断语法格式\n\nSass命令行工具根据文件的拓展名判断所使用的语法格式，没有文件名sass命令默认编译.sass文件，添加 --scss选项或者使用scss命令编译SCSS命令编译SCSS文件\n\n编码格式\n\n在Ruby1.9及以上环境中运行Sass时，Sass对文件的编码格式比较敏感，首先会根据CSS spec判断样式文件的编码格式，如果失败则检测Ruby string encoding。也就是说，Sass首先检查Unicode byte order mark，然后是@charset声明，最后是Ruby string encoding，加入都没有检测到，默认使用UTF-8编码。\n\n与css相同，使用@charset可以声明特定的编码格式。在样式文件的起始位置插入@charset \"encoding-name\"，Sass将会按照给出的编码格式编译文件。注意所使用的编码格式必须可转换为Unicode字符集\n\n### css功能扩展\n\n***\n\n**嵌套规则**\n\nSass允许将一套css样式嵌套进另一套样式中，内层的样式将它外层的选择器作为父选择器，\n\n```scss\n#main p {\n  color: #00ff00;\n  width: 97%;\n\n  .redbox {\n    background-color: #ff0000;\n    color: #000000;\n  }\n}\n转译为\n#main p {\n  color: #00ff00;\n  width: 97%; }\n  #main p .redbox {\n    background-color: #ff0000;\n    color: #000000; \n  }\n```\n\n**父选择器&**\n\n在嵌套css规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定hover样式时，或者当body元素有某个classname时，可以用&代表嵌套规则外层的父选择器\n\n```scss\na {\n  font-weight: bold;\n  text-decoration: none;\n  &:hover { text-decoration: underline; }\n  body.firefox & { font-weight: normal; }\n}\n//转译为\na {\n  font-weight: bold;\n  text-decoration: none; }\n  a:hover {\n    text-decoration: underline; }\n  body.firefox a {\n    font-weight: normal; \n   }\n```\n\n**占位符选择器%foo**\n\nSass额外提供了一种特殊类型的选择器：占位符选择器。与常用的id与class选择器写法相似，只是#或.替换成了%。必须通过@extend指令调用。\n\n### 注释/* */与//\n\n***\n\nSass支持标准的css多行注释/* */，以及单行注释//，前者会被完整输出到编译后的css文件中，而后者则不会\n\n```scss\n/* This comment is\n * several lines long.\n * since it uses the CSS comment syntax,\n * it will appear in the CSS output. */\nbody { color: black; }\n\n// These comments are only one line long each.\n// They won't appear in the CSS output,\n// since they use the single-line comment syntax.\na { color: green; }\n\n//转译为\n\n/* This comment is\n * several lines long.\n * since it uses the CSS comment syntax,\n * it will appear in the CSS output. */\nbody {\n  color: black; }\n  \n  \na {\n  color: green; \n  }\n```\n\n### SassScript\n\n在css属性的基础上Sass提供了一些名为SassScript的新功能。SassScript可作用于任何属性，允许属性使用变量、算数运算等额外功能。\n\n通过interpolation，SassScript甚至可以生成选择器或属性名，这一点对编写mixin有很大帮助\n\nInterractive Shell可以在命令行中测试SassScript的功能。在命令行中输入sass -i，然后输入想要测试的SassScript查看输出结果\n\n```scss\n$ sass -i\n>> \"Hello, Sassy World!\"\n\"Hello, Sassy World!\"\n>> 1px + 1px + 1px\n3px\n>> #777 + #777\n#eeeeee\n>> #777 + #888\nwhite\n```\n\n**变量$**\n\nSassScript最普遍的用法就是变量，变量以美元符号开头，赋值方法与css属性的写法一样\n\n```scss\n$width: 5em\n\n#main {\n    width:$width;// 5em\n}\n```\n\n变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加!global\n\n```scss\n#main {\n  $width: 5em !global;\n  width: $width;\n}\n\n#sidebar {\n  width: $width;\n}\n\n转译为\n\n#main {\n  width: 5em;\n}\n\n#sidebar {\n  width: 5em;\n}\n```\n\n**数据类型**\n\nSassScript支持6种主要的数据类型，数字、字符串、颜色、布尔型、空值、数组、maps\n\n**字符串**\n\nSassScript支持css的两种字符串类型：有引号字符串，如“”和‘’；与无引号字符串，在编译css文件时不会改变其类型。只有一种情况除外，使用#{}（interpolation）时，有引号字符串将被编译为无引号字符串，这样便于在mixin中引用选择器名\n\n```scss\n@mixin firefox-message($selector) {\n  body.firefox #{$selector}:before {\n    content: \"Hi, Firefox users!\";\n  }\n}\n@include firefox-message(\".header\");\n//转译为\nbody.firefox .header:before {\n  content: \"Hi, Firefox users!\"; \n  }\n```\n\n**数组**\n\n数组指Sass如何处理cs中margin：10px 15px 0 0这样通过空格或者逗号分隔的一系列的值。独立的值也被视为数组\n\n数组本身没有太多功能，Sass list functions赋予了数组更多的新功能；nth函数可以直接访问数组中的某一项，join函数可以将多个数组连接在一起，append函数可以在数组中添加新值；而@each指令能够遍历数组中的每一项\n\n**运算**\n\n所有的数据类型都支持相等运算==或!=，此外，每种数据也有其各自支持的运算方式SassScript支持数字的加减乘除、取整等运算（+，-，*，/,%），如果必要会在不同单位见转换值\n\n插值语句#{}\n\n通过#{}插值语句可以在选择器或属性名中使用变量\n\n```scss\n$name: foo;\n$attr: border;\np.#{$name} {\n  #{$attr}-color: blue;\n}\n//转译为\np.foo {\n  border-color: blue;\n  }\n```\n\n### @-Rules与指令\n\nSass支持所有的css3 @-Rules，以及Sass特有的指令\n\n**@import**\n\nSass在当前地址，或Rack，Rails，Merb的Sass文件地址寻找Sass文件，如果需要设定其他地址，可以用：load_paths选项，或者在命令中输入--load-path命令\n\n通常，@import寻找Sass文件并将其导入，但在以下情况下，@important寻找Sass文件并将其导入，但在以下情况下，@import仅作为普通的css语句，不会导入任何Sass文件，文件拓展名是.css，文件名以http://开头，文件名是url(),@import包含media queries\n\n如果不在上诉情况内，文件的拓展名是.scss或.sass，则导入成功\n\n**@media**\n\nSass中@media指令与css中用法一样，只是增加了一点额外的功能：允许其在css规则中嵌套。如果@media嵌套在css规则内，编译时，@media将被编译到文件的最外层，包含嵌套的父选择器。这个功能让@media用起来更方便，不需要重复使用选择器，也不会打乱css的书写流程\n\n```scss\n.sidebar {\n  width: 300px;\n  @media screen and (orientation: landscape) {\n    width: 500px;\n  }\n}\n//转译为\n.sidebar {\n  width: 300px; }\n  @media screen and (orientation: landscape) {\n    .sidebar {\n      width: 500px;\n      }\n    }\n```\n\n### 控制指令\n\n**@if**\n\n当@if的表达式返回值不是false或者null时，条件成立，输出{}内的代码\n\n```scss\np {\n  @if 1 + 1 == 2 { border: 1px solid; }\n  @if 5 < 3 { border: 2px dotted; }\n  @if null  { border: 3px double; }\n}\n//转译为\np {\n  border: 1px solid;\n  }\n```\n\n**@for**\n\n@for指令可以限制的范围内重复输出格式，每次按要求对输出结果做出变动。这个指令包含两种格式：@for $var from  through ,区别在于through与to的含义：当使用through时，条件范围包含与的值，而使用to时条件范围只包含的值不包含的值。另外，$var可以是任何变量，比如$i,和必须是整数值\n\n```scss\n@for $i from 1 through 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n//转译为\n.item-1 {\n  width: 2em; \n  }\n.item-2 {\n  width: 4em; \n  }\n.item-3 {\n  width: 6em; \n  }\n```\n\n**@each**\n\n@each指令的格式是$var in ,$var可以是任何变量名，比如$length或者$name，而是一连串的值，也就是值列表\n\n@each将变量$var作用于值列表中的每一个项目，然后输出结果\n\n```scss\n@each $animal in puma, sea-slug, egret, salamander {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n  }\n}\n//转译为\n.puma-icon {\n  background-image: url('/images/puma.png'); }\n.sea-slug-icon {\n  background-image: url('/images/sea-slug.png'); }\n.egret-icon {\n  background-image: url('/images/egret.png'); }\n.salamander-icon {\n  background-image: url('/images/salamander.png'); }\n```\n\n**@while**\n\n@while指令重复输出格式知道表达式返回结果为false。这样库实现比@for更复杂的循环，只是很少会用到\n\n```scss\n$i: 6;\n@while $i > 0 {\n  .item-#{$i} { width: 2em * $i; }\n  $i: $i - 2;\n}\n//转译为\n.item-6 {\n  width: 12em; }\n\n.item-4 {\n  width: 8em; }\n\n.item-2 {\n  width: 4em; }\n```\n\n### 混合指令\n\n混合指令用于定义可重复使用的样式，避免了使用无语意的class，比如.float-left。混合指令可以包含所有的css规则，绝大部分Sass规则，甚至通过参数功能引入变量，输出多样化的样式\n\n### 函数指令\n\nSass支持自定义函数，并能在如何属性值或Sass Script中使用\n\n```scss\n$grid-width: 40px;\n$gutter-width: 10px;\n\n@function grid-width($n) {\n  @return $n * $grid-width + ($n - 1) * $gutter-width;\n}\n\n#sidebar { width: grid-width(5); }\n//转译为\n#sidebar {\n  width: 240px; }\n```\n\n### 输出格式\n\nSass默认的css输出格式很美观也能清晰反映文档结构，为满足其他需求Sass也提供了多种输出格式\n\nSass提供了四种输出格式，可以通过：style option选项设定，或者在命令行中使用 -- style选项\n\n**:nested**\n\nNested样式是Sass默认的输出格式，能够清晰反映css与html的结构关系。选择器与属性等单独占用一行，缩进量与Sass文件中一致，每行的所尽量反映了其在嵌套规则内的层数。当阅读大型文件时，这种样式可以很容易地分析文件的主要结构\n\n```scss\n#main {\n  color: #fff;\n  background-color: #000; }\n  #main p {\n    width: 10em; }\n\n.huge {\n  font-size: 10em;\n  font-weight: bold;\n  text-decoration: underline; }\n```\n\n**:expanded**\n\nExpanded输出更像是手写的样式，选择器、属性等占用一行，属性根据选择器缩进，而选择器不做任何缩进\n\n```scss\n#main {\n  color: #fff;\n  background-color: #000;\n}\n#main p {\n  width: 10em;\n}\n\n.huge {\n  font-size: 10em;\n  font-weight: bold;\n  text-decoration: underline;\n}\n```\n\n**:compact**\n\ncompact输出方式比起上面两种占用的空间更少，每条css规则只占一行，包含其下的所有属性。嵌套过的选择器在输出时没有空行，不嵌套的选择器会输出空白行作为分隔符\n\n```scss\n#main { color: #fff; background-color: #000; }\n#main p { width: 10em; }\n\n.huge { font-size: 10em; font-weight: bold; text-decoration: underline; }\n```\n\n**:compressed**\n\ncompessed输出方式删除所有无意义的空格、空白行、以及注释，力求将文件体积压缩到最小，同时也会做出其他调整，比如会自动替换占用空间最小的颜色表达方式\n\n```scss\n#main{color:#fff;background-color:#000}#main p{width:10em}.huge{font-size:10em;font-weight:bold;text-decoration:underline}\n```\n\n","source":"_posts/sass.md","raw":"---\ntitle: sass学习\ndate: 2022-12-12 10:36:15\ntags: 学习\ncategories: 前端\ntypora-copy-images-to: upload\ntop: 98\n---\n\n### 特色功能\n\n***\n\n- 完全兼容css3\n- 在css基础上增加变量、嵌套、混合等功能\n- 通过函数进行颜色值与属性值的运算\n- 提供控制指令等高级功能\n- 自定义输出格式\n\n<!--more-->\n\n### 语法格式\n\n***\n\nSass有两种语法格式。首先是Scss，这种格式仅在css3语法的基础上尽心拓展，所有css3语法在scss中都是通用的，同时加入Sass的特色功能。此外，scss也支持大多数css hacks写法以及浏览器前缀写法。这种格式以,scss作为拓展名。另一种是最早的sass语法格式，被称为缩进格式通常简称“Sass”，是一种简化格式。它使用“缩进”代替花括号表示属性属于某个选择器，用“换行”代替“分号”分隔属性，很多人认为这样做比SCSS更容易阅读，书写也更快速。缩进格式也可以使用Sass的全部功能，只是与SCSS相比个别地方采取了不同的表达方式。这种格式以.sass作为拓展名。\n\n任何一种格式可以直接导入（@import）到另一种格式中使用，或者通过sass-convert命令行工具转换成另一种格式\n\n```scss\n# Convert Sass to SCSS\n$ sass-convert style.sass style.scss\n\n# Convert SCSS to Sass\n$ sass-convert style.scss style.sass\n```\n\n### 使用Sass\n\n***\n\nSass可以通过以下三种方式使用：作为命令行工具，作为独立的Ruby模块，或者作为Rack-enabled框架的插件。无论哪种方式都需要先安装sass gem(windows系统需要安装Ruby)\n\n```scss\ngem install sass\n//在命令中运行Sass\nsass input .scss output .css\n//监视单个Sass文件，每次修改并保存时自动编译\nsass --watch input .scss:output .css\n//监视整个文件夹\nsass --wwatch app/sass:public/stylesheets\n//在Ruby中使用Sass也非常容易，Sass gem安装完毕后运行require \"sass\"然后按照下面的方法使用Sass::Engine\nengine = Sass::Engine.new(\"#main {background-color:#0000ff}\",:syntax => :scss)\nengine.render #=> \"#main { background-color: #0000ff;}\\n\" \n```\n\n**缓存**\n\nSass自动缓存编译后的模板与partials，这样做能够显著提升重新编译的速度，尤其在处理由@import导入多个子文件的大型项目时\n\n单独使用Sass，缓存内容保存在.sass-cache文件夹中。在Rails和Merb项目中缓存文件保存在tmp/sass-cache文件夹中（可通过:cache_location修改路径）。禁用缓存可将:cache设为false\n\n判断语法格式\n\nSass命令行工具根据文件的拓展名判断所使用的语法格式，没有文件名sass命令默认编译.sass文件，添加 --scss选项或者使用scss命令编译SCSS命令编译SCSS文件\n\n编码格式\n\n在Ruby1.9及以上环境中运行Sass时，Sass对文件的编码格式比较敏感，首先会根据CSS spec判断样式文件的编码格式，如果失败则检测Ruby string encoding。也就是说，Sass首先检查Unicode byte order mark，然后是@charset声明，最后是Ruby string encoding，加入都没有检测到，默认使用UTF-8编码。\n\n与css相同，使用@charset可以声明特定的编码格式。在样式文件的起始位置插入@charset \"encoding-name\"，Sass将会按照给出的编码格式编译文件。注意所使用的编码格式必须可转换为Unicode字符集\n\n### css功能扩展\n\n***\n\n**嵌套规则**\n\nSass允许将一套css样式嵌套进另一套样式中，内层的样式将它外层的选择器作为父选择器，\n\n```scss\n#main p {\n  color: #00ff00;\n  width: 97%;\n\n  .redbox {\n    background-color: #ff0000;\n    color: #000000;\n  }\n}\n转译为\n#main p {\n  color: #00ff00;\n  width: 97%; }\n  #main p .redbox {\n    background-color: #ff0000;\n    color: #000000; \n  }\n```\n\n**父选择器&**\n\n在嵌套css规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定hover样式时，或者当body元素有某个classname时，可以用&代表嵌套规则外层的父选择器\n\n```scss\na {\n  font-weight: bold;\n  text-decoration: none;\n  &:hover { text-decoration: underline; }\n  body.firefox & { font-weight: normal; }\n}\n//转译为\na {\n  font-weight: bold;\n  text-decoration: none; }\n  a:hover {\n    text-decoration: underline; }\n  body.firefox a {\n    font-weight: normal; \n   }\n```\n\n**占位符选择器%foo**\n\nSass额外提供了一种特殊类型的选择器：占位符选择器。与常用的id与class选择器写法相似，只是#或.替换成了%。必须通过@extend指令调用。\n\n### 注释/* */与//\n\n***\n\nSass支持标准的css多行注释/* */，以及单行注释//，前者会被完整输出到编译后的css文件中，而后者则不会\n\n```scss\n/* This comment is\n * several lines long.\n * since it uses the CSS comment syntax,\n * it will appear in the CSS output. */\nbody { color: black; }\n\n// These comments are only one line long each.\n// They won't appear in the CSS output,\n// since they use the single-line comment syntax.\na { color: green; }\n\n//转译为\n\n/* This comment is\n * several lines long.\n * since it uses the CSS comment syntax,\n * it will appear in the CSS output. */\nbody {\n  color: black; }\n  \n  \na {\n  color: green; \n  }\n```\n\n### SassScript\n\n在css属性的基础上Sass提供了一些名为SassScript的新功能。SassScript可作用于任何属性，允许属性使用变量、算数运算等额外功能。\n\n通过interpolation，SassScript甚至可以生成选择器或属性名，这一点对编写mixin有很大帮助\n\nInterractive Shell可以在命令行中测试SassScript的功能。在命令行中输入sass -i，然后输入想要测试的SassScript查看输出结果\n\n```scss\n$ sass -i\n>> \"Hello, Sassy World!\"\n\"Hello, Sassy World!\"\n>> 1px + 1px + 1px\n3px\n>> #777 + #777\n#eeeeee\n>> #777 + #888\nwhite\n```\n\n**变量$**\n\nSassScript最普遍的用法就是变量，变量以美元符号开头，赋值方法与css属性的写法一样\n\n```scss\n$width: 5em\n\n#main {\n    width:$width;// 5em\n}\n```\n\n变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加!global\n\n```scss\n#main {\n  $width: 5em !global;\n  width: $width;\n}\n\n#sidebar {\n  width: $width;\n}\n\n转译为\n\n#main {\n  width: 5em;\n}\n\n#sidebar {\n  width: 5em;\n}\n```\n\n**数据类型**\n\nSassScript支持6种主要的数据类型，数字、字符串、颜色、布尔型、空值、数组、maps\n\n**字符串**\n\nSassScript支持css的两种字符串类型：有引号字符串，如“”和‘’；与无引号字符串，在编译css文件时不会改变其类型。只有一种情况除外，使用#{}（interpolation）时，有引号字符串将被编译为无引号字符串，这样便于在mixin中引用选择器名\n\n```scss\n@mixin firefox-message($selector) {\n  body.firefox #{$selector}:before {\n    content: \"Hi, Firefox users!\";\n  }\n}\n@include firefox-message(\".header\");\n//转译为\nbody.firefox .header:before {\n  content: \"Hi, Firefox users!\"; \n  }\n```\n\n**数组**\n\n数组指Sass如何处理cs中margin：10px 15px 0 0这样通过空格或者逗号分隔的一系列的值。独立的值也被视为数组\n\n数组本身没有太多功能，Sass list functions赋予了数组更多的新功能；nth函数可以直接访问数组中的某一项，join函数可以将多个数组连接在一起，append函数可以在数组中添加新值；而@each指令能够遍历数组中的每一项\n\n**运算**\n\n所有的数据类型都支持相等运算==或!=，此外，每种数据也有其各自支持的运算方式SassScript支持数字的加减乘除、取整等运算（+，-，*，/,%），如果必要会在不同单位见转换值\n\n插值语句#{}\n\n通过#{}插值语句可以在选择器或属性名中使用变量\n\n```scss\n$name: foo;\n$attr: border;\np.#{$name} {\n  #{$attr}-color: blue;\n}\n//转译为\np.foo {\n  border-color: blue;\n  }\n```\n\n### @-Rules与指令\n\nSass支持所有的css3 @-Rules，以及Sass特有的指令\n\n**@import**\n\nSass在当前地址，或Rack，Rails，Merb的Sass文件地址寻找Sass文件，如果需要设定其他地址，可以用：load_paths选项，或者在命令中输入--load-path命令\n\n通常，@import寻找Sass文件并将其导入，但在以下情况下，@important寻找Sass文件并将其导入，但在以下情况下，@import仅作为普通的css语句，不会导入任何Sass文件，文件拓展名是.css，文件名以http://开头，文件名是url(),@import包含media queries\n\n如果不在上诉情况内，文件的拓展名是.scss或.sass，则导入成功\n\n**@media**\n\nSass中@media指令与css中用法一样，只是增加了一点额外的功能：允许其在css规则中嵌套。如果@media嵌套在css规则内，编译时，@media将被编译到文件的最外层，包含嵌套的父选择器。这个功能让@media用起来更方便，不需要重复使用选择器，也不会打乱css的书写流程\n\n```scss\n.sidebar {\n  width: 300px;\n  @media screen and (orientation: landscape) {\n    width: 500px;\n  }\n}\n//转译为\n.sidebar {\n  width: 300px; }\n  @media screen and (orientation: landscape) {\n    .sidebar {\n      width: 500px;\n      }\n    }\n```\n\n### 控制指令\n\n**@if**\n\n当@if的表达式返回值不是false或者null时，条件成立，输出{}内的代码\n\n```scss\np {\n  @if 1 + 1 == 2 { border: 1px solid; }\n  @if 5 < 3 { border: 2px dotted; }\n  @if null  { border: 3px double; }\n}\n//转译为\np {\n  border: 1px solid;\n  }\n```\n\n**@for**\n\n@for指令可以限制的范围内重复输出格式，每次按要求对输出结果做出变动。这个指令包含两种格式：@for $var from  through ,区别在于through与to的含义：当使用through时，条件范围包含与的值，而使用to时条件范围只包含的值不包含的值。另外，$var可以是任何变量，比如$i,和必须是整数值\n\n```scss\n@for $i from 1 through 3 {\n  .item-#{$i} { width: 2em * $i; }\n}\n//转译为\n.item-1 {\n  width: 2em; \n  }\n.item-2 {\n  width: 4em; \n  }\n.item-3 {\n  width: 6em; \n  }\n```\n\n**@each**\n\n@each指令的格式是$var in ,$var可以是任何变量名，比如$length或者$name，而是一连串的值，也就是值列表\n\n@each将变量$var作用于值列表中的每一个项目，然后输出结果\n\n```scss\n@each $animal in puma, sea-slug, egret, salamander {\n  .#{$animal}-icon {\n    background-image: url('/images/#{$animal}.png');\n  }\n}\n//转译为\n.puma-icon {\n  background-image: url('/images/puma.png'); }\n.sea-slug-icon {\n  background-image: url('/images/sea-slug.png'); }\n.egret-icon {\n  background-image: url('/images/egret.png'); }\n.salamander-icon {\n  background-image: url('/images/salamander.png'); }\n```\n\n**@while**\n\n@while指令重复输出格式知道表达式返回结果为false。这样库实现比@for更复杂的循环，只是很少会用到\n\n```scss\n$i: 6;\n@while $i > 0 {\n  .item-#{$i} { width: 2em * $i; }\n  $i: $i - 2;\n}\n//转译为\n.item-6 {\n  width: 12em; }\n\n.item-4 {\n  width: 8em; }\n\n.item-2 {\n  width: 4em; }\n```\n\n### 混合指令\n\n混合指令用于定义可重复使用的样式，避免了使用无语意的class，比如.float-left。混合指令可以包含所有的css规则，绝大部分Sass规则，甚至通过参数功能引入变量，输出多样化的样式\n\n### 函数指令\n\nSass支持自定义函数，并能在如何属性值或Sass Script中使用\n\n```scss\n$grid-width: 40px;\n$gutter-width: 10px;\n\n@function grid-width($n) {\n  @return $n * $grid-width + ($n - 1) * $gutter-width;\n}\n\n#sidebar { width: grid-width(5); }\n//转译为\n#sidebar {\n  width: 240px; }\n```\n\n### 输出格式\n\nSass默认的css输出格式很美观也能清晰反映文档结构，为满足其他需求Sass也提供了多种输出格式\n\nSass提供了四种输出格式，可以通过：style option选项设定，或者在命令行中使用 -- style选项\n\n**:nested**\n\nNested样式是Sass默认的输出格式，能够清晰反映css与html的结构关系。选择器与属性等单独占用一行，缩进量与Sass文件中一致，每行的所尽量反映了其在嵌套规则内的层数。当阅读大型文件时，这种样式可以很容易地分析文件的主要结构\n\n```scss\n#main {\n  color: #fff;\n  background-color: #000; }\n  #main p {\n    width: 10em; }\n\n.huge {\n  font-size: 10em;\n  font-weight: bold;\n  text-decoration: underline; }\n```\n\n**:expanded**\n\nExpanded输出更像是手写的样式，选择器、属性等占用一行，属性根据选择器缩进，而选择器不做任何缩进\n\n```scss\n#main {\n  color: #fff;\n  background-color: #000;\n}\n#main p {\n  width: 10em;\n}\n\n.huge {\n  font-size: 10em;\n  font-weight: bold;\n  text-decoration: underline;\n}\n```\n\n**:compact**\n\ncompact输出方式比起上面两种占用的空间更少，每条css规则只占一行，包含其下的所有属性。嵌套过的选择器在输出时没有空行，不嵌套的选择器会输出空白行作为分隔符\n\n```scss\n#main { color: #fff; background-color: #000; }\n#main p { width: 10em; }\n\n.huge { font-size: 10em; font-weight: bold; text-decoration: underline; }\n```\n\n**:compressed**\n\ncompessed输出方式删除所有无意义的空格、空白行、以及注释，力求将文件体积压缩到最小，同时也会做出其他调整，比如会自动替换占用空间最小的颜色表达方式\n\n```scss\n#main{color:#fff;background-color:#000}#main p{width:10em}.huge{font-size:10em;font-weight:bold;text-decoration:underline}\n```\n\n","slug":"sass","published":1,"updated":"2022-12-30T03:14:06.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc9yxb8x000j50ut7lbv7aib","content":"<h3 id=\"特色功能\"><a href=\"#特色功能\" class=\"headerlink\" title=\"特色功能\"></a>特色功能</h3><hr>\n<ul>\n<li>完全兼容css3</li>\n<li>在css基础上增加变量、嵌套、混合等功能</li>\n<li>通过函数进行颜色值与属性值的运算</li>\n<li>提供控制指令等高级功能</li>\n<li>自定义输出格式</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"语法格式\"><a href=\"#语法格式\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h3><hr>\n<p>Sass有两种语法格式。首先是Scss，这种格式仅在css3语法的基础上尽心拓展，所有css3语法在scss中都是通用的，同时加入Sass的特色功能。此外，scss也支持大多数css hacks写法以及浏览器前缀写法。这种格式以,scss作为拓展名。另一种是最早的sass语法格式，被称为缩进格式通常简称“Sass”，是一种简化格式。它使用“缩进”代替花括号表示属性属于某个选择器，用“换行”代替“分号”分隔属性，很多人认为这样做比SCSS更容易阅读，书写也更快速。缩进格式也可以使用Sass的全部功能，只是与SCSS相比个别地方采取了不同的表达方式。这种格式以.sass作为拓展名。</p>\n<p>任何一种格式可以直接导入（@import）到另一种格式中使用，或者通过sass-convert命令行工具转换成另一种格式</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Convert Sass to SCSS</span><br><span class=\"line\">$ sass-convert style<span class=\"selector-class\">.sass</span> style<span class=\"selector-class\">.scss</span></span><br><span class=\"line\"></span><br><span class=\"line\"># Convert SCSS to Sass</span><br><span class=\"line\">$ sass-convert style<span class=\"selector-class\">.scss</span> style<span class=\"selector-class\">.sass</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Sass\"><a href=\"#使用Sass\" class=\"headerlink\" title=\"使用Sass\"></a>使用Sass</h3><hr>\n<p>Sass可以通过以下三种方式使用：作为命令行工具，作为独立的Ruby模块，或者作为Rack-enabled框架的插件。无论哪种方式都需要先安装sass gem(windows系统需要安装Ruby)</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install sass</span><br><span class=\"line\"><span class=\"comment\">//在命令中运行Sass</span></span><br><span class=\"line\">sass <span class=\"selector-tag\">input</span> <span class=\"selector-class\">.scss</span> output <span class=\"selector-class\">.css</span></span><br><span class=\"line\"><span class=\"comment\">//监视单个Sass文件，每次修改并保存时自动编译</span></span><br><span class=\"line\">sass <span class=\"attr\">--watch</span> <span class=\"selector-tag\">input</span> <span class=\"selector-class\">.scss</span>:output .css</span><br><span class=\"line\">//监视整个文件夹</span><br><span class=\"line\">sass --wwatch app/sass:public/stylesheets</span><br><span class=\"line\">//在Ruby中使用Sass也非常容易，Sass gem安装完毕后运行require <span class=\"string\">&quot;sass&quot;</span>然后按照下面的方法使用Sass::Engine</span><br><span class=\"line\">engine = Sass::Engine.<span class=\"built_in\">new</span>(<span class=\"string\">&quot;#main &#123;background-color:#0000ff&#125;&quot;</span>,:syntax =&gt; :scss)</span><br><span class=\"line\">engine.render #=&gt; <span class=\"string\">&quot;#main &#123; background-color: #0000ff;&#125;\\n&quot;</span> </span><br></pre></td></tr></table></figure>\n\n<p><strong>缓存</strong></p>\n<p>Sass自动缓存编译后的模板与partials，这样做能够显著提升重新编译的速度，尤其在处理由@import导入多个子文件的大型项目时</p>\n<p>单独使用Sass，缓存内容保存在.sass-cache文件夹中。在Rails和Merb项目中缓存文件保存在tmp/sass-cache文件夹中（可通过:cache_location修改路径）。禁用缓存可将:cache设为false</p>\n<p>判断语法格式</p>\n<p>Sass命令行工具根据文件的拓展名判断所使用的语法格式，没有文件名sass命令默认编译.sass文件，添加 –scss选项或者使用scss命令编译SCSS命令编译SCSS文件</p>\n<p>编码格式</p>\n<p>在Ruby1.9及以上环境中运行Sass时，Sass对文件的编码格式比较敏感，首先会根据CSS spec判断样式文件的编码格式，如果失败则检测Ruby string encoding。也就是说，Sass首先检查Unicode byte order mark，然后是@charset声明，最后是Ruby string encoding，加入都没有检测到，默认使用UTF-8编码。</p>\n<p>与css相同，使用@charset可以声明特定的编码格式。在样式文件的起始位置插入@charset “encoding-name”，Sass将会按照给出的编码格式编译文件。注意所使用的编码格式必须可转换为Unicode字符集</p>\n<h3 id=\"css功能扩展\"><a href=\"#css功能扩展\" class=\"headerlink\" title=\"css功能扩展\"></a>css功能扩展</h3><hr>\n<p><strong>嵌套规则</strong></p>\n<p>Sass允许将一套css样式嵌套进另一套样式中，内层的样式将它外层的选择器作为父选择器，</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#00ff00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">97%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.redbox</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">转译为</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#00ff00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">97%</span>; &#125;</span><br><span class=\"line\">  <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> <span class=\"selector-class\">.redbox</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000000</span>; </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>父选择器&amp;</strong></p>\n<p>在嵌套css规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定hover样式时，或者当body元素有某个classname时，可以用&amp;代表嵌套规则外层的父选择器</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> &amp; &#123; <span class=\"attribute\">font-weight</span>: normal; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal; </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>占位符选择器%foo</strong></p>\n<p>Sass额外提供了一种特殊类型的选择器：占位符选择器。与常用的id与class选择器写法相似，只是#或.替换成了%。必须通过@extend指令调用。</p>\n<h3 id=\"注释-与\"><a href=\"#注释-与\" class=\"headerlink\" title=\"注释/* */与//\"></a>注释/* */与//</h3><hr>\n<p>Sass支持标准的css多行注释/* */，以及单行注释//，前者会被完整输出到编译后的css文件中，而后者则不会</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* This comment is</span></span><br><span class=\"line\"><span class=\"comment\"> * several lines long.</span></span><br><span class=\"line\"><span class=\"comment\"> * since it uses the CSS comment syntax,</span></span><br><span class=\"line\"><span class=\"comment\"> * it will appear in the CSS output. */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">color</span>: black; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// These comments are only one line long each.</span></span><br><span class=\"line\"><span class=\"comment\">// They won&#x27;t appear in the CSS output,</span></span><br><span class=\"line\"><span class=\"comment\">// since they use the single-line comment syntax.</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123; <span class=\"attribute\">color</span>: green; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* This comment is</span></span><br><span class=\"line\"><span class=\"comment\"> * several lines long.</span></span><br><span class=\"line\"><span class=\"comment\"> * since it uses the CSS comment syntax,</span></span><br><span class=\"line\"><span class=\"comment\"> * it will appear in the CSS output. */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: black; &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: green; </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SassScript\"><a href=\"#SassScript\" class=\"headerlink\" title=\"SassScript\"></a>SassScript</h3><p>在css属性的基础上Sass提供了一些名为SassScript的新功能。SassScript可作用于任何属性，允许属性使用变量、算数运算等额外功能。</p>\n<p>通过interpolation，SassScript甚至可以生成选择器或属性名，这一点对编写mixin有很大帮助</p>\n<p>Interractive Shell可以在命令行中测试SassScript的功能。在命令行中输入sass -i，然后输入想要测试的SassScript查看输出结果</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sass -<span class=\"selector-tag\">i</span></span><br><span class=\"line\">&gt;&gt; &quot;Hello, Sassy World!&quot;</span><br><span class=\"line\">&quot;Hello, Sassy World!&quot;</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">1px</span> + <span class=\"number\">1px</span> + <span class=\"number\">1px</span></span><br><span class=\"line\"><span class=\"number\">3px</span></span><br><span class=\"line\">&gt;&gt; <span class=\"selector-id\">#777</span> + <span class=\"selector-id\">#777</span></span><br><span class=\"line\"><span class=\"selector-id\">#eeeeee</span></span><br><span class=\"line\">&gt;&gt; <span class=\"selector-id\">#777</span> + <span class=\"selector-id\">#888</span></span><br><span class=\"line\">white</span><br></pre></td></tr></table></figure>\n\n<p><strong>变量$</strong></p>\n<p>SassScript最普遍的用法就是变量，变量以美元符号开头，赋值方法与css属性的写法一样</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$width</span>: <span class=\"number\">5em</span></span><br><span class=\"line\"></span><br><span class=\"line\">#main &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"variable\">$width</span>;<span class=\"comment\">// 5em</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加!global</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">$width</span>: <span class=\"number\">5em</span> !global;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"variable\">$width</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"variable\">$width</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">转译为</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">5em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">5em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据类型</strong></p>\n<p>SassScript支持6种主要的数据类型，数字、字符串、颜色、布尔型、空值、数组、maps</p>\n<p><strong>字符串</strong></p>\n<p>SassScript支持css的两种字符串类型：有引号字符串，如“”和‘’；与无引号字符串，在编译css文件时不会改变其类型。只有一种情况除外，使用#{}（interpolation）时，有引号字符串将被编译为无引号字符串，这样便于在mixin中引用选择器名</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> firefox-message(<span class=\"variable\">$selector</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> #&#123;<span class=\"variable\">$selector</span>&#125;<span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&quot;Hi, Firefox users!&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@include</span> firefox-message(<span class=\"string\">&quot;.header&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> <span class=\"selector-class\">.header</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;Hi, Firefox users!&quot;</span>; </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>数组</strong></p>\n<p>数组指Sass如何处理cs中margin：10px 15px 0 0这样通过空格或者逗号分隔的一系列的值。独立的值也被视为数组</p>\n<p>数组本身没有太多功能，Sass list functions赋予了数组更多的新功能；nth函数可以直接访问数组中的某一项，join函数可以将多个数组连接在一起，append函数可以在数组中添加新值；而@each指令能够遍历数组中的每一项</p>\n<p><strong>运算</strong></p>\n<p>所有的数据类型都支持相等运算==或!=，此外，每种数据也有其各自支持的运算方式SassScript支持数字的加减乘除、取整等运算（+，-，*，/,%），如果必要会在不同单位见转换值</p>\n<p>插值语句#{}</p>\n<p>通过#{}插值语句可以在选择器或属性名中使用变量</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$name</span>: foo;</span><br><span class=\"line\"><span class=\"variable\">$attr</span>: border;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span>.#&#123;<span class=\"variable\">$name</span>&#125; &#123;</span><br><span class=\"line\">  #&#123;<span class=\"variable\">$attr</span>&#125;-<span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: blue;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Rules与指令\"><a href=\"#Rules与指令\" class=\"headerlink\" title=\"@-Rules与指令\"></a>@-Rules与指令</h3><p>Sass支持所有的css3 @-Rules，以及Sass特有的指令</p>\n<p><strong>@import</strong></p>\n<p>Sass在当前地址，或Rack，Rails，Merb的Sass文件地址寻找Sass文件，如果需要设定其他地址，可以用：load_paths选项，或者在命令中输入–load-path命令</p>\n<p>通常，@import寻找Sass文件并将其导入，但在以下情况下，@important寻找Sass文件并将其导入，但在以下情况下，@import仅作为普通的css语句，不会导入任何Sass文件，文件拓展名是.css，文件名以http://开头，文件名是url(),@import包含media queries</p>\n<p>如果不在上诉情况内，文件的拓展名是.scss或.sass，则导入成功</p>\n<p><strong>@media</strong></p>\n<p>Sass中@media指令与css中用法一样，只是增加了一点额外的功能：允许其在css规则中嵌套。如果@media嵌套在css规则内，编译时，@media将被编译到文件的最外层，包含嵌套的父选择器。这个功能让@media用起来更方便，不需要重复使用选择器，也不会打乱css的书写流程</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape) &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制指令\"><a href=\"#控制指令\" class=\"headerlink\" title=\"控制指令\"></a>控制指令</h3><p><strong>@if</strong></p>\n<p>当@if的表达式返回值不是false或者null时，条件成立，输出{}内的代码</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> <span class=\"number\">1</span> + <span class=\"number\">1</span> == <span class=\"number\">2</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> <span class=\"number\">5</span> &lt; <span class=\"number\">3</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> null  &#123; <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> double; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@for</strong></p>\n<p>@for指令可以限制的范围内重复输出格式，每次按要求对输出结果做出变动。这个指令包含两种格式：@for $var from  through ,区别在于through与to的含义：当使用through时，条件范围包含与的值，而使用to时条件范围只包含的值不包含的值。另外，$var可以是任何变量，比如$i,和必须是整数值</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@for</span> <span class=\"variable\">$i</span> from <span class=\"number\">1</span> through <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.item-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123; <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * <span class=\"variable\">$i</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-class\">.item-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">2em</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">4em</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item-3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">6em</span>; </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@each</strong></p>\n<p>@each指令的格式是$var in ,$var可以是任何变量名，比如$length或者$name，而是一连串的值，也就是值列表</p>\n<p>@each将变量$var作用于值列表中的每一个项目，然后输出结果</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@each</span> <span class=\"variable\">$animal</span> in puma, sea-slug, egret, salamander &#123;</span><br><span class=\"line\">  .#&#123;<span class=\"variable\">$animal</span>&#125;-<span class=\"attribute\">icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/#&#123;$animal&#125;.png&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-class\">.puma-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/puma.png&#x27;</span>); &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.sea-slug-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/sea-slug.png&#x27;</span>); &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.egret-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/egret.png&#x27;</span>); &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.salamander-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/salamander.png&#x27;</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@while</strong></p>\n<p>@while指令重复输出格式知道表达式返回结果为false。这样库实现比@for更复杂的循环，只是很少会用到</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$i</span>: <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">@while</span> <span class=\"variable\">$i</span> &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.item-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123; <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * <span class=\"variable\">$i</span>; &#125;</span><br><span class=\"line\">  <span class=\"variable\">$i</span>: <span class=\"variable\">$i</span> - <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-class\">.item-6</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">12em</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item-4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">8em</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">4em</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"混合指令\"><a href=\"#混合指令\" class=\"headerlink\" title=\"混合指令\"></a>混合指令</h3><p>混合指令用于定义可重复使用的样式，避免了使用无语意的class，比如.float-left。混合指令可以包含所有的css规则，绝大部分Sass规则，甚至通过参数功能引入变量，输出多样化的样式</p>\n<h3 id=\"函数指令\"><a href=\"#函数指令\" class=\"headerlink\" title=\"函数指令\"></a>函数指令</h3><p>Sass支持自定义函数，并能在如何属性值或Sass Script中使用</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$grid-width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\"><span class=\"variable\">$gutter-width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@function</span> grid-width(<span class=\"variable\">$n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@return</span> <span class=\"variable\">$n</span> * <span class=\"variable\">$grid-width</span> + (<span class=\"variable\">$n</span> - <span class=\"number\">1</span>) * <span class=\"variable\">$gutter-width</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123; <span class=\"attribute\">width</span>: <span class=\"built_in\">grid-width</span>(<span class=\"number\">5</span>); &#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">240px</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>Sass默认的css输出格式很美观也能清晰反映文档结构，为满足其他需求Sass也提供了多种输出格式</p>\n<p>Sass提供了四种输出格式，可以通过：style option选项设定，或者在命令行中使用 – style选项</p>\n<p><strong>:nested</strong></p>\n<p>Nested样式是Sass默认的输出格式，能够清晰反映css与html的结构关系。选择器与属性等单独占用一行，缩进量与Sass文件中一致，每行的所尽量反映了其在嵌套规则内的层数。当阅读大型文件时，这种样式可以很容易地分析文件的主要结构</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>; &#125;</span><br><span class=\"line\">  <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">10em</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.huge</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">10em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>:expanded</strong></p>\n<p>Expanded输出更像是手写的样式，选择器、属性等占用一行，属性根据选择器缩进，而选择器不做任何缩进</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.huge</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">10em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>:compact</strong></p>\n<p>compact输出方式比起上面两种占用的空间更少，每条css规则只占一行，包含其下的所有属性。嵌套过的选择器在输出时没有空行，不嵌套的选择器会输出空白行作为分隔符</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">10em</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.huge</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">10em</span>; <span class=\"attribute\">font-weight</span>: bold; <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>:compressed</strong></p>\n<p>compessed输出方式删除所有无意义的空格、空白行、以及注释，力求将文件体积压缩到最小，同时也会做出其他调整，比如会自动替换占用空间最小的颜色表达方式</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;<span class=\"attribute\">background-color</span>:<span class=\"number\">#000</span>&#125;<span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span>&#123;<span class=\"attribute\">width</span>:<span class=\"number\">10em</span>&#125;<span class=\"selector-class\">.huge</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">10em</span>;<span class=\"attribute\">font-weight</span>:bold;<span class=\"attribute\">text-decoration</span>:underline&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h3 id=\"特色功能\"><a href=\"#特色功能\" class=\"headerlink\" title=\"特色功能\"></a>特色功能</h3><hr>\n<ul>\n<li>完全兼容css3</li>\n<li>在css基础上增加变量、嵌套、混合等功能</li>\n<li>通过函数进行颜色值与属性值的运算</li>\n<li>提供控制指令等高级功能</li>\n<li>自定义输出格式</li>\n</ul>","more":"<h3 id=\"语法格式\"><a href=\"#语法格式\" class=\"headerlink\" title=\"语法格式\"></a>语法格式</h3><hr>\n<p>Sass有两种语法格式。首先是Scss，这种格式仅在css3语法的基础上尽心拓展，所有css3语法在scss中都是通用的，同时加入Sass的特色功能。此外，scss也支持大多数css hacks写法以及浏览器前缀写法。这种格式以,scss作为拓展名。另一种是最早的sass语法格式，被称为缩进格式通常简称“Sass”，是一种简化格式。它使用“缩进”代替花括号表示属性属于某个选择器，用“换行”代替“分号”分隔属性，很多人认为这样做比SCSS更容易阅读，书写也更快速。缩进格式也可以使用Sass的全部功能，只是与SCSS相比个别地方采取了不同的表达方式。这种格式以.sass作为拓展名。</p>\n<p>任何一种格式可以直接导入（@import）到另一种格式中使用，或者通过sass-convert命令行工具转换成另一种格式</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Convert Sass to SCSS</span><br><span class=\"line\">$ sass-convert style<span class=\"selector-class\">.sass</span> style<span class=\"selector-class\">.scss</span></span><br><span class=\"line\"></span><br><span class=\"line\"># Convert SCSS to Sass</span><br><span class=\"line\">$ sass-convert style<span class=\"selector-class\">.scss</span> style<span class=\"selector-class\">.sass</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Sass\"><a href=\"#使用Sass\" class=\"headerlink\" title=\"使用Sass\"></a>使用Sass</h3><hr>\n<p>Sass可以通过以下三种方式使用：作为命令行工具，作为独立的Ruby模块，或者作为Rack-enabled框架的插件。无论哪种方式都需要先安装sass gem(windows系统需要安装Ruby)</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install sass</span><br><span class=\"line\"><span class=\"comment\">//在命令中运行Sass</span></span><br><span class=\"line\">sass <span class=\"selector-tag\">input</span> <span class=\"selector-class\">.scss</span> output <span class=\"selector-class\">.css</span></span><br><span class=\"line\"><span class=\"comment\">//监视单个Sass文件，每次修改并保存时自动编译</span></span><br><span class=\"line\">sass <span class=\"attr\">--watch</span> <span class=\"selector-tag\">input</span> <span class=\"selector-class\">.scss</span>:output .css</span><br><span class=\"line\">//监视整个文件夹</span><br><span class=\"line\">sass --wwatch app/sass:public/stylesheets</span><br><span class=\"line\">//在Ruby中使用Sass也非常容易，Sass gem安装完毕后运行require <span class=\"string\">&quot;sass&quot;</span>然后按照下面的方法使用Sass::Engine</span><br><span class=\"line\">engine = Sass::Engine.<span class=\"built_in\">new</span>(<span class=\"string\">&quot;#main &#123;background-color:#0000ff&#125;&quot;</span>,:syntax =&gt; :scss)</span><br><span class=\"line\">engine.render #=&gt; <span class=\"string\">&quot;#main &#123; background-color: #0000ff;&#125;\\n&quot;</span> </span><br></pre></td></tr></table></figure>\n\n<p><strong>缓存</strong></p>\n<p>Sass自动缓存编译后的模板与partials，这样做能够显著提升重新编译的速度，尤其在处理由@import导入多个子文件的大型项目时</p>\n<p>单独使用Sass，缓存内容保存在.sass-cache文件夹中。在Rails和Merb项目中缓存文件保存在tmp/sass-cache文件夹中（可通过:cache_location修改路径）。禁用缓存可将:cache设为false</p>\n<p>判断语法格式</p>\n<p>Sass命令行工具根据文件的拓展名判断所使用的语法格式，没有文件名sass命令默认编译.sass文件，添加 –scss选项或者使用scss命令编译SCSS命令编译SCSS文件</p>\n<p>编码格式</p>\n<p>在Ruby1.9及以上环境中运行Sass时，Sass对文件的编码格式比较敏感，首先会根据CSS spec判断样式文件的编码格式，如果失败则检测Ruby string encoding。也就是说，Sass首先检查Unicode byte order mark，然后是@charset声明，最后是Ruby string encoding，加入都没有检测到，默认使用UTF-8编码。</p>\n<p>与css相同，使用@charset可以声明特定的编码格式。在样式文件的起始位置插入@charset “encoding-name”，Sass将会按照给出的编码格式编译文件。注意所使用的编码格式必须可转换为Unicode字符集</p>\n<h3 id=\"css功能扩展\"><a href=\"#css功能扩展\" class=\"headerlink\" title=\"css功能扩展\"></a>css功能扩展</h3><hr>\n<p><strong>嵌套规则</strong></p>\n<p>Sass允许将一套css样式嵌套进另一套样式中，内层的样式将它外层的选择器作为父选择器，</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#00ff00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">97%</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.redbox</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000000</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">转译为</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#00ff00</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">97%</span>; &#125;</span><br><span class=\"line\">  <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> <span class=\"selector-class\">.redbox</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000000</span>; </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>父选择器&amp;</strong></p>\n<p>在嵌套css规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定hover样式时，或者当body元素有某个classname时，可以用&amp;代表嵌套规则外层的父选择器</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">  &amp;<span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> &amp; &#123; <span class=\"attribute\">font-weight</span>: normal; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: none; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal; </span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>占位符选择器%foo</strong></p>\n<p>Sass额外提供了一种特殊类型的选择器：占位符选择器。与常用的id与class选择器写法相似，只是#或.替换成了%。必须通过@extend指令调用。</p>\n<h3 id=\"注释-与\"><a href=\"#注释-与\" class=\"headerlink\" title=\"注释/* */与//\"></a>注释/* */与//</h3><hr>\n<p>Sass支持标准的css多行注释/* */，以及单行注释//，前者会被完整输出到编译后的css文件中，而后者则不会</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* This comment is</span></span><br><span class=\"line\"><span class=\"comment\"> * several lines long.</span></span><br><span class=\"line\"><span class=\"comment\"> * since it uses the CSS comment syntax,</span></span><br><span class=\"line\"><span class=\"comment\"> * it will appear in the CSS output. */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123; <span class=\"attribute\">color</span>: black; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// These comments are only one line long each.</span></span><br><span class=\"line\"><span class=\"comment\">// They won&#x27;t appear in the CSS output,</span></span><br><span class=\"line\"><span class=\"comment\">// since they use the single-line comment syntax.</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123; <span class=\"attribute\">color</span>: green; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* This comment is</span></span><br><span class=\"line\"><span class=\"comment\"> * several lines long.</span></span><br><span class=\"line\"><span class=\"comment\"> * since it uses the CSS comment syntax,</span></span><br><span class=\"line\"><span class=\"comment\"> * it will appear in the CSS output. */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: black; &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: green; </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SassScript\"><a href=\"#SassScript\" class=\"headerlink\" title=\"SassScript\"></a>SassScript</h3><p>在css属性的基础上Sass提供了一些名为SassScript的新功能。SassScript可作用于任何属性，允许属性使用变量、算数运算等额外功能。</p>\n<p>通过interpolation，SassScript甚至可以生成选择器或属性名，这一点对编写mixin有很大帮助</p>\n<p>Interractive Shell可以在命令行中测试SassScript的功能。在命令行中输入sass -i，然后输入想要测试的SassScript查看输出结果</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sass -<span class=\"selector-tag\">i</span></span><br><span class=\"line\">&gt;&gt; &quot;Hello, Sassy World!&quot;</span><br><span class=\"line\">&quot;Hello, Sassy World!&quot;</span><br><span class=\"line\">&gt;&gt; <span class=\"number\">1px</span> + <span class=\"number\">1px</span> + <span class=\"number\">1px</span></span><br><span class=\"line\"><span class=\"number\">3px</span></span><br><span class=\"line\">&gt;&gt; <span class=\"selector-id\">#777</span> + <span class=\"selector-id\">#777</span></span><br><span class=\"line\"><span class=\"selector-id\">#eeeeee</span></span><br><span class=\"line\">&gt;&gt; <span class=\"selector-id\">#777</span> + <span class=\"selector-id\">#888</span></span><br><span class=\"line\">white</span><br></pre></td></tr></table></figure>\n\n<p><strong>变量$</strong></p>\n<p>SassScript最普遍的用法就是变量，变量以美元符号开头，赋值方法与css属性的写法一样</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$width</span>: <span class=\"number\">5em</span></span><br><span class=\"line\"></span><br><span class=\"line\">#main &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"variable\">$width</span>;<span class=\"comment\">// 5em</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加!global</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">$width</span>: <span class=\"number\">5em</span> !global;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"variable\">$width</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"variable\">$width</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">转译为</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">5em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">5em</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>数据类型</strong></p>\n<p>SassScript支持6种主要的数据类型，数字、字符串、颜色、布尔型、空值、数组、maps</p>\n<p><strong>字符串</strong></p>\n<p>SassScript支持css的两种字符串类型：有引号字符串，如“”和‘’；与无引号字符串，在编译css文件时不会改变其类型。只有一种情况除外，使用#{}（interpolation）时，有引号字符串将被编译为无引号字符串，这样便于在mixin中引用选择器名</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@mixin</span> firefox-message(<span class=\"variable\">$selector</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> #&#123;<span class=\"variable\">$selector</span>&#125;<span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&quot;Hi, Firefox users!&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@include</span> firefox-message(<span class=\"string\">&quot;.header&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> <span class=\"selector-class\">.header</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;Hi, Firefox users!&quot;</span>; </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>数组</strong></p>\n<p>数组指Sass如何处理cs中margin：10px 15px 0 0这样通过空格或者逗号分隔的一系列的值。独立的值也被视为数组</p>\n<p>数组本身没有太多功能，Sass list functions赋予了数组更多的新功能；nth函数可以直接访问数组中的某一项，join函数可以将多个数组连接在一起，append函数可以在数组中添加新值；而@each指令能够遍历数组中的每一项</p>\n<p><strong>运算</strong></p>\n<p>所有的数据类型都支持相等运算==或!=，此外，每种数据也有其各自支持的运算方式SassScript支持数字的加减乘除、取整等运算（+，-，*，/,%），如果必要会在不同单位见转换值</p>\n<p>插值语句#{}</p>\n<p>通过#{}插值语句可以在选择器或属性名中使用变量</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$name</span>: foo;</span><br><span class=\"line\"><span class=\"variable\">$attr</span>: border;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span>.#&#123;<span class=\"variable\">$name</span>&#125; &#123;</span><br><span class=\"line\">  #&#123;<span class=\"variable\">$attr</span>&#125;-<span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.foo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-color</span>: blue;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Rules与指令\"><a href=\"#Rules与指令\" class=\"headerlink\" title=\"@-Rules与指令\"></a>@-Rules与指令</h3><p>Sass支持所有的css3 @-Rules，以及Sass特有的指令</p>\n<p><strong>@import</strong></p>\n<p>Sass在当前地址，或Rack，Rails，Merb的Sass文件地址寻找Sass文件，如果需要设定其他地址，可以用：load_paths选项，或者在命令中输入–load-path命令</p>\n<p>通常，@import寻找Sass文件并将其导入，但在以下情况下，@important寻找Sass文件并将其导入，但在以下情况下，@import仅作为普通的css语句，不会导入任何Sass文件，文件拓展名是.css，文件名以http://开头，文件名是url(),@import包含media queries</p>\n<p>如果不在上诉情况内，文件的拓展名是.scss或.sass，则导入成功</p>\n<p><strong>@media</strong></p>\n<p>Sass中@media指令与css中用法一样，只是增加了一点额外的功能：允许其在css规则中嵌套。如果@media嵌套在css规则内，编译时，@media将被编译到文件的最外层，包含嵌套的父选择器。这个功能让@media用起来更方便，不需要重复使用选择器，也不会打乱css的书写流程</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">orientation</span>: landscape) &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.sidebar</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"控制指令\"><a href=\"#控制指令\" class=\"headerlink\" title=\"控制指令\"></a>控制指令</h3><p><strong>@if</strong></p>\n<p>当@if的表达式返回值不是false或者null时，条件成立，输出{}内的代码</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> <span class=\"number\">1</span> + <span class=\"number\">1</span> == <span class=\"number\">2</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> <span class=\"number\">5</span> &lt; <span class=\"number\">3</span> &#123; <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> dotted; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">@if</span> null  &#123; <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> double; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@for</strong></p>\n<p>@for指令可以限制的范围内重复输出格式，每次按要求对输出结果做出变动。这个指令包含两种格式：@for $var from  through ,区别在于through与to的含义：当使用through时，条件范围包含与的值，而使用to时条件范围只包含的值不包含的值。另外，$var可以是任何变量，比如$i,和必须是整数值</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@for</span> <span class=\"variable\">$i</span> from <span class=\"number\">1</span> through <span class=\"number\">3</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.item-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123; <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * <span class=\"variable\">$i</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-class\">.item-1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">2em</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">4em</span>; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item-3</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">6em</span>; </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@each</strong></p>\n<p>@each指令的格式是$var in ,$var可以是任何变量名，比如$length或者$name，而是一连串的值，也就是值列表</p>\n<p>@each将变量$var作用于值列表中的每一个项目，然后输出结果</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@each</span> <span class=\"variable\">$animal</span> in puma, sea-slug, egret, salamander &#123;</span><br><span class=\"line\">  .#&#123;<span class=\"variable\">$animal</span>&#125;-<span class=\"attribute\">icon</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/#&#123;$animal&#125;.png&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-class\">.puma-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/puma.png&#x27;</span>); &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.sea-slug-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/sea-slug.png&#x27;</span>); &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.egret-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/egret.png&#x27;</span>); &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.salamander-icon</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;/images/salamander.png&#x27;</span>); &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>@while</strong></p>\n<p>@while指令重复输出格式知道表达式返回结果为false。这样库实现比@for更复杂的循环，只是很少会用到</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$i</span>: <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"keyword\">@while</span> <span class=\"variable\">$i</span> &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.item-</span>#&#123;<span class=\"variable\">$i</span>&#125; &#123; <span class=\"attribute\">width</span>: <span class=\"number\">2em</span> * <span class=\"variable\">$i</span>; &#125;</span><br><span class=\"line\">  <span class=\"variable\">$i</span>: <span class=\"variable\">$i</span> - <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-class\">.item-6</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">12em</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item-4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">8em</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.item-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">4em</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"混合指令\"><a href=\"#混合指令\" class=\"headerlink\" title=\"混合指令\"></a>混合指令</h3><p>混合指令用于定义可重复使用的样式，避免了使用无语意的class，比如.float-left。混合指令可以包含所有的css规则，绝大部分Sass规则，甚至通过参数功能引入变量，输出多样化的样式</p>\n<h3 id=\"函数指令\"><a href=\"#函数指令\" class=\"headerlink\" title=\"函数指令\"></a>函数指令</h3><p>Sass支持自定义函数，并能在如何属性值或Sass Script中使用</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$grid-width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\"><span class=\"variable\">$gutter-width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@function</span> grid-width(<span class=\"variable\">$n</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@return</span> <span class=\"variable\">$n</span> * <span class=\"variable\">$grid-width</span> + (<span class=\"variable\">$n</span> - <span class=\"number\">1</span>) * <span class=\"variable\">$gutter-width</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123; <span class=\"attribute\">width</span>: <span class=\"built_in\">grid-width</span>(<span class=\"number\">5</span>); &#125;</span><br><span class=\"line\"><span class=\"comment\">//转译为</span></span><br><span class=\"line\"><span class=\"selector-id\">#sidebar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">240px</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><p>Sass默认的css输出格式很美观也能清晰反映文档结构，为满足其他需求Sass也提供了多种输出格式</p>\n<p>Sass提供了四种输出格式，可以通过：style option选项设定，或者在命令行中使用 – style选项</p>\n<p><strong>:nested</strong></p>\n<p>Nested样式是Sass默认的输出格式，能够清晰反映css与html的结构关系。选择器与属性等单独占用一行，缩进量与Sass文件中一致，每行的所尽量反映了其在嵌套规则内的层数。当阅读大型文件时，这种样式可以很容易地分析文件的主要结构</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>; &#125;</span><br><span class=\"line\">  <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">10em</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.huge</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">10em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>:expanded</strong></p>\n<p>Expanded输出更像是手写的样式，选择器、属性等占用一行，属性根据选择器缩进，而选择器不做任何缩进</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.huge</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">10em</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>:compact</strong></p>\n<p>compact输出方式比起上面两种占用的空间更少，每条css规则只占一行，包含其下的所有属性。嵌套过的选择器在输出时没有空行，不嵌套的选择器会输出空白行作为分隔符</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>; <span class=\"attribute\">background-color</span>: <span class=\"number\">#000</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">10em</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.huge</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">10em</span>; <span class=\"attribute\">font-weight</span>: bold; <span class=\"attribute\">text-decoration</span>: underline; &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>:compressed</strong></p>\n<p>compessed输出方式删除所有无意义的空格、空白行、以及注释，力求将文件体积压缩到最小，同时也会做出其他调整，比如会自动替换占用空间最小的颜色表达方式</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#main</span>&#123;<span class=\"attribute\">color</span>:<span class=\"number\">#fff</span>;<span class=\"attribute\">background-color</span>:<span class=\"number\">#000</span>&#125;<span class=\"selector-id\">#main</span> <span class=\"selector-tag\">p</span>&#123;<span class=\"attribute\">width</span>:<span class=\"number\">10em</span>&#125;<span class=\"selector-class\">.huge</span>&#123;<span class=\"attribute\">font-size</span>:<span class=\"number\">10em</span>;<span class=\"attribute\">font-weight</span>:bold;<span class=\"attribute\">text-decoration</span>:underline&#125;</span><br></pre></td></tr></table></figure>"},{"title":"毕业后的第一年-2022总结","date":"2022-12-30T02:36:15.000Z","password":"0208","typora-copy-images-to":"upload","top":110,"_content":"\n***\n\n<!-- ![image-20221230094407153](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221230094407153.png) -->\n\n踩着2022的尾巴，总结一下2022的我，给2023的我一些期盼\n\n<!--more-->\n\n### 2022\n\n#### 同盾实习\n\n去年的这个时候，我已经在同盾实习了四个月。因为一个前辈的建议，我打算一直留在同盾，争取可以在顺利转正。当时和我一起来的还有另一个实习生，我们一起负责同盾大数据平台的，当时是有一个大佬带着我们两个一块开发的，后来在11月份的时候大佬跳槽了。我和另一个实习生开发大数据平台，有过加班，但是好在没有经历过当时上一届的毕业生的同事说的通宵加班。当时我们的产品功能还有所欠缺，突然售前说找到一个客户，需要赶紧增加一些产品的功能，然后我们就开始连续的不断开发中，最后快结束的时候还持续加班一个礼拜，每天都是11点多回家。因为售前的提的功能过多，项目负责人也一直和售前人员有过争吵。最后好在产品成功卖出去了，不过好像和我没有什么关系，甚至我知道产品卖出去了也都是听后端和我聊天的时候说的。后来听说项目要交给别的部门去开发了，把产品和开发都调过去，但是我们两个实习生并没有调过去，我大概就知道了我的命运。另一个是实习生是在4月份走了，说回学校准备毕业设计。我继续留了下来，保持着最后的幻想。2022年的金三银四也是一片寒气，我也偶尔去投一些简历，但是都没有什么消息。终于主管找我谈话了，让我去投一些简历，公司没有hc了。下定决心之后我开始积极的投简历和面试，那个时候我还没有背八股文的想法，也没有总结的习惯，面试的时候全凭头铁，因此也错过了一些好公司。不知道是因为紧张还是什么，我拿到两份offer后就在思考去哪个了，两个薪资差不多，但是一个是初创公司，工作很饱和，前景很不错。另一个是一个平稳的小公司，工作不忙，面试官也说会给我一个月的时间去学习一下基础。于是我就来到了现在的这个公司，尽管我当时没有一个好的学习习惯，但是我知道自己还很菜，需要更多的时间去学习。（ps:从同盾离职之后我发现我之前的大数据项目是因为不赚钱，后来不打算继续开发，留着公司内部自己用。项目的负责人和产品等人也都离职了）\n\n在同盾我从一个只会用vue搭建一个简单系统的大学生成为了可以用react+antd搭建简单中后台项目的打工人，遗憾的是我并没有找到属于自己的学习方式。\n\n#### 冰魄网络\n\n我从同盾离职到冰魄入职是无缝衔接的，我也不知道为什么我不给自己留一点时间休息，可能我有打工人的潜力吧。在冰魄的的第一个月，主管给了我一份前端知识脑图，还有一些链接让我去把基础巩固一遍。我之前学习都是看视频教程，还没有这样一直看各种官网学习的经历，刚开始的几天效率还是不错的，后面看着特别容易犯困，效率不高，后面我就试着去做笔记，不那么容易犯困。经过一个月对基础的巩固，我总算也是学到了一些东西，更重要的是我学会如何去学习一些新东西。在开始做项目之前，我先去把typescript和微信小程序和vant的官网去看了一遍，因为接下来的项目的技术栈是原生微信小程序+vant+ts。在做项目的时候，主管一直强调思想先行，不然很容易反工。做之前先想好，想清楚之后到了真正做的时候就会很快。之前苦练基础也很好的提供了我操作数据的能力。做完小程序的项目后，我被安排了一个改造公司官网的任务。公司官网项目的技术栈是next搭建的ssr。这对我来说又是一个新的技术，这个时候，通过自己去看官网已经能大概的掌握一门新技术，我觉得这种能力很重要。在冰魄其实真的没有什么工作，更多的时间是自己用来学习，如果没有目标学习起来是比较迷茫，而一旦想清楚了自己的学习方向就会事半功倍。我从基础开始，跟着自己的兴趣学习了很多东西。\n\n#### 毕业答辩\n\n我的毕业设计是家庭族谱官网系统，大部分时间我是在思考，我应该怎么去做这个系统，需要把这个系统做到什么程度，应该使用哪些技术栈。最后我把我的系统分成了四个模块，签名墙，族谱，照片墙，数据管理。答辩的时候我请了两周的假回学校，虽然还是有点赶。两周的时间里我很充实，故友相逢，总是有说不完的话。这也是我大学最后的两周。在大学做什么事情的成本都很低，在社会上做什么都得考虑一下代价。 毕业答辩顺利过去，我的大学生活也结束了。好好做一个打工人，为了生活为了钱。\n\n#### [我的博客](https://rht-fsang.github.io/fsang/)\n\n在大学的时候，我的老师曾经要求我们每个人给自己写一个博客作为课程设计。那个时候的我因为博客就一定需要前端页面和后端接口才能实现，最后我只是做好了前端页面，后端接口对我来说有点难就放弃了。其实一个博客还是很重要的，可以作为一个向别人展示自己的平台。在学习next的时候，我发现这个很适合搭建博客，后来因为不方便部署就战时搁置了，通过搜索我了解到hexo这个博客框架，最重要的是他支持一键部署GitHub。于是就着手搭建起了我第一个博客。我把我之前的笔记全部都搬到了博客上。不久前我刚刚在阿里云上买了一个服务器，后面有时间我还是会用next框架重构一下我的博客，然后放到我的服务器上去。\n\n### 2023\n\n不知不觉我已经从一个学生变成一个打工人。虽然现在还是会想念在学校的快乐生活，但是我知道我只能向前看。新的一年里，我希望有以下改变。\n\n#### 生活\n\n周末多出去走走，找到新到的娱乐方式。早日买一辆电车，这样方便短期假期回家看看，和外出旅游。\n\n#### 技术\n\n年底入手mac pro，预先善其事，必先利其器。第一台电脑是大学的时候买的，现在已经不能完成基本的开发了。所以我一直在筹划着买一台mac pro，方便以后能够更好的开发。\n\n进一步学习nest框架，拥有开发一个简单的后台项目的能力。我觉得有后端能力是必须的，也许不需要更精通，但是必须会一点，这样在前后端交互的时候也能更加的流畅。有时候开发一些项目后端的能力也是必不可少的。\n\n进一步掌握ts开发\n\n进一步学习next，熟练的开发各类官网\n\n继续学习算法","source":"_posts/2022总结.md","raw":"---\ntitle: 毕业后的第一年-2022总结\ndate: 2022-12-30 10:36:15\ntags: 总结\ncategories: 生活\npassword: 0208\ntypora-copy-images-to: upload\ntop: 110\n\n---\n\n***\n\n<!-- ![image-20221230094407153](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221230094407153.png) -->\n\n踩着2022的尾巴，总结一下2022的我，给2023的我一些期盼\n\n<!--more-->\n\n### 2022\n\n#### 同盾实习\n\n去年的这个时候，我已经在同盾实习了四个月。因为一个前辈的建议，我打算一直留在同盾，争取可以在顺利转正。当时和我一起来的还有另一个实习生，我们一起负责同盾大数据平台的，当时是有一个大佬带着我们两个一块开发的，后来在11月份的时候大佬跳槽了。我和另一个实习生开发大数据平台，有过加班，但是好在没有经历过当时上一届的毕业生的同事说的通宵加班。当时我们的产品功能还有所欠缺，突然售前说找到一个客户，需要赶紧增加一些产品的功能，然后我们就开始连续的不断开发中，最后快结束的时候还持续加班一个礼拜，每天都是11点多回家。因为售前的提的功能过多，项目负责人也一直和售前人员有过争吵。最后好在产品成功卖出去了，不过好像和我没有什么关系，甚至我知道产品卖出去了也都是听后端和我聊天的时候说的。后来听说项目要交给别的部门去开发了，把产品和开发都调过去，但是我们两个实习生并没有调过去，我大概就知道了我的命运。另一个是实习生是在4月份走了，说回学校准备毕业设计。我继续留了下来，保持着最后的幻想。2022年的金三银四也是一片寒气，我也偶尔去投一些简历，但是都没有什么消息。终于主管找我谈话了，让我去投一些简历，公司没有hc了。下定决心之后我开始积极的投简历和面试，那个时候我还没有背八股文的想法，也没有总结的习惯，面试的时候全凭头铁，因此也错过了一些好公司。不知道是因为紧张还是什么，我拿到两份offer后就在思考去哪个了，两个薪资差不多，但是一个是初创公司，工作很饱和，前景很不错。另一个是一个平稳的小公司，工作不忙，面试官也说会给我一个月的时间去学习一下基础。于是我就来到了现在的这个公司，尽管我当时没有一个好的学习习惯，但是我知道自己还很菜，需要更多的时间去学习。（ps:从同盾离职之后我发现我之前的大数据项目是因为不赚钱，后来不打算继续开发，留着公司内部自己用。项目的负责人和产品等人也都离职了）\n\n在同盾我从一个只会用vue搭建一个简单系统的大学生成为了可以用react+antd搭建简单中后台项目的打工人，遗憾的是我并没有找到属于自己的学习方式。\n\n#### 冰魄网络\n\n我从同盾离职到冰魄入职是无缝衔接的，我也不知道为什么我不给自己留一点时间休息，可能我有打工人的潜力吧。在冰魄的的第一个月，主管给了我一份前端知识脑图，还有一些链接让我去把基础巩固一遍。我之前学习都是看视频教程，还没有这样一直看各种官网学习的经历，刚开始的几天效率还是不错的，后面看着特别容易犯困，效率不高，后面我就试着去做笔记，不那么容易犯困。经过一个月对基础的巩固，我总算也是学到了一些东西，更重要的是我学会如何去学习一些新东西。在开始做项目之前，我先去把typescript和微信小程序和vant的官网去看了一遍，因为接下来的项目的技术栈是原生微信小程序+vant+ts。在做项目的时候，主管一直强调思想先行，不然很容易反工。做之前先想好，想清楚之后到了真正做的时候就会很快。之前苦练基础也很好的提供了我操作数据的能力。做完小程序的项目后，我被安排了一个改造公司官网的任务。公司官网项目的技术栈是next搭建的ssr。这对我来说又是一个新的技术，这个时候，通过自己去看官网已经能大概的掌握一门新技术，我觉得这种能力很重要。在冰魄其实真的没有什么工作，更多的时间是自己用来学习，如果没有目标学习起来是比较迷茫，而一旦想清楚了自己的学习方向就会事半功倍。我从基础开始，跟着自己的兴趣学习了很多东西。\n\n#### 毕业答辩\n\n我的毕业设计是家庭族谱官网系统，大部分时间我是在思考，我应该怎么去做这个系统，需要把这个系统做到什么程度，应该使用哪些技术栈。最后我把我的系统分成了四个模块，签名墙，族谱，照片墙，数据管理。答辩的时候我请了两周的假回学校，虽然还是有点赶。两周的时间里我很充实，故友相逢，总是有说不完的话。这也是我大学最后的两周。在大学做什么事情的成本都很低，在社会上做什么都得考虑一下代价。 毕业答辩顺利过去，我的大学生活也结束了。好好做一个打工人，为了生活为了钱。\n\n#### [我的博客](https://rht-fsang.github.io/fsang/)\n\n在大学的时候，我的老师曾经要求我们每个人给自己写一个博客作为课程设计。那个时候的我因为博客就一定需要前端页面和后端接口才能实现，最后我只是做好了前端页面，后端接口对我来说有点难就放弃了。其实一个博客还是很重要的，可以作为一个向别人展示自己的平台。在学习next的时候，我发现这个很适合搭建博客，后来因为不方便部署就战时搁置了，通过搜索我了解到hexo这个博客框架，最重要的是他支持一键部署GitHub。于是就着手搭建起了我第一个博客。我把我之前的笔记全部都搬到了博客上。不久前我刚刚在阿里云上买了一个服务器，后面有时间我还是会用next框架重构一下我的博客，然后放到我的服务器上去。\n\n### 2023\n\n不知不觉我已经从一个学生变成一个打工人。虽然现在还是会想念在学校的快乐生活，但是我知道我只能向前看。新的一年里，我希望有以下改变。\n\n#### 生活\n\n周末多出去走走，找到新到的娱乐方式。早日买一辆电车，这样方便短期假期回家看看，和外出旅游。\n\n#### 技术\n\n年底入手mac pro，预先善其事，必先利其器。第一台电脑是大学的时候买的，现在已经不能完成基本的开发了。所以我一直在筹划着买一台mac pro，方便以后能够更好的开发。\n\n进一步学习nest框架，拥有开发一个简单的后台项目的能力。我觉得有后端能力是必须的，也许不需要更精通，但是必须会一点，这样在前后端交互的时候也能更加的流畅。有时候开发一些项目后端的能力也是必不可少的。\n\n进一步掌握ts开发\n\n进一步学习next，熟练的开发各类官网\n\n继续学习算法","slug":"2022总结","published":1,"updated":"2023-02-16T10:00:54.490Z","_id":"clc9z2v3q0000qgutcifz98fd","comments":1,"layout":"post","photos":[],"link":"","content":"<hr>\n<!-- ![image-20221230094407153](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221230094407153.png) -->\n\n<p>踩着2022的尾巴，总结一下2022的我，给2023的我一些期盼</p>\n<span id=\"more\"></span>\n\n<h3 id=\"2022\"><a href=\"#2022\" class=\"headerlink\" title=\"2022\"></a>2022</h3><h4 id=\"同盾实习\"><a href=\"#同盾实习\" class=\"headerlink\" title=\"同盾实习\"></a>同盾实习</h4><p>去年的这个时候，我已经在同盾实习了四个月。因为一个前辈的建议，我打算一直留在同盾，争取可以在顺利转正。当时和我一起来的还有另一个实习生，我们一起负责同盾大数据平台的，当时是有一个大佬带着我们两个一块开发的，后来在11月份的时候大佬跳槽了。我和另一个实习生开发大数据平台，有过加班，但是好在没有经历过当时上一届的毕业生的同事说的通宵加班。当时我们的产品功能还有所欠缺，突然售前说找到一个客户，需要赶紧增加一些产品的功能，然后我们就开始连续的不断开发中，最后快结束的时候还持续加班一个礼拜，每天都是11点多回家。因为售前的提的功能过多，项目负责人也一直和售前人员有过争吵。最后好在产品成功卖出去了，不过好像和我没有什么关系，甚至我知道产品卖出去了也都是听后端和我聊天的时候说的。后来听说项目要交给别的部门去开发了，把产品和开发都调过去，但是我们两个实习生并没有调过去，我大概就知道了我的命运。另一个是实习生是在4月份走了，说回学校准备毕业设计。我继续留了下来，保持着最后的幻想。2022年的金三银四也是一片寒气，我也偶尔去投一些简历，但是都没有什么消息。终于主管找我谈话了，让我去投一些简历，公司没有hc了。下定决心之后我开始积极的投简历和面试，那个时候我还没有背八股文的想法，也没有总结的习惯，面试的时候全凭头铁，因此也错过了一些好公司。不知道是因为紧张还是什么，我拿到两份offer后就在思考去哪个了，两个薪资差不多，但是一个是初创公司，工作很饱和，前景很不错。另一个是一个平稳的小公司，工作不忙，面试官也说会给我一个月的时间去学习一下基础。于是我就来到了现在的这个公司，尽管我当时没有一个好的学习习惯，但是我知道自己还很菜，需要更多的时间去学习。（ps:从同盾离职之后我发现我之前的大数据项目是因为不赚钱，后来不打算继续开发，留着公司内部自己用。项目的负责人和产品等人也都离职了）</p>\n<p>在同盾我从一个只会用vue搭建一个简单系统的大学生成为了可以用react+antd搭建简单中后台项目的打工人，遗憾的是我并没有找到属于自己的学习方式。</p>\n<h4 id=\"冰魄网络\"><a href=\"#冰魄网络\" class=\"headerlink\" title=\"冰魄网络\"></a>冰魄网络</h4><p>我从同盾离职到冰魄入职是无缝衔接的，我也不知道为什么我不给自己留一点时间休息，可能我有打工人的潜力吧。在冰魄的的第一个月，主管给了我一份前端知识脑图，还有一些链接让我去把基础巩固一遍。我之前学习都是看视频教程，还没有这样一直看各种官网学习的经历，刚开始的几天效率还是不错的，后面看着特别容易犯困，效率不高，后面我就试着去做笔记，不那么容易犯困。经过一个月对基础的巩固，我总算也是学到了一些东西，更重要的是我学会如何去学习一些新东西。在开始做项目之前，我先去把typescript和微信小程序和vant的官网去看了一遍，因为接下来的项目的技术栈是原生微信小程序+vant+ts。在做项目的时候，主管一直强调思想先行，不然很容易反工。做之前先想好，想清楚之后到了真正做的时候就会很快。之前苦练基础也很好的提供了我操作数据的能力。做完小程序的项目后，我被安排了一个改造公司官网的任务。公司官网项目的技术栈是next搭建的ssr。这对我来说又是一个新的技术，这个时候，通过自己去看官网已经能大概的掌握一门新技术，我觉得这种能力很重要。在冰魄其实真的没有什么工作，更多的时间是自己用来学习，如果没有目标学习起来是比较迷茫，而一旦想清楚了自己的学习方向就会事半功倍。我从基础开始，跟着自己的兴趣学习了很多东西。</p>\n<h4 id=\"毕业答辩\"><a href=\"#毕业答辩\" class=\"headerlink\" title=\"毕业答辩\"></a>毕业答辩</h4><p>我的毕业设计是家庭族谱官网系统，大部分时间我是在思考，我应该怎么去做这个系统，需要把这个系统做到什么程度，应该使用哪些技术栈。最后我把我的系统分成了四个模块，签名墙，族谱，照片墙，数据管理。答辩的时候我请了两周的假回学校，虽然还是有点赶。两周的时间里我很充实，故友相逢，总是有说不完的话。这也是我大学最后的两周。在大学做什么事情的成本都很低，在社会上做什么都得考虑一下代价。 毕业答辩顺利过去，我的大学生活也结束了。好好做一个打工人，为了生活为了钱。</p>\n<h4 id=\"我的博客\"><a href=\"#我的博客\" class=\"headerlink\" title=\"我的博客\"></a><a href=\"https://rht-fsang.github.io/fsang/\">我的博客</a></h4><p>在大学的时候，我的老师曾经要求我们每个人给自己写一个博客作为课程设计。那个时候的我因为博客就一定需要前端页面和后端接口才能实现，最后我只是做好了前端页面，后端接口对我来说有点难就放弃了。其实一个博客还是很重要的，可以作为一个向别人展示自己的平台。在学习next的时候，我发现这个很适合搭建博客，后来因为不方便部署就战时搁置了，通过搜索我了解到hexo这个博客框架，最重要的是他支持一键部署GitHub。于是就着手搭建起了我第一个博客。我把我之前的笔记全部都搬到了博客上。不久前我刚刚在阿里云上买了一个服务器，后面有时间我还是会用next框架重构一下我的博客，然后放到我的服务器上去。</p>\n<h3 id=\"2023\"><a href=\"#2023\" class=\"headerlink\" title=\"2023\"></a>2023</h3><p>不知不觉我已经从一个学生变成一个打工人。虽然现在还是会想念在学校的快乐生活，但是我知道我只能向前看。新的一年里，我希望有以下改变。</p>\n<h4 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h4><p>周末多出去走走，找到新到的娱乐方式。早日买一辆电车，这样方便短期假期回家看看，和外出旅游。</p>\n<h4 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h4><p>年底入手mac pro，预先善其事，必先利其器。第一台电脑是大学的时候买的，现在已经不能完成基本的开发了。所以我一直在筹划着买一台mac pro，方便以后能够更好的开发。</p>\n<p>进一步学习nest框架，拥有开发一个简单的后台项目的能力。我觉得有后端能力是必须的，也许不需要更精通，但是必须会一点，这样在前后端交互的时候也能更加的流畅。有时候开发一些项目后端的能力也是必不可少的。</p>\n<p>进一步掌握ts开发</p>\n<p>进一步学习next，熟练的开发各类官网</p>\n<p>继续学习算法</p>\n","site":{"data":{}},"excerpt":"<hr>\n<!-- ![image-20221230094407153](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/image-20221230094407153.png) -->\n\n<p>踩着2022的尾巴，总结一下2022的我，给2023的我一些期盼</p>","more":"<h3 id=\"2022\"><a href=\"#2022\" class=\"headerlink\" title=\"2022\"></a>2022</h3><h4 id=\"同盾实习\"><a href=\"#同盾实习\" class=\"headerlink\" title=\"同盾实习\"></a>同盾实习</h4><p>去年的这个时候，我已经在同盾实习了四个月。因为一个前辈的建议，我打算一直留在同盾，争取可以在顺利转正。当时和我一起来的还有另一个实习生，我们一起负责同盾大数据平台的，当时是有一个大佬带着我们两个一块开发的，后来在11月份的时候大佬跳槽了。我和另一个实习生开发大数据平台，有过加班，但是好在没有经历过当时上一届的毕业生的同事说的通宵加班。当时我们的产品功能还有所欠缺，突然售前说找到一个客户，需要赶紧增加一些产品的功能，然后我们就开始连续的不断开发中，最后快结束的时候还持续加班一个礼拜，每天都是11点多回家。因为售前的提的功能过多，项目负责人也一直和售前人员有过争吵。最后好在产品成功卖出去了，不过好像和我没有什么关系，甚至我知道产品卖出去了也都是听后端和我聊天的时候说的。后来听说项目要交给别的部门去开发了，把产品和开发都调过去，但是我们两个实习生并没有调过去，我大概就知道了我的命运。另一个是实习生是在4月份走了，说回学校准备毕业设计。我继续留了下来，保持着最后的幻想。2022年的金三银四也是一片寒气，我也偶尔去投一些简历，但是都没有什么消息。终于主管找我谈话了，让我去投一些简历，公司没有hc了。下定决心之后我开始积极的投简历和面试，那个时候我还没有背八股文的想法，也没有总结的习惯，面试的时候全凭头铁，因此也错过了一些好公司。不知道是因为紧张还是什么，我拿到两份offer后就在思考去哪个了，两个薪资差不多，但是一个是初创公司，工作很饱和，前景很不错。另一个是一个平稳的小公司，工作不忙，面试官也说会给我一个月的时间去学习一下基础。于是我就来到了现在的这个公司，尽管我当时没有一个好的学习习惯，但是我知道自己还很菜，需要更多的时间去学习。（ps:从同盾离职之后我发现我之前的大数据项目是因为不赚钱，后来不打算继续开发，留着公司内部自己用。项目的负责人和产品等人也都离职了）</p>\n<p>在同盾我从一个只会用vue搭建一个简单系统的大学生成为了可以用react+antd搭建简单中后台项目的打工人，遗憾的是我并没有找到属于自己的学习方式。</p>\n<h4 id=\"冰魄网络\"><a href=\"#冰魄网络\" class=\"headerlink\" title=\"冰魄网络\"></a>冰魄网络</h4><p>我从同盾离职到冰魄入职是无缝衔接的，我也不知道为什么我不给自己留一点时间休息，可能我有打工人的潜力吧。在冰魄的的第一个月，主管给了我一份前端知识脑图，还有一些链接让我去把基础巩固一遍。我之前学习都是看视频教程，还没有这样一直看各种官网学习的经历，刚开始的几天效率还是不错的，后面看着特别容易犯困，效率不高，后面我就试着去做笔记，不那么容易犯困。经过一个月对基础的巩固，我总算也是学到了一些东西，更重要的是我学会如何去学习一些新东西。在开始做项目之前，我先去把typescript和微信小程序和vant的官网去看了一遍，因为接下来的项目的技术栈是原生微信小程序+vant+ts。在做项目的时候，主管一直强调思想先行，不然很容易反工。做之前先想好，想清楚之后到了真正做的时候就会很快。之前苦练基础也很好的提供了我操作数据的能力。做完小程序的项目后，我被安排了一个改造公司官网的任务。公司官网项目的技术栈是next搭建的ssr。这对我来说又是一个新的技术，这个时候，通过自己去看官网已经能大概的掌握一门新技术，我觉得这种能力很重要。在冰魄其实真的没有什么工作，更多的时间是自己用来学习，如果没有目标学习起来是比较迷茫，而一旦想清楚了自己的学习方向就会事半功倍。我从基础开始，跟着自己的兴趣学习了很多东西。</p>\n<h4 id=\"毕业答辩\"><a href=\"#毕业答辩\" class=\"headerlink\" title=\"毕业答辩\"></a>毕业答辩</h4><p>我的毕业设计是家庭族谱官网系统，大部分时间我是在思考，我应该怎么去做这个系统，需要把这个系统做到什么程度，应该使用哪些技术栈。最后我把我的系统分成了四个模块，签名墙，族谱，照片墙，数据管理。答辩的时候我请了两周的假回学校，虽然还是有点赶。两周的时间里我很充实，故友相逢，总是有说不完的话。这也是我大学最后的两周。在大学做什么事情的成本都很低，在社会上做什么都得考虑一下代价。 毕业答辩顺利过去，我的大学生活也结束了。好好做一个打工人，为了生活为了钱。</p>\n<h4 id=\"我的博客\"><a href=\"#我的博客\" class=\"headerlink\" title=\"我的博客\"></a><a href=\"https://rht-fsang.github.io/fsang/\">我的博客</a></h4><p>在大学的时候，我的老师曾经要求我们每个人给自己写一个博客作为课程设计。那个时候的我因为博客就一定需要前端页面和后端接口才能实现，最后我只是做好了前端页面，后端接口对我来说有点难就放弃了。其实一个博客还是很重要的，可以作为一个向别人展示自己的平台。在学习next的时候，我发现这个很适合搭建博客，后来因为不方便部署就战时搁置了，通过搜索我了解到hexo这个博客框架，最重要的是他支持一键部署GitHub。于是就着手搭建起了我第一个博客。我把我之前的笔记全部都搬到了博客上。不久前我刚刚在阿里云上买了一个服务器，后面有时间我还是会用next框架重构一下我的博客，然后放到我的服务器上去。</p>\n<h3 id=\"2023\"><a href=\"#2023\" class=\"headerlink\" title=\"2023\"></a>2023</h3><p>不知不觉我已经从一个学生变成一个打工人。虽然现在还是会想念在学校的快乐生活，但是我知道我只能向前看。新的一年里，我希望有以下改变。</p>\n<h4 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h4><p>周末多出去走走，找到新到的娱乐方式。早日买一辆电车，这样方便短期假期回家看看，和外出旅游。</p>\n<h4 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h4><p>年底入手mac pro，预先善其事，必先利其器。第一台电脑是大学的时候买的，现在已经不能完成基本的开发了。所以我一直在筹划着买一台mac pro，方便以后能够更好的开发。</p>\n<p>进一步学习nest框架，拥有开发一个简单的后台项目的能力。我觉得有后端能力是必须的，也许不需要更精通，但是必须会一点，这样在前后端交互的时候也能更加的流畅。有时候开发一些项目后端的能力也是必不可少的。</p>\n<p>进一步掌握ts开发</p>\n<p>进一步学习next，熟练的开发各类官网</p>\n<p>继续学习算法</p>"},{"title":"状态管理-redux","typora-copy-images-to":"upload","top":111,"_content":"\n## Redux\n\nRedux是一个使用叫作\"actions\"的事件去管理和更新应用状态的模式和工具库。它以集中式Store的方式对整个应用中使用的状态进行集中管理，其规则确保状态只能以可预测的方式更新。\n\nRedux提供的模式和工具使你更容易理解应用程序中的状态合适、何地、为什么以及如何更新，以及当这些更改发生时你的应用程序逻辑将如何表现。Redux知道你编写可预测和可测试的代码，这有助于让你确信你的应用程序将按预期工作\n\n适用场景\n\n- 在应用的大量地方，都存在大量的状态\n- 应用状态会随着时间的推移而频繁更新\n- 更新该状态的逻辑可能很复杂\n- 中型和大型代码量的应用，很多人协同开发\n\n<!--more-->\n#### 核心概念\n\n- 单一数据源\n- State是只读的\n- 使用Reducer纯函数进行更改\n\n#### Redux Toolkit\n\nRedux Toolkit是我们推荐的编写Redux逻辑的方法。它包含我们认为对于构建Redux应用程序必不可少的包和函数。Redux Toolkit构建在我们建议的最佳实践中，简化了大多数Redux任务，防止了常见错误，并使编写Redux应用程序变得更加容易\n\n#### Redux DevTools 拓展\n\nRedux DevTools 拓展可以显示Redux存储中状态随时间变化的历史记录。这允许你有效的调试应用程序，包括使用强大的技术，如“事件旅行调试”\n\n#### Redux Store\n\n所有Redux应用的中心都是store。\"store\"是保存应用程序的全局state的容器。\n\nstore是一个JavaScript对象，但是对于一般的对象它具有一些特殊的功能和能力：\n\n- 不要直接修改或更改保存在Redux存储中的状态\n- 更新状态的唯一方法是创建一个描述“应用程序中发生的某些事情”的普通action对象，然后将该action    dispatch到store以告诉它发生了什么\n- 当一个action被dispatch后，store会调用reducer方法，让其根剧action和旧state计算出新state\n- store会通知订阅者状态已更新，以便可以使用新数据更新UI界面\n\n#### Actions\n\naction是一个具有`type`字段的普通JavaScript对象。你可以将action看作应用程序中发生了什么的事情`type`字段是一个字符串，给这个action一个描述性的名字，比如`''todos/todoAdded''`。我们通常把那个类型的字符串写成“域/事件名称”，其中第一部分是这个action所属的特征或类别，第二部分是发生的具体事情。action对象可以有其他字段，其中包含有关发生的事情的附加信息。按照惯例，我们将该信息放在名为`payload`的字段中。\n\n```javascript\nconst addTodoAction = {\n    type:'todos/todoAdded',\n    payload:'Buy milk'\n}\n```\n\n#### Reducers\n\nreducer是一个函数，接收当前的`state`和一个`action`对象，必要时决定如何更新状态，并返回新状态。函数签名是：`(state,action) ⇒ newState`。你可以将reducer视为一个时间监听器，他根剧接收到的action类型处理事件。\n\nReducer必须符合一下规则：\n\n- 仅使用`state`和`action`参数计算新 的状态值\n- 禁止直接修改`state`。必须通过复制现有的`state`并对复制的值进行更改的方式来做 不可变更新\n- 禁止任何异步逻辑、依赖随机值或者“副作用”的代码\n\nReducer函数内部的逻辑通常包括一下步骤：\n\n检查Reducer是否关心这个action，是的话就复制state，使用新值更新state副本，然后返回新state，不是的返回原来的state不变\n\n```javascript\nconst initialState = { value: 0 }\n\nfunction counterReducer(state = initialState, action) {\n  // 检查 reducer 是否关心这个 action\n  if (action.type === 'counter/increment') {\n    // 如果是，复制 `state`\n    return {\n      ...state,\n      // 使用新值更新 state 副本\n      value: state.value + 1\n    }\n  }\n  // 返回原来的 state 不变\n  return state\n}\n```\n\n#### Store\n\n当前Redux应用的状态存在于一个名为store的对象中。Store是通过传入一个reducer来创建的，并且有一个名为`getState`的方法，它返回当前状态值\n\n```javascript\nimport { configureStore } from '@reduxjs/toolkit'\n\nconst store = configureStore({ reducer: counterReducer })\n\nconsole.log(store.getState())\n// {value: 0}\n```\n\n#### Dispatch\n\nRedux store有一种方法叫`dispatch`。更新state的唯一方法是调用`store.dispatch`并传入一个action对象。store将执行所有reducer函数并计算更新后的state，调用`getState()`可以获取新state\n\n```javascript\nstore.dispatch({ type: 'counter/incremented' })\n\nconsole.log(store.getState())\n// {value: 1}\n```\n\n#### Selectors\n\nSelector函数可以从store状态书中提取指定的片段。随着应用变得越来越大，会遇到应用程序的不同部分需要读取相同的数据，selector可以避免重复这样的读取逻辑\n\n```javascript\nconst selectCounterValue = state => state.value\n\nconst currentValue = selectCounterValue(store.getState())\nconsole.log(currentValue)\n// 2\n```\n","source":"_posts/状态管理-redux.md","raw":"---\ntitle: 状态管理-redux\ntags: 学习\ncategories: 前端\ntypora-copy-images-to: upload\ntop: 111\n\n---\n\n## Redux\n\nRedux是一个使用叫作\"actions\"的事件去管理和更新应用状态的模式和工具库。它以集中式Store的方式对整个应用中使用的状态进行集中管理，其规则确保状态只能以可预测的方式更新。\n\nRedux提供的模式和工具使你更容易理解应用程序中的状态合适、何地、为什么以及如何更新，以及当这些更改发生时你的应用程序逻辑将如何表现。Redux知道你编写可预测和可测试的代码，这有助于让你确信你的应用程序将按预期工作\n\n适用场景\n\n- 在应用的大量地方，都存在大量的状态\n- 应用状态会随着时间的推移而频繁更新\n- 更新该状态的逻辑可能很复杂\n- 中型和大型代码量的应用，很多人协同开发\n\n<!--more-->\n#### 核心概念\n\n- 单一数据源\n- State是只读的\n- 使用Reducer纯函数进行更改\n\n#### Redux Toolkit\n\nRedux Toolkit是我们推荐的编写Redux逻辑的方法。它包含我们认为对于构建Redux应用程序必不可少的包和函数。Redux Toolkit构建在我们建议的最佳实践中，简化了大多数Redux任务，防止了常见错误，并使编写Redux应用程序变得更加容易\n\n#### Redux DevTools 拓展\n\nRedux DevTools 拓展可以显示Redux存储中状态随时间变化的历史记录。这允许你有效的调试应用程序，包括使用强大的技术，如“事件旅行调试”\n\n#### Redux Store\n\n所有Redux应用的中心都是store。\"store\"是保存应用程序的全局state的容器。\n\nstore是一个JavaScript对象，但是对于一般的对象它具有一些特殊的功能和能力：\n\n- 不要直接修改或更改保存在Redux存储中的状态\n- 更新状态的唯一方法是创建一个描述“应用程序中发生的某些事情”的普通action对象，然后将该action    dispatch到store以告诉它发生了什么\n- 当一个action被dispatch后，store会调用reducer方法，让其根剧action和旧state计算出新state\n- store会通知订阅者状态已更新，以便可以使用新数据更新UI界面\n\n#### Actions\n\naction是一个具有`type`字段的普通JavaScript对象。你可以将action看作应用程序中发生了什么的事情`type`字段是一个字符串，给这个action一个描述性的名字，比如`''todos/todoAdded''`。我们通常把那个类型的字符串写成“域/事件名称”，其中第一部分是这个action所属的特征或类别，第二部分是发生的具体事情。action对象可以有其他字段，其中包含有关发生的事情的附加信息。按照惯例，我们将该信息放在名为`payload`的字段中。\n\n```javascript\nconst addTodoAction = {\n    type:'todos/todoAdded',\n    payload:'Buy milk'\n}\n```\n\n#### Reducers\n\nreducer是一个函数，接收当前的`state`和一个`action`对象，必要时决定如何更新状态，并返回新状态。函数签名是：`(state,action) ⇒ newState`。你可以将reducer视为一个时间监听器，他根剧接收到的action类型处理事件。\n\nReducer必须符合一下规则：\n\n- 仅使用`state`和`action`参数计算新 的状态值\n- 禁止直接修改`state`。必须通过复制现有的`state`并对复制的值进行更改的方式来做 不可变更新\n- 禁止任何异步逻辑、依赖随机值或者“副作用”的代码\n\nReducer函数内部的逻辑通常包括一下步骤：\n\n检查Reducer是否关心这个action，是的话就复制state，使用新值更新state副本，然后返回新state，不是的返回原来的state不变\n\n```javascript\nconst initialState = { value: 0 }\n\nfunction counterReducer(state = initialState, action) {\n  // 检查 reducer 是否关心这个 action\n  if (action.type === 'counter/increment') {\n    // 如果是，复制 `state`\n    return {\n      ...state,\n      // 使用新值更新 state 副本\n      value: state.value + 1\n    }\n  }\n  // 返回原来的 state 不变\n  return state\n}\n```\n\n#### Store\n\n当前Redux应用的状态存在于一个名为store的对象中。Store是通过传入一个reducer来创建的，并且有一个名为`getState`的方法，它返回当前状态值\n\n```javascript\nimport { configureStore } from '@reduxjs/toolkit'\n\nconst store = configureStore({ reducer: counterReducer })\n\nconsole.log(store.getState())\n// {value: 0}\n```\n\n#### Dispatch\n\nRedux store有一种方法叫`dispatch`。更新state的唯一方法是调用`store.dispatch`并传入一个action对象。store将执行所有reducer函数并计算更新后的state，调用`getState()`可以获取新state\n\n```javascript\nstore.dispatch({ type: 'counter/incremented' })\n\nconsole.log(store.getState())\n// {value: 1}\n```\n\n#### Selectors\n\nSelector函数可以从store状态书中提取指定的片段。随着应用变得越来越大，会遇到应用程序的不同部分需要读取相同的数据，selector可以避免重复这样的读取逻辑\n\n```javascript\nconst selectCounterValue = state => state.value\n\nconst currentValue = selectCounterValue(store.getState())\nconsole.log(currentValue)\n// 2\n```\n","slug":"状态管理-redux","published":1,"date":"2023-03-07T03:29:11.926Z","updated":"2023-03-07T03:38:24.939Z","_id":"clexp5wzq00008d9bat183ayx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h2><p>Redux是一个使用叫作”actions”的事件去管理和更新应用状态的模式和工具库。它以集中式Store的方式对整个应用中使用的状态进行集中管理，其规则确保状态只能以可预测的方式更新。</p>\n<p>Redux提供的模式和工具使你更容易理解应用程序中的状态合适、何地、为什么以及如何更新，以及当这些更改发生时你的应用程序逻辑将如何表现。Redux知道你编写可预测和可测试的代码，这有助于让你确信你的应用程序将按预期工作</p>\n<p>适用场景</p>\n<ul>\n<li>在应用的大量地方，都存在大量的状态</li>\n<li>应用状态会随着时间的推移而频繁更新</li>\n<li>更新该状态的逻辑可能很复杂</li>\n<li>中型和大型代码量的应用，很多人协同开发</li>\n</ul>\n<span id=\"more\"></span>\n<h4 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h4><ul>\n<li>单一数据源</li>\n<li>State是只读的</li>\n<li>使用Reducer纯函数进行更改</li>\n</ul>\n<h4 id=\"Redux-Toolkit\"><a href=\"#Redux-Toolkit\" class=\"headerlink\" title=\"Redux Toolkit\"></a>Redux Toolkit</h4><p>Redux Toolkit是我们推荐的编写Redux逻辑的方法。它包含我们认为对于构建Redux应用程序必不可少的包和函数。Redux Toolkit构建在我们建议的最佳实践中，简化了大多数Redux任务，防止了常见错误，并使编写Redux应用程序变得更加容易</p>\n<h4 id=\"Redux-DevTools-拓展\"><a href=\"#Redux-DevTools-拓展\" class=\"headerlink\" title=\"Redux DevTools 拓展\"></a>Redux DevTools 拓展</h4><p>Redux DevTools 拓展可以显示Redux存储中状态随时间变化的历史记录。这允许你有效的调试应用程序，包括使用强大的技术，如“事件旅行调试”</p>\n<h4 id=\"Redux-Store\"><a href=\"#Redux-Store\" class=\"headerlink\" title=\"Redux Store\"></a>Redux Store</h4><p>所有Redux应用的中心都是store。”store”是保存应用程序的全局state的容器。</p>\n<p>store是一个JavaScript对象，但是对于一般的对象它具有一些特殊的功能和能力：</p>\n<ul>\n<li>不要直接修改或更改保存在Redux存储中的状态</li>\n<li>更新状态的唯一方法是创建一个描述“应用程序中发生的某些事情”的普通action对象，然后将该action    dispatch到store以告诉它发生了什么</li>\n<li>当一个action被dispatch后，store会调用reducer方法，让其根剧action和旧state计算出新state</li>\n<li>store会通知订阅者状态已更新，以便可以使用新数据更新UI界面</li>\n</ul>\n<h4 id=\"Actions\"><a href=\"#Actions\" class=\"headerlink\" title=\"Actions\"></a>Actions</h4><p>action是一个具有<code>type</code>字段的普通JavaScript对象。你可以将action看作应用程序中发生了什么的事情<code>type</code>字段是一个字符串，给这个action一个描述性的名字，比如<code>&#39;&#39;todos/todoAdded&#39;&#39;</code>。我们通常把那个类型的字符串写成“域/事件名称”，其中第一部分是这个action所属的特征或类别，第二部分是发生的具体事情。action对象可以有其他字段，其中包含有关发生的事情的附加信息。按照惯例，我们将该信息放在名为<code>payload</code>的字段中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addTodoAction = &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;todos/todoAdded&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">payload</span>:<span class=\"string\">&#x27;Buy milk&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reducers\"><a href=\"#Reducers\" class=\"headerlink\" title=\"Reducers\"></a>Reducers</h4><p>reducer是一个函数，接收当前的<code>state</code>和一个<code>action</code>对象，必要时决定如何更新状态，并返回新状态。函数签名是：<code>(state,action) ⇒ newState</code>。你可以将reducer视为一个时间监听器，他根剧接收到的action类型处理事件。</p>\n<p>Reducer必须符合一下规则：</p>\n<ul>\n<li>仅使用<code>state</code>和<code>action</code>参数计算新 的状态值</li>\n<li>禁止直接修改<code>state</code>。必须通过复制现有的<code>state</code>并对复制的值进行更改的方式来做 不可变更新</li>\n<li>禁止任何异步逻辑、依赖随机值或者“副作用”的代码</li>\n</ul>\n<p>Reducer函数内部的逻辑通常包括一下步骤：</p>\n<p>检查Reducer是否关心这个action，是的话就复制state，使用新值更新state副本，然后返回新state，不是的返回原来的state不变</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">counterReducer</span>(<span class=\"params\">state = initialState, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查 reducer 是否关心这个 action</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action.<span class=\"property\">type</span> === <span class=\"string\">&#x27;counter/increment&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果是，复制 `state`</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...state,</span><br><span class=\"line\">      <span class=\"comment\">// 使用新值更新 state 副本</span></span><br><span class=\"line\">      <span class=\"attr\">value</span>: state.<span class=\"property\">value</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回原来的 state 不变</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> state</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Store\"><a href=\"#Store\" class=\"headerlink\" title=\"Store\"></a>Store</h4><p>当前Redux应用的状态存在于一个名为store的对象中。Store是通过传入一个reducer来创建的，并且有一个名为<code>getState</code>的方法，它返回当前状态值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; configureStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">configureStore</span>(&#123; <span class=\"attr\">reducer</span>: counterReducer &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\"><span class=\"comment\">// &#123;value: 0&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Dispatch\"><a href=\"#Dispatch\" class=\"headerlink\" title=\"Dispatch\"></a>Dispatch</h4><p>Redux store有一种方法叫<code>dispatch</code>。更新state的唯一方法是调用<code>store.dispatch</code>并传入一个action对象。store将执行所有reducer函数并计算更新后的state，调用<code>getState()</code>可以获取新state</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;counter/incremented&#x27;</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\"><span class=\"comment\">// &#123;value: 1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Selectors\"><a href=\"#Selectors\" class=\"headerlink\" title=\"Selectors\"></a>Selectors</h4><p>Selector函数可以从store状态书中提取指定的片段。随着应用变得越来越大，会遇到应用程序的不同部分需要读取相同的数据，selector可以避免重复这样的读取逻辑</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">selectCounterValue</span> = state =&gt; state.<span class=\"property\">value</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> currentValue = <span class=\"title function_\">selectCounterValue</span>(store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(currentValue)</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h2><p>Redux是一个使用叫作”actions”的事件去管理和更新应用状态的模式和工具库。它以集中式Store的方式对整个应用中使用的状态进行集中管理，其规则确保状态只能以可预测的方式更新。</p>\n<p>Redux提供的模式和工具使你更容易理解应用程序中的状态合适、何地、为什么以及如何更新，以及当这些更改发生时你的应用程序逻辑将如何表现。Redux知道你编写可预测和可测试的代码，这有助于让你确信你的应用程序将按预期工作</p>\n<p>适用场景</p>\n<ul>\n<li>在应用的大量地方，都存在大量的状态</li>\n<li>应用状态会随着时间的推移而频繁更新</li>\n<li>更新该状态的逻辑可能很复杂</li>\n<li>中型和大型代码量的应用，很多人协同开发</li>\n</ul>","more":"<h4 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h4><ul>\n<li>单一数据源</li>\n<li>State是只读的</li>\n<li>使用Reducer纯函数进行更改</li>\n</ul>\n<h4 id=\"Redux-Toolkit\"><a href=\"#Redux-Toolkit\" class=\"headerlink\" title=\"Redux Toolkit\"></a>Redux Toolkit</h4><p>Redux Toolkit是我们推荐的编写Redux逻辑的方法。它包含我们认为对于构建Redux应用程序必不可少的包和函数。Redux Toolkit构建在我们建议的最佳实践中，简化了大多数Redux任务，防止了常见错误，并使编写Redux应用程序变得更加容易</p>\n<h4 id=\"Redux-DevTools-拓展\"><a href=\"#Redux-DevTools-拓展\" class=\"headerlink\" title=\"Redux DevTools 拓展\"></a>Redux DevTools 拓展</h4><p>Redux DevTools 拓展可以显示Redux存储中状态随时间变化的历史记录。这允许你有效的调试应用程序，包括使用强大的技术，如“事件旅行调试”</p>\n<h4 id=\"Redux-Store\"><a href=\"#Redux-Store\" class=\"headerlink\" title=\"Redux Store\"></a>Redux Store</h4><p>所有Redux应用的中心都是store。”store”是保存应用程序的全局state的容器。</p>\n<p>store是一个JavaScript对象，但是对于一般的对象它具有一些特殊的功能和能力：</p>\n<ul>\n<li>不要直接修改或更改保存在Redux存储中的状态</li>\n<li>更新状态的唯一方法是创建一个描述“应用程序中发生的某些事情”的普通action对象，然后将该action    dispatch到store以告诉它发生了什么</li>\n<li>当一个action被dispatch后，store会调用reducer方法，让其根剧action和旧state计算出新state</li>\n<li>store会通知订阅者状态已更新，以便可以使用新数据更新UI界面</li>\n</ul>\n<h4 id=\"Actions\"><a href=\"#Actions\" class=\"headerlink\" title=\"Actions\"></a>Actions</h4><p>action是一个具有<code>type</code>字段的普通JavaScript对象。你可以将action看作应用程序中发生了什么的事情<code>type</code>字段是一个字符串，给这个action一个描述性的名字，比如<code>&#39;&#39;todos/todoAdded&#39;&#39;</code>。我们通常把那个类型的字符串写成“域/事件名称”，其中第一部分是这个action所属的特征或类别，第二部分是发生的具体事情。action对象可以有其他字段，其中包含有关发生的事情的附加信息。按照惯例，我们将该信息放在名为<code>payload</code>的字段中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> addTodoAction = &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&#x27;todos/todoAdded&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">payload</span>:<span class=\"string\">&#x27;Buy milk&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Reducers\"><a href=\"#Reducers\" class=\"headerlink\" title=\"Reducers\"></a>Reducers</h4><p>reducer是一个函数，接收当前的<code>state</code>和一个<code>action</code>对象，必要时决定如何更新状态，并返回新状态。函数签名是：<code>(state,action) ⇒ newState</code>。你可以将reducer视为一个时间监听器，他根剧接收到的action类型处理事件。</p>\n<p>Reducer必须符合一下规则：</p>\n<ul>\n<li>仅使用<code>state</code>和<code>action</code>参数计算新 的状态值</li>\n<li>禁止直接修改<code>state</code>。必须通过复制现有的<code>state</code>并对复制的值进行更改的方式来做 不可变更新</li>\n<li>禁止任何异步逻辑、依赖随机值或者“副作用”的代码</li>\n</ul>\n<p>Reducer函数内部的逻辑通常包括一下步骤：</p>\n<p>检查Reducer是否关心这个action，是的话就复制state，使用新值更新state副本，然后返回新state，不是的返回原来的state不变</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> initialState = &#123; <span class=\"attr\">value</span>: <span class=\"number\">0</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">counterReducer</span>(<span class=\"params\">state = initialState, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 检查 reducer 是否关心这个 action</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (action.<span class=\"property\">type</span> === <span class=\"string\">&#x27;counter/increment&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果是，复制 `state`</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...state,</span><br><span class=\"line\">      <span class=\"comment\">// 使用新值更新 state 副本</span></span><br><span class=\"line\">      <span class=\"attr\">value</span>: state.<span class=\"property\">value</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回原来的 state 不变</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> state</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Store\"><a href=\"#Store\" class=\"headerlink\" title=\"Store\"></a>Store</h4><p>当前Redux应用的状态存在于一个名为store的对象中。Store是通过传入一个reducer来创建的，并且有一个名为<code>getState</code>的方法，它返回当前状态值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; configureStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">configureStore</span>(&#123; <span class=\"attr\">reducer</span>: counterReducer &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\"><span class=\"comment\">// &#123;value: 0&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Dispatch\"><a href=\"#Dispatch\" class=\"headerlink\" title=\"Dispatch\"></a>Dispatch</h4><p>Redux store有一种方法叫<code>dispatch</code>。更新state的唯一方法是调用<code>store.dispatch</code>并传入一个action对象。store将执行所有reducer函数并计算更新后的state，调用<code>getState()</code>可以获取新state</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.<span class=\"title function_\">dispatch</span>(&#123; <span class=\"attr\">type</span>: <span class=\"string\">&#x27;counter/incremented&#x27;</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\"><span class=\"comment\">// &#123;value: 1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Selectors\"><a href=\"#Selectors\" class=\"headerlink\" title=\"Selectors\"></a>Selectors</h4><p>Selector函数可以从store状态书中提取指定的片段。随着应用变得越来越大，会遇到应用程序的不同部分需要读取相同的数据，selector可以避免重复这样的读取逻辑</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">selectCounterValue</span> = state =&gt; state.<span class=\"property\">value</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> currentValue = <span class=\"title function_\">selectCounterValue</span>(store.<span class=\"title function_\">getState</span>())</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(currentValue)</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>"},{"title":"我记得","typora-copy-images-to":"upload","top":20,"_content":"\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1974443814&auto=1&height=66\"></iframe>\n<!--more-->\n\n我带着比身体重的行李\n\n游入尼罗河底\n\n经过几道闪电 看到一堆光圈\n\n不确定是不是这里\n\n我看到几个人站在一起\n\n他们拿着剪刀摘走我的行李\n\n擦拭我的脑袋 没有机会回去\n\n知道我听见一个声音 我确定是你\n\n可你怎记得我\n\n我带来了另界的消息\n\n可我怎么告知你\n\n注定失忆着相遇\n\n我记得这里是片树林 后面有个山坡\n\n山坡上的枣树每当秋天到来\n\n我们把枣装满口袋\n\n我记得除了朋友我还 做过你的叔父\n\n你总喜欢跟在我的屁股后面\n\n只是为了那几个铜钱\n\n我记得我们曾是恋人 后来战争爆发\n\n你上战场后就再也没有回来\n\n直到收不到你的信\n\n我们总是这样重复分离 却要重新开始\n\n相互送别对方 说着来世再见\n\n再次失忆着相聚\n\n呜 呜 呜 呜\n\n快来抱抱 快来抱抱我\n\n呜 呜 呜 呜\n\n快来抱抱 快来抱抱我\n\n呜 呜 呜 呜\n\n快来抱抱 快来抱抱我\n\n呜 呜 呜 呜\n\n快来抱抱 快来抱抱我\n\n在路上我遇到了一位故去多年的人\n\n她是如此年轻 扎着过肩马尾\n\n露出和你一样的笑\n\n她和我讲了很多关于你成长的故事\n\n在星空另一端 思念从未停止\n\n如同墓碑上的名字\n\n不要哭我最亲爱的人 我最好的玩伴\n\n时空是个圆圈 直行或是转弯\n\n我们最终都会相见\n\n在城池的某个拐角处 在夕阳西下时\n\n在万家灯火的某一扇窗纱里\n\n人门失忆着相聚\n\n呜 快来抱抱 快来抱抱我\n\n呜 快来抱抱 快来抱抱我\n\n我终于找到你\n","source":"_posts/我记得.md","raw":"---\ntitle: 我记得\ntags: 音乐\ncategories: 生活\ntypora-copy-images-to: upload\ntop: 20\n---\n\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1974443814&auto=1&height=66\"></iframe>\n<!--more-->\n\n我带着比身体重的行李\n\n游入尼罗河底\n\n经过几道闪电 看到一堆光圈\n\n不确定是不是这里\n\n我看到几个人站在一起\n\n他们拿着剪刀摘走我的行李\n\n擦拭我的脑袋 没有机会回去\n\n知道我听见一个声音 我确定是你\n\n可你怎记得我\n\n我带来了另界的消息\n\n可我怎么告知你\n\n注定失忆着相遇\n\n我记得这里是片树林 后面有个山坡\n\n山坡上的枣树每当秋天到来\n\n我们把枣装满口袋\n\n我记得除了朋友我还 做过你的叔父\n\n你总喜欢跟在我的屁股后面\n\n只是为了那几个铜钱\n\n我记得我们曾是恋人 后来战争爆发\n\n你上战场后就再也没有回来\n\n直到收不到你的信\n\n我们总是这样重复分离 却要重新开始\n\n相互送别对方 说着来世再见\n\n再次失忆着相聚\n\n呜 呜 呜 呜\n\n快来抱抱 快来抱抱我\n\n呜 呜 呜 呜\n\n快来抱抱 快来抱抱我\n\n呜 呜 呜 呜\n\n快来抱抱 快来抱抱我\n\n呜 呜 呜 呜\n\n快来抱抱 快来抱抱我\n\n在路上我遇到了一位故去多年的人\n\n她是如此年轻 扎着过肩马尾\n\n露出和你一样的笑\n\n她和我讲了很多关于你成长的故事\n\n在星空另一端 思念从未停止\n\n如同墓碑上的名字\n\n不要哭我最亲爱的人 我最好的玩伴\n\n时空是个圆圈 直行或是转弯\n\n我们最终都会相见\n\n在城池的某个拐角处 在夕阳西下时\n\n在万家灯火的某一扇窗纱里\n\n人门失忆着相聚\n\n呜 快来抱抱 快来抱抱我\n\n呜 快来抱抱 快来抱抱我\n\n我终于找到你\n","slug":"我记得","published":1,"date":"2023-03-09T09:29:57.661Z","updated":"2023-03-09T09:44:09.828Z","_id":"clf0wzezl00007h9b0v6885um","comments":1,"layout":"post","photos":[],"link":"","content":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1974443814&auto=1&height=66\"></iframe>\n<span id=\"more\"></span>\n\n<p>我带着比身体重的行李</p>\n<p>游入尼罗河底</p>\n<p>经过几道闪电 看到一堆光圈</p>\n<p>不确定是不是这里</p>\n<p>我看到几个人站在一起</p>\n<p>他们拿着剪刀摘走我的行李</p>\n<p>擦拭我的脑袋 没有机会回去</p>\n<p>知道我听见一个声音 我确定是你</p>\n<p>可你怎记得我</p>\n<p>我带来了另界的消息</p>\n<p>可我怎么告知你</p>\n<p>注定失忆着相遇</p>\n<p>我记得这里是片树林 后面有个山坡</p>\n<p>山坡上的枣树每当秋天到来</p>\n<p>我们把枣装满口袋</p>\n<p>我记得除了朋友我还 做过你的叔父</p>\n<p>你总喜欢跟在我的屁股后面</p>\n<p>只是为了那几个铜钱</p>\n<p>我记得我们曾是恋人 后来战争爆发</p>\n<p>你上战场后就再也没有回来</p>\n<p>直到收不到你的信</p>\n<p>我们总是这样重复分离 却要重新开始</p>\n<p>相互送别对方 说着来世再见</p>\n<p>再次失忆着相聚</p>\n<p>呜 呜 呜 呜</p>\n<p>快来抱抱 快来抱抱我</p>\n<p>呜 呜 呜 呜</p>\n<p>快来抱抱 快来抱抱我</p>\n<p>呜 呜 呜 呜</p>\n<p>快来抱抱 快来抱抱我</p>\n<p>呜 呜 呜 呜</p>\n<p>快来抱抱 快来抱抱我</p>\n<p>在路上我遇到了一位故去多年的人</p>\n<p>她是如此年轻 扎着过肩马尾</p>\n<p>露出和你一样的笑</p>\n<p>她和我讲了很多关于你成长的故事</p>\n<p>在星空另一端 思念从未停止</p>\n<p>如同墓碑上的名字</p>\n<p>不要哭我最亲爱的人 我最好的玩伴</p>\n<p>时空是个圆圈 直行或是转弯</p>\n<p>我们最终都会相见</p>\n<p>在城池的某个拐角处 在夕阳西下时</p>\n<p>在万家灯火的某一扇窗纱里</p>\n<p>人门失忆着相聚</p>\n<p>呜 快来抱抱 快来抱抱我</p>\n<p>呜 快来抱抱 快来抱抱我</p>\n<p>我终于找到你</p>\n","site":{"data":{}},"excerpt":"<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=1974443814&auto=1&height=66\"></iframe>","more":"<p>我带着比身体重的行李</p>\n<p>游入尼罗河底</p>\n<p>经过几道闪电 看到一堆光圈</p>\n<p>不确定是不是这里</p>\n<p>我看到几个人站在一起</p>\n<p>他们拿着剪刀摘走我的行李</p>\n<p>擦拭我的脑袋 没有机会回去</p>\n<p>知道我听见一个声音 我确定是你</p>\n<p>可你怎记得我</p>\n<p>我带来了另界的消息</p>\n<p>可我怎么告知你</p>\n<p>注定失忆着相遇</p>\n<p>我记得这里是片树林 后面有个山坡</p>\n<p>山坡上的枣树每当秋天到来</p>\n<p>我们把枣装满口袋</p>\n<p>我记得除了朋友我还 做过你的叔父</p>\n<p>你总喜欢跟在我的屁股后面</p>\n<p>只是为了那几个铜钱</p>\n<p>我记得我们曾是恋人 后来战争爆发</p>\n<p>你上战场后就再也没有回来</p>\n<p>直到收不到你的信</p>\n<p>我们总是这样重复分离 却要重新开始</p>\n<p>相互送别对方 说着来世再见</p>\n<p>再次失忆着相聚</p>\n<p>呜 呜 呜 呜</p>\n<p>快来抱抱 快来抱抱我</p>\n<p>呜 呜 呜 呜</p>\n<p>快来抱抱 快来抱抱我</p>\n<p>呜 呜 呜 呜</p>\n<p>快来抱抱 快来抱抱我</p>\n<p>呜 呜 呜 呜</p>\n<p>快来抱抱 快来抱抱我</p>\n<p>在路上我遇到了一位故去多年的人</p>\n<p>她是如此年轻 扎着过肩马尾</p>\n<p>露出和你一样的笑</p>\n<p>她和我讲了很多关于你成长的故事</p>\n<p>在星空另一端 思念从未停止</p>\n<p>如同墓碑上的名字</p>\n<p>不要哭我最亲爱的人 我最好的玩伴</p>\n<p>时空是个圆圈 直行或是转弯</p>\n<p>我们最终都会相见</p>\n<p>在城池的某个拐角处 在夕阳西下时</p>\n<p>在万家灯火的某一扇窗纱里</p>\n<p>人门失忆着相聚</p>\n<p>呜 快来抱抱 快来抱抱我</p>\n<p>呜 快来抱抱 快来抱抱我</p>\n<p>我终于找到你</p>"},{"title":"js函数继承","typora-copy-images-to":"upload","top":122,"_content":"\n### 原型链继承\n<!--more-->\n```javascript\nfunction Parent(){\n  this.name = 'parent'\n}\n\nParent.prototype.getName = function(){\n  return this.name\n}\n\nfunction Child(){\n  thia.age = '18'\n}\n\nChild.prototype = new Parent\n\nvar child = new Child\n\nconsole.log(child.getName)//parent\nconsole.log(child.age)//18\n\n\n```\n\n### 构造函数继承（只能继承实例的属性和方法，不能继承原型对象上的属性和方法）\n\n```javascript\nfunction Parent(){\n  this.name = 'parent'\n}\n\nfunction Child(){\n  Parent.call(this)\n  this.age = '18'\n}\n\nvar child = new Child\nconsole.log(child.name)//parrent\nsonsole.log(child.age)//18\n```\n\n### 组合继承\n\n```javascript\nfunction Parent(){\n  this.name = 'parent'\n}\n\nParent.prototype.getName = function(){\n  return this.name\n}\n\nfunction Child(){\n  Parent.call(this)\n  this.age = '18'\n}\n\nChild.prototype = Object.create(Parent.prototype)\nChild.prototype.construtor = Child\n\nvar child = new Child\nconsole.log(child.name)//parent\nconsole.log(child.age)//age\nconsole.log(child.gatName)//parent\n```\n","source":"_posts/js函数继承.md","raw":"---\ntitle: js函数继承\ntags: 学习\ncategories: 前端\ntypora-copy-images-to: upload\ntop: 122\n---\n\n### 原型链继承\n<!--more-->\n```javascript\nfunction Parent(){\n  this.name = 'parent'\n}\n\nParent.prototype.getName = function(){\n  return this.name\n}\n\nfunction Child(){\n  thia.age = '18'\n}\n\nChild.prototype = new Parent\n\nvar child = new Child\n\nconsole.log(child.getName)//parent\nconsole.log(child.age)//18\n\n\n```\n\n### 构造函数继承（只能继承实例的属性和方法，不能继承原型对象上的属性和方法）\n\n```javascript\nfunction Parent(){\n  this.name = 'parent'\n}\n\nfunction Child(){\n  Parent.call(this)\n  this.age = '18'\n}\n\nvar child = new Child\nconsole.log(child.name)//parrent\nsonsole.log(child.age)//18\n```\n\n### 组合继承\n\n```javascript\nfunction Parent(){\n  this.name = 'parent'\n}\n\nParent.prototype.getName = function(){\n  return this.name\n}\n\nfunction Child(){\n  Parent.call(this)\n  this.age = '18'\n}\n\nChild.prototype = Object.create(Parent.prototype)\nChild.prototype.construtor = Child\n\nvar child = new Child\nconsole.log(child.name)//parent\nconsole.log(child.age)//age\nconsole.log(child.gatName)//parent\n```\n","slug":"js函数继承","published":1,"date":"2023-03-13T02:58:49.786Z","updated":"2023-03-13T03:05:13.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf68rzg70000559b177ofkbz","content":"<h3 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h3><span id=\"more\"></span>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  thia.<span class=\"property\">age</span> = <span class=\"string\">&#x27;18&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child.<span class=\"property\">getName</span>)<span class=\"comment\">//parent</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child.<span class=\"property\">age</span>)<span class=\"comment\">//18</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数继承（只能继承实例的属性和方法，不能继承原型对象上的属性和方法）\"><a href=\"#构造函数继承（只能继承实例的属性和方法，不能继承原型对象上的属性和方法）\" class=\"headerlink\" title=\"构造函数继承（只能继承实例的属性和方法，不能继承原型对象上的属性和方法）\"></a>构造函数继承（只能继承实例的属性和方法，不能继承原型对象上的属性和方法）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"string\">&#x27;18&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child.<span class=\"property\">name</span>)<span class=\"comment\">//parrent</span></span><br><span class=\"line\">sonsole.<span class=\"title function_\">log</span>(child.<span class=\"property\">age</span>)<span class=\"comment\">//18</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"string\">&#x27;18&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">construtor</span> = <span class=\"title class_\">Child</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child.<span class=\"property\">name</span>)<span class=\"comment\">//parent</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child.<span class=\"property\">age</span>)<span class=\"comment\">//age</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child.<span class=\"property\">gatName</span>)<span class=\"comment\">//parent</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"原型链继承\"><a href=\"#原型链继承\" class=\"headerlink\" title=\"原型链继承\"></a>原型链继承</h3>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  thia.<span class=\"property\">age</span> = <span class=\"string\">&#x27;18&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Parent</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child.<span class=\"property\">getName</span>)<span class=\"comment\">//parent</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child.<span class=\"property\">age</span>)<span class=\"comment\">//18</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构造函数继承（只能继承实例的属性和方法，不能继承原型对象上的属性和方法）\"><a href=\"#构造函数继承（只能继承实例的属性和方法，不能继承原型对象上的属性和方法）\" class=\"headerlink\" title=\"构造函数继承（只能继承实例的属性和方法，不能继承原型对象上的属性和方法）\"></a>构造函数继承（只能继承实例的属性和方法，不能继承原型对象上的属性和方法）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"string\">&#x27;18&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child.<span class=\"property\">name</span>)<span class=\"comment\">//parrent</span></span><br><span class=\"line\">sonsole.<span class=\"title function_\">log</span>(child.<span class=\"property\">age</span>)<span class=\"comment\">//18</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Parent</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;parent&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Child</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"title class_\">Parent</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"string\">&#x27;18&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"title class_\">Parent</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>)</span><br><span class=\"line\"><span class=\"title class_\">Child</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">construtor</span> = <span class=\"title class_\">Child</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> <span class=\"title class_\">Child</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child.<span class=\"property\">name</span>)<span class=\"comment\">//parent</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child.<span class=\"property\">age</span>)<span class=\"comment\">//age</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(child.<span class=\"property\">gatName</span>)<span class=\"comment\">//parent</span></span><br></pre></td></tr></table></figure>"},{"title":"新服务器部署express服务端和前端项目","typora-copy-images-to":"upload","top":20,"_content":"\n新的环境先下载项目运行的环境\n\n在CentOS 或 RHEL 系统上，使用yun安装软件\n\n在 Ubuntu 或 Debian 系统上，使用apt安装软件\n<!--more-->\n\n安装nginx\n\n```纯文本\nyun install nginx \n```\n\n安装node.js\n\n```纯文本\nyun install node\n```\n\n安装npm\n\n```纯文本\nyun install npm\n```\n\n删除默认nginx 配置文件\n\n```纯文本\nrm -rf /etc/nginx/sites-enabled/default\n```\n\n编辑nginx配置文件\n\n```纯文本\nvim /etc/nginx/conf.d/default.conf\n```\n\n在配置文件中输入以下nginx配置(xxx为你前端资源所在的路径，yyyy是你服务端项目启动的端口)\n\n```javascript\nserver {\n    listen       80 default_server;\n    server_name  _;\n    root /root/xxx;\n    \nlocation /api/ {\n            add_header Access-Control-Allow-Origin $http_origin;\n            add_header Access-Control-Allow-Methods $http_access_control_request_method;\n            add_header Access-Control-Allow-Credentials true;\n            add_header Access-Control-Allow-Headers $http_access_control_request_headers;\n            add_header Access-Control-Max-Age 1728000;\n            proxy_set_header Connection '';\n            proxy_http_version 1.1;\n            chunked_transfer_encoding off;\n            proxy_buffering off;\n            proxy_cache off;\n            proxy_pass   http://127.0.0.1:yyyy;\n    }\n\n    location / {\n        root   /root/xxx; \n        index  index.html index.htm;\n    }\n}\n```\n\n更改/etc/nginx/nginx.conf文件设置的ngnix权限\n\n```javascript\nvim /etc/nginx/nginx.conf\n```\n\n进入文件后查看user配置的什么权限，我的服务器上默认的是`user nginx`，把`nginx`改成`root`就好了\n\n![](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/Snipaste_2023-03-21_17-25-10.png)\n\n启动nginx或者重启\n\n```javascript\nnginx //启动\nnginx -s reload //重新启动\n\n```\n\n上传前端编译后的代码根目录\n\n上传服务端代码到根目录后进入文件夹下载依赖\n\n```javascript\nnpm i\n```\n\n执行命令\n\n```javascript\nnohup npm start >> service.log & //在后台启动项目并且在service.log打印日志\n```\n","source":"_posts/服务器部署.md","raw":"---\ntitle: 新服务器部署express服务端和前端项目\ntags: 服务器\ncategories: 前端\ntypora-copy-images-to: upload\ntop: 20\n---\n\n新的环境先下载项目运行的环境\n\n在CentOS 或 RHEL 系统上，使用yun安装软件\n\n在 Ubuntu 或 Debian 系统上，使用apt安装软件\n<!--more-->\n\n安装nginx\n\n```纯文本\nyun install nginx \n```\n\n安装node.js\n\n```纯文本\nyun install node\n```\n\n安装npm\n\n```纯文本\nyun install npm\n```\n\n删除默认nginx 配置文件\n\n```纯文本\nrm -rf /etc/nginx/sites-enabled/default\n```\n\n编辑nginx配置文件\n\n```纯文本\nvim /etc/nginx/conf.d/default.conf\n```\n\n在配置文件中输入以下nginx配置(xxx为你前端资源所在的路径，yyyy是你服务端项目启动的端口)\n\n```javascript\nserver {\n    listen       80 default_server;\n    server_name  _;\n    root /root/xxx;\n    \nlocation /api/ {\n            add_header Access-Control-Allow-Origin $http_origin;\n            add_header Access-Control-Allow-Methods $http_access_control_request_method;\n            add_header Access-Control-Allow-Credentials true;\n            add_header Access-Control-Allow-Headers $http_access_control_request_headers;\n            add_header Access-Control-Max-Age 1728000;\n            proxy_set_header Connection '';\n            proxy_http_version 1.1;\n            chunked_transfer_encoding off;\n            proxy_buffering off;\n            proxy_cache off;\n            proxy_pass   http://127.0.0.1:yyyy;\n    }\n\n    location / {\n        root   /root/xxx; \n        index  index.html index.htm;\n    }\n}\n```\n\n更改/etc/nginx/nginx.conf文件设置的ngnix权限\n\n```javascript\nvim /etc/nginx/nginx.conf\n```\n\n进入文件后查看user配置的什么权限，我的服务器上默认的是`user nginx`，把`nginx`改成`root`就好了\n\n![](https://raw.githubusercontent.com/rht-fsang/md-image/master/img/Snipaste_2023-03-21_17-25-10.png)\n\n启动nginx或者重启\n\n```javascript\nnginx //启动\nnginx -s reload //重新启动\n\n```\n\n上传前端编译后的代码根目录\n\n上传服务端代码到根目录后进入文件夹下载依赖\n\n```javascript\nnpm i\n```\n\n执行命令\n\n```javascript\nnohup npm start >> service.log & //在后台启动项目并且在service.log打印日志\n```\n","slug":"服务器部署","published":1,"date":"2023-03-21T09:29:24.661Z","updated":"2023-03-21T09:32:06.921Z","_id":"clfi231hr0000lj9b1ncx61na","comments":1,"layout":"post","photos":[],"link":"","content":"<p>新的环境先下载项目运行的环境</p>\n<p>在CentOS 或 RHEL 系统上，使用yun安装软件</p>\n<p>在 Ubuntu 或 Debian 系统上，使用apt安装软件</p>\n<span id=\"more\"></span>\n\n<p>安装nginx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yun install nginx </span><br></pre></td></tr></table></figure>\n\n<p>安装node.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yun install node</span><br></pre></td></tr></table></figure>\n\n<p>安装npm</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yun install npm</span><br></pre></td></tr></table></figure>\n\n<p>删除默认nginx 配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure>\n\n<p>编辑nginx配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中输入以下nginx配置(xxx为你前端资源所在的路径，yyyy是你服务端项目启动的端口)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       <span class=\"number\">80</span> default_server;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\">    root /root/xxx;</span><br><span class=\"line\">    </span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">            add_header <span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Origin</span> $http_origin;</span><br><span class=\"line\">            add_header <span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Methods</span> $http_access_control_request_method;</span><br><span class=\"line\">            add_header <span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Credentials</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            add_header <span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Headers</span> $http_access_control_request_headers;</span><br><span class=\"line\">            add_header <span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Max</span>-<span class=\"title class_\">Age</span> <span class=\"number\">1728000</span>;</span><br><span class=\"line\">            proxy_set_header <span class=\"title class_\">Connection</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            proxy_http_version <span class=\"number\">1.1</span>;</span><br><span class=\"line\">            chunked_transfer_encoding off;</span><br><span class=\"line\">            proxy_buffering off;</span><br><span class=\"line\">            proxy_cache off;</span><br><span class=\"line\">            proxy_pass   <span class=\"attr\">http</span>:<span class=\"comment\">//127.0.0.1:yyyy;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /root/xxx; </span><br><span class=\"line\">        index  index.<span class=\"property\">html</span> index.<span class=\"property\">htm</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更改/etc/nginx/nginx.conf文件设置的ngnix权限</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.<span class=\"property\">conf</span></span><br></pre></td></tr></table></figure>\n\n<p>进入文件后查看user配置的什么权限，我的服务器上默认的是<code>user nginx</code>，把<code>nginx</code>改成<code>root</code>就好了</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/Snipaste_2023-03-21_17-25-10.png\"></p>\n<p>启动nginx或者重启</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx <span class=\"comment\">//启动</span></span><br><span class=\"line\">nginx -s reload <span class=\"comment\">//重新启动</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上传前端编译后的代码根目录</p>\n<p>上传服务端代码到根目录后进入文件夹下载依赖</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i</span><br></pre></td></tr></table></figure>\n\n<p>执行命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup npm start &gt;&gt; service.<span class=\"property\">log</span> &amp; <span class=\"comment\">//在后台启动项目并且在service.log打印日志</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>新的环境先下载项目运行的环境</p>\n<p>在CentOS 或 RHEL 系统上，使用yun安装软件</p>\n<p>在 Ubuntu 或 Debian 系统上，使用apt安装软件</p>","more":"<p>安装nginx</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yun install nginx </span><br></pre></td></tr></table></figure>\n\n<p>安装node.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yun install node</span><br></pre></td></tr></table></figure>\n\n<p>安装npm</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yun install npm</span><br></pre></td></tr></table></figure>\n\n<p>删除默认nginx 配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure>\n\n<p>编辑nginx配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure>\n\n<p>在配置文件中输入以下nginx配置(xxx为你前端资源所在的路径，yyyy是你服务端项目启动的端口)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       <span class=\"number\">80</span> default_server;</span><br><span class=\"line\">    server_name  _;</span><br><span class=\"line\">    root /root/xxx;</span><br><span class=\"line\">    </span><br><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">            add_header <span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Origin</span> $http_origin;</span><br><span class=\"line\">            add_header <span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Methods</span> $http_access_control_request_method;</span><br><span class=\"line\">            add_header <span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Credentials</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            add_header <span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Allow</span>-<span class=\"title class_\">Headers</span> $http_access_control_request_headers;</span><br><span class=\"line\">            add_header <span class=\"title class_\">Access</span>-<span class=\"title class_\">Control</span>-<span class=\"title class_\">Max</span>-<span class=\"title class_\">Age</span> <span class=\"number\">1728000</span>;</span><br><span class=\"line\">            proxy_set_header <span class=\"title class_\">Connection</span> <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">            proxy_http_version <span class=\"number\">1.1</span>;</span><br><span class=\"line\">            chunked_transfer_encoding off;</span><br><span class=\"line\">            proxy_buffering off;</span><br><span class=\"line\">            proxy_cache off;</span><br><span class=\"line\">            proxy_pass   <span class=\"attr\">http</span>:<span class=\"comment\">//127.0.0.1:yyyy;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root   /root/xxx; </span><br><span class=\"line\">        index  index.<span class=\"property\">html</span> index.<span class=\"property\">htm</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>更改/etc/nginx/nginx.conf文件设置的ngnix权限</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.<span class=\"property\">conf</span></span><br></pre></td></tr></table></figure>\n\n<p>进入文件后查看user配置的什么权限，我的服务器上默认的是<code>user nginx</code>，把<code>nginx</code>改成<code>root</code>就好了</p>\n<p><img src=\"https://raw.githubusercontent.com/rht-fsang/md-image/master/img/Snipaste_2023-03-21_17-25-10.png\"></p>\n<p>启动nginx或者重启</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx <span class=\"comment\">//启动</span></span><br><span class=\"line\">nginx -s reload <span class=\"comment\">//重新启动</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上传前端编译后的代码根目录</p>\n<p>上传服务端代码到根目录后进入文件夹下载依赖</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i</span><br></pre></td></tr></table></figure>\n\n<p>执行命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup npm start &gt;&gt; service.<span class=\"property\">log</span> &amp; <span class=\"comment\">//在后台启动项目并且在service.log打印日志</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"clc9yxb8t000750ut5okdbsqs","category_id":"clc9yxb8q000450utanes4tux","_id":"clc9yxb8x000f50utey7geqq0"},{"post_id":"clc9yxb8m000150utfz173lzm","category_id":"clc9yxb8q000450utanes4tux","_id":"clc9yxb8y000k50utd5lz8p5z"},{"post_id":"clc9yxb8t000850ut6co3hjpr","category_id":"clc9yxb8q000450utanes4tux","_id":"clc9yxb8y000m50ut1xwbc6gm"},{"post_id":"clc9yxb8v000c50ut00hq4j8k","category_id":"clc9yxb8q000450utanes4tux","_id":"clc9yxb8z000p50ut65y50upp"},{"post_id":"clc9yxb8p000350ut20kj9uop","category_id":"clc9yxb8q000450utanes4tux","_id":"clc9yxb8z000r50ut9e8qhhjr"},{"post_id":"clc9yxb8w000e50utf9q448hi","category_id":"clc9yxb8q000450utanes4tux","_id":"clc9yxb8z000t50utdpks0r6h"},{"post_id":"clc9yxb8x000j50ut7lbv7aib","category_id":"clc9yxb8q000450utanes4tux","_id":"clc9yxb8z000v50ute90525ys"},{"post_id":"clc9yxb8s000650ut8p9x2q9y","category_id":"clc9yxb8q000450utanes4tux","_id":"clc9yxb8z000w50ut9ym085z4"},{"post_id":"clc9z2v3q0000qgutcifz98fd","category_id":"clc9z2v3t0001qgut6ybi85eg","_id":"clc9z2v3w0003qgutg8nm7a6j"},{"post_id":"clexp5wzq00008d9bat183ayx","category_id":"clc9yxb8q000450utanes4tux","_id":"clexpc8el0001hr9b4erj47jo"},{"post_id":"clf0wzezl00007h9b0v6885um","category_id":"clc9z2v3t0001qgut6ybi85eg","_id":"clf0wzezo00027h9b5busansr"},{"post_id":"clf68rzg70000559b177ofkbz","category_id":"clc9yxb8q000450utanes4tux","_id":"clf68rzg90002559bf2ncg4u9"},{"post_id":"clfi231hr0000lj9b1ncx61na","category_id":"clc9yxb8q000450utanes4tux","_id":"clfi231hx0002lj9bbmfad0yt"}],"PostTag":[{"post_id":"clc9yxb8t000750ut5okdbsqs","tag_id":"clc9yxb8r000550ut2g6oa8v6","_id":"clc9yxb8v000b50utgbscelbv"},{"post_id":"clc9yxb8m000150utfz173lzm","tag_id":"clc9yxb8r000550ut2g6oa8v6","_id":"clc9yxb8w000d50ut0tn0f6yh"},{"post_id":"clc9yxb8t000850ut6co3hjpr","tag_id":"clc9yxb8r000550ut2g6oa8v6","_id":"clc9yxb8x000i50ut0tu74gn8"},{"post_id":"clc9yxb8p000350ut20kj9uop","tag_id":"clc9yxb8u000a50ut5j6obh0d","_id":"clc9yxb8y000l50utdcegct5m"},{"post_id":"clc9yxb8w000e50utf9q448hi","tag_id":"clc9yxb8u000a50ut5j6obh0d","_id":"clc9yxb8z000o50uthhnd5077"},{"post_id":"clc9yxb8x000j50ut7lbv7aib","tag_id":"clc9yxb8r000550ut2g6oa8v6","_id":"clc9yxb8z000q50utgi9odxre"},{"post_id":"clc9yxb8s000650ut8p9x2q9y","tag_id":"clc9yxb8r000550ut2g6oa8v6","_id":"clc9yxb8z000s50ut4jxs9gt8"},{"post_id":"clc9yxb8v000c50ut00hq4j8k","tag_id":"clc9yxb8y000n50ut0pqn3wq2","_id":"clc9yxb8z000u50ut77ppersi"},{"post_id":"clc9z2v3q0000qgutcifz98fd","tag_id":"clc9yxb8u000a50ut5j6obh0d","_id":"clc9z2v3w0002qgut28sr9p62"},{"post_id":"clexp5wzq00008d9bat183ayx","tag_id":"clc9yxb8r000550ut2g6oa8v6","_id":"clexpc8el0000hr9bdjfq6qjz"},{"post_id":"clf0wzezl00007h9b0v6885um","tag_id":"clf0wzezm00017h9b9w8admda","_id":"clf0wzezo00037h9bf4ys3mwy"},{"post_id":"clf68rzg70000559b177ofkbz","tag_id":"clc9yxb8r000550ut2g6oa8v6","_id":"clf68rzg90001559b47cyddj3"},{"post_id":"clfi231hr0000lj9b1ncx61na","tag_id":"clfi231hw0001lj9bf0codjrz","_id":"clfi231hy0003lj9bbcwiclb2"}],"Tag":[{"name":"学习","_id":"clc9yxb8r000550ut2g6oa8v6"},{"name":"总结","_id":"clc9yxb8u000a50ut5j6obh0d"},{"name":"markdown","_id":"clc9yxb8y000n50ut0pqn3wq2"},{"name":"音乐","_id":"clf0wzezm00017h9b9w8admda"},{"name":"服务器","_id":"clfi231hw0001lj9bf0codjrz"}]}}